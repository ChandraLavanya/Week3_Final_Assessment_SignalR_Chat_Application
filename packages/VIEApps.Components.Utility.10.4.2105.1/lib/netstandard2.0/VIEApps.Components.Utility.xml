<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VIEApps.Components.Utility</name>
    </assembly>
    <members>
        <member name="T:net.vieapps.Components.Utility.CollectionService">
            <summary>
            Static servicing methods for working with collections
            </summary>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Performs the specified action on each element of the collection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable"></param>
            <param name="action">The delegated action to perform on each element of the collection</param>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
            Performs the specified action on each element of the collection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable"></param>
            <param name="action">The delegated action to perform on each element of the collection</param>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ForEach``2(System.Collections.Generic.IDictionary{``0,``1},System.Action{``1})">
            <summary>
            Performs the specified action on each element of the collection
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="action">The delegated action to perform on each element of the collection</param>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ForEach``2(System.Collections.Generic.IDictionary{``0,``1},System.Action{``1,System.Int32})">
            <summary>
            Performs the specified action on each element of the collection
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="action">The delegated action to perform on each element of the collection</param>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ForEach``2(System.Collections.Generic.IDictionary{``0,``1},System.Action{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Performs the specified action on each element of the collection
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="action">The delegated action to perform on each element of the collection</param>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ForEach``2(System.Collections.Generic.IDictionary{``0,``1},System.Action{System.Collections.Generic.KeyValuePair{``0,``1},System.Int32})">
            <summary>
            Performs the specified action on each element of the collection
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="action">The delegated action to perform on each element of the collection</param>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ForEachAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
             Performs the specified action on each element of the collection (in asynchronous way)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable"></param>
            <param name="actionAsync">The delegated action to perform on each element of the collection</param>
            <param name="waitForAllCompleted">true to wait for all tasks are completed before leaving; otherwise false to fire-and-forget.</param>
            <param name="parallelExecutions">true to execute all tasks in parallel; otherwise false to execute in sequence.</param>
            <param name="captureContext">true to capture/return back to calling context.</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ForEachAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
             Performs the specified action on each element of the collection (in asynchronous way)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable"></param>
            <param name="actionAsync">The delegated action to perform on each element of the collection</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="waitForAllCompleted">true to wait for all tasks are completed before leaving; otherwise false to fire-and-forget.</param>
            <param name="parallelExecutions">true to execute all tasks in parallel; otherwise false to execute in sequence.</param>
            <param name="captureContext">true to capture/return back to calling context.</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ForEachAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Threading.Tasks.Task},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Performs the specified action on each element of the collection (in asynchronous way)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dictionary"></param>
            <param name="actionAsync">The delegated action to perform on each element of the collection</param>
            <param name="waitForAllCompleted">true to wait for all tasks are completed before leaving; otherwise false to fire-and-forget.</param>
            <param name="parallelExecutions">true to execute all tasks in parallel; otherwise false to execute in sequence.</param>
            <param name="captureContext">true to capture/return back to calling context.</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ForEachAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Performs the specified action on each element of the collection (in asynchronous way)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dictionary"></param>
            <param name="actionAsync">The delegated action to perform on each element of the collection</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="waitForAllCompleted">true to wait for all tasks are completed before leaving; otherwise false to fire-and-forget.</param>
            <param name="parallelExecutions">true to execute all tasks in parallel; otherwise false to execute in sequence.</param>
            <param name="captureContext">true to capture/return back to calling context.</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ForEachAsync``2(System.Collections.Generic.IDictionary{``0,``1},System.Func{``1,System.Threading.Tasks.Task},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
             Performs the specified action on each element of the collection (in asynchronous way)
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="actionAsync">The delegated action to perform on each element of the collection</param>
            <param name="waitForAllCompleted">true to wait for all tasks are completed before leaving; otherwise false to fire-and-forget.</param>
            <param name="parallelExecutions">true to execute all tasks in parallel; otherwise false to execute in sequence.</param>
            <param name="captureContext">true to capture/return back to calling context.</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ForEachAsync``2(System.Collections.Generic.IDictionary{``0,``1},System.Func{``1,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
             Performs the specified action on each element of the collection (in asynchronous way)
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="actionAsync">The delegated action to perform on each element of the collection</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="waitForAllCompleted">true to wait for all tasks are completed before leaving; otherwise false to fire-and-forget.</param>
            <param name="parallelExecutions">true to execute all tasks in parallel; otherwise false to execute in sequence.</param>
            <param name="captureContext">true to capture/return back to calling context.</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ForEachAsync``2(System.Collections.Generic.IDictionary{``0,``1},System.Func{``1,System.Int32,System.Threading.Tasks.Task},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Performs the specified action on each element of the collection (in asynchronous way)
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="actionAsync">The delegated action to perform on each element of the collection</param>
            <param name="waitForAllCompleted">true to wait for all tasks are completed before leaving; otherwise false to fire-and-forget.</param>
            <param name="parallelExecutions">true to execute all tasks in parallel; otherwise false to execute in sequence.</param>
            <param name="captureContext">true to capture/return back to calling context.</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ForEachAsync``2(System.Collections.Generic.IDictionary{``0,``1},System.Func{``1,System.Int32,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Performs the specified action on each element of the collection (in asynchronous way)
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="actionAsync">The delegated action to perform on each element of the collection</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="waitForAllCompleted">true to wait for all tasks are completed before leaving; otherwise false to fire-and-forget.</param>
            <param name="parallelExecutions">true to execute all tasks in parallel; otherwise false to execute in sequence.</param>
            <param name="captureContext">true to capture/return back to calling context.</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ForEachAsync``2(System.Collections.Generic.IDictionary{``0,``1},System.Func{System.Collections.Generic.KeyValuePair{``0,``1},System.Threading.Tasks.Task},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
             Performs the specified action on each element of the collection (in asynchronous way)
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="actionAsync">The delegated action to perform on each element of the collection</param>
            <param name="waitForAllCompleted">true to wait for all tasks are completed before leaving; otherwise false to fire-and-forget.</param>
            <param name="parallelExecutions">true to execute all tasks in parallel; otherwise false to execute in sequence.</param>
            <param name="captureContext">true to capture/return back to calling context.</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ForEachAsync``2(System.Collections.Generic.IDictionary{``0,``1},System.Func{System.Collections.Generic.KeyValuePair{``0,``1},System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
             Performs the specified action on each element of the collection (in asynchronous way)
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="actionAsync">The delegated action to perform on each element of the collection</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="waitForAllCompleted">true to wait for all tasks are completed before leaving; otherwise false to fire-and-forget.</param>
            <param name="parallelExecutions">true to execute all tasks in parallel; otherwise false to execute in sequence.</param>
            <param name="captureContext">true to capture/return back to calling context.</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ForEachAsync``2(System.Collections.Generic.IDictionary{``0,``1},System.Func{System.Collections.Generic.KeyValuePair{``0,``1},System.Int32,System.Threading.Tasks.Task},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Performs the specified action on each element of the collection (in asynchronous way)
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="actionAsync">The delegated action to perform on each element of the collection</param>
            <param name="waitForAllCompleted">true to wait for all tasks are completed before leaving; otherwise false to fire-and-forget.</param>
            <param name="parallelExecutions">true to execute all tasks in parallel; otherwise false to execute in sequence.</param>
            <param name="captureContext">true to capture/return back to calling context.</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ForEachAsync``2(System.Collections.Generic.IDictionary{``0,``1},System.Func{System.Collections.Generic.KeyValuePair{``0,``1},System.Int32,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Performs the specified action on each element of the collection (in asynchronous way)
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="actionAsync">The delegated action to perform on each element of the collection</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="waitForAllCompleted">true to wait for all tasks are completed before leaving; otherwise false to fire-and-forget.</param>
            <param name="parallelExecutions">true to execute all tasks in parallel; otherwise false to execute in sequence.</param>
            <param name="captureContext">true to capture/return back to calling context.</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToArray(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Converts this string to an array
            </summary>
            <param name="string"></param>
            <param name="separator"></param>
            <param name="removeEmptyElements"></param>
            <param name="trim"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToArray(System.String,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Converts this string to an array
            </summary>
            <param name="string"></param>
            <param name="separator"></param>
            <param name="removeEmptyElements"></param>
            <param name="trim"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToList(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Converts this string to an array
            </summary>
            <param name="string"></param>
            <param name="separator"></param>
            <param name="removeEmptyElements"></param>
            <param name="trim"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToList(System.String,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Converts this string to an array
            </summary>
            <param name="string"></param>
            <param name="separator"></param>
            <param name="removeEmptyElements"></param>
            <param name="trim"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToHashSet(System.String,System.String,System.Boolean,System.Boolean,System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Converts this string to a hash-set
            </summary>
            <param name="string"></param>
            <param name="separator"></param>
            <param name="removeEmptyElements"></param>
            <param name="trim"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToHashSet(System.String,System.Char,System.Boolean,System.Boolean,System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Converts this string to a hash-set
            </summary>
            <param name="string"></param>
            <param name="separator"></param>
            <param name="removeEmptyElements"></param>
            <param name="trim"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToString(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Converts this collection to string
            </summary>
            <param name="object"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.Join(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Converts this collection to string
            </summary>
            <param name="object"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToString``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{``0,System.String})">
            <summary>
            Converts this collection to string
            </summary>
            <param name="object"></param>
            <param name="separator"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToString(System.Collections.Specialized.NameValueCollection,System.String,System.String)">
            <summary>
            Converts this collection to string
            </summary>
            <param name="object"></param>
            <param name="elementSeparator"></param>
            <param name="valueSeparator"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.First``1(``0[])">
            <summary>
            Gets the first element
            </summary>
            <typeparam name="T"></typeparam>
            <param name="object"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.First``1(System.Collections.Generic.IList{``0})">
            <summary>
            Gets the first element
            </summary>
            <typeparam name="T"></typeparam>
            <param name="object"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.First``1(System.Collections.Specialized.Collection)">
            <summary>
            Gets the first element
            </summary>
            <typeparam name="T"></typeparam>
            <param name="object"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.Last``1(``0[])">
            <summary>
            Gets the last element
            </summary>
            <typeparam name="T"></typeparam>
            <param name="object"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.Last``1(System.Collections.Generic.IList{``0})">
            <summary>
            Gets the last element
            </summary>
            <typeparam name="T"></typeparam>
            <param name="object"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.Last``1(System.Collections.Specialized.Collection)">
            <summary>
            Gets the last element
            </summary>
            <typeparam name="T"></typeparam>
            <param name="object"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.Concat``1(``0[],``0[][])">
            <summary>
            Concats other arrays with this array object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="object"></param>
            <param name="arrays"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.Concat``1(System.Collections.Generic.Queue{``0[]})">
            <summary>
            Concats all elements of this queue object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="object"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.Concat``1(System.Collections.Concurrent.ConcurrentQueue{``0[]})">
            <summary>
            Concats all elements of this concurrent queue object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="object"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.Take``1(``0[],System.Int32,System.Int32)">
            <summary>
            Takes a sub-array from this array object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="object"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.Take``1(System.ArraySegment{``0})">
            <summary>
            Takes the array from this array segment
            </summary>
            <param name="segment"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.Split``1(``0[],System.Int32)">
            <summary>
            Splits this array to sub-arrays
            </summary>
            <typeparam name="T"></typeparam>
            <param name="object"></param>
            <param name="size">The size (length) of one sub-array</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.Split``1(System.ArraySegment{``0},System.Int32)">
            <summary>
            Splits this array segment to sub-arrays
            </summary>
            <typeparam name="T"></typeparam>
            <param name="segment"></param>
            <param name="size">The size (length) of one sub-array</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.TryAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Attempts to add the specified key and value to the dictionary
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="object"></param>
            <param name="key">The key of the element to add</param>
            <param name="value">The value of the element to add. It can be null</param>
            <returns>true if the key/value pair was added to the dictionary successfully; otherwise false.</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.Remove``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1@)">
            <summary>
            Removes the value with the specified key from the dictionary
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="object"></param>
            <param name="key">The key of the element to remove</param>
            <param name="value">The element that be removed from dictionary</param>
            <returns>true if the element is successfully found and removed; otherwise, false. This method returns false if key is not found in the dictionary.</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.Add``2(System.Collections.Concurrent.ConcurrentDictionary{``0,``1},``0,``1)">
            <summary>
            Attempts to add the value that has the specified key into this dictionary
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="object"></param>
            <param name="key">The key of the element to remove</param>
            <returns>true if the object was removed successfully; otherwise, false.</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.Remove``2(System.Collections.Concurrent.ConcurrentDictionary{``0,``1},``0)">
            <summary>
            Attempts to remove the value that has the specified key from this dictionary
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="object"></param>
            <param name="key">The key of the element to remove</param>
            <returns>true if the object was removed successfully; otherwise, false.</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.Get``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Gets the value associated with the specified key from this dictionary
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="object"></param>
            <param name="key">The key of the value to get</param>
            <param name="default"></param>
            <returns>When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.Append``1(System.Collections.Generic.IList{``0},System.Boolean,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Appends items into collection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="object"></param>
            <param name="allowDuplicated">true to allow duplicated item existed in the collection</param>
            <param name="items">Items to append</param>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.Append``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Appends items into collection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="object"></param>
            <param name="items">Items to append</param>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.Append``1(System.Collections.Generic.IList{``0},System.Boolean,System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Appends items into collection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="object"></param>
            <param name="allowDuplicated">true to allow items can be duplicated, false if otherwise</param>
            <param name="lists"></param>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.Append``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Appends items into collection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="object"></param>
            <param name="lists"></param>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.Append``1(System.Collections.Generic.ISet{``0},``0)">
            <summary>
            Appends items into collection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="object"></param>
            <param name="item"></param>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.Append``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Appends items into collection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="object"></param>
            <param name="items"></param>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.Append``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Appends items into collection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="object"></param>
            <param name="lists"></param>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.Swap``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            Swaps the two-elements by the specified indexes
            </summary>
            <typeparam name="T"></typeparam>
            <param name="object"></param>
            <param name="first">The zero-based index of the first element to swap</param>
            <param name="second">The zero-based index of the second element to swap</param>
            <returns>true if swap success.</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.Randomize``1(System.Collections.Generic.IList{``0})">
            <summary>
            Randomizes (swap items with random indexes)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="object"></param>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToList``1(System.Collections.Specialized.Collection)">
            <summary>
            Creates a list from this collection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="object"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToList``1(Newtonsoft.Json.Linq.JArray,System.Func{Newtonsoft.Json.Linq.JToken,``0})">
            <summary>
            Creates a list of objects from this JSON
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json">The JSON object that presents the serialized data of collection of objects</param>
            <param name="converter">The conversion</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToList``1(Newtonsoft.Json.Linq.JObject,System.Func{Newtonsoft.Json.Linq.JToken,``0})">
            <summary>
            Creates a list of objects from this JSON
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json">The JSON object that presents the serialized data of collection of objects</param>
            <param name="converter">The conversion</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToList``1(Newtonsoft.Json.Linq.JObject,System.Func{System.Collections.Generic.KeyValuePair{System.String,Newtonsoft.Json.Linq.JToken},``0})">
            <summary>
            Creates a list of objects from this JSON
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json">The JSON object that presents the serialized data of collection of objects</param>
            <param name="converter">The conversion</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToList(System.Xml.XmlNodeList)">
            <summary>
            Converts a list of XML nodes to list of XML nodes
            </summary>
            <param name="xmlNodes"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToList(System.Xml.XmlAttributeCollection)">
            <summary>
            Converts a list of XML attributes to list of XML attributes
            </summary>
            <param name="xmlAttributes"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
            Creates a hash-set from this collection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="object"></param>
            <param name="checkDuplicated"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToHashSet``1(System.Collections.Specialized.Collection,System.Boolean)">
            <summary>
            Creates a hash-set from this collection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="object"></param>
            <param name="checkDuplicated"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToDictionary``2(System.Collections.Specialized.Collection,System.Action{System.Collections.Generic.Dictionary{``0,``1}})">
            <summary>
            Creates a dictionary from this collection
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="object"></param>
            <param name="onPreCompleted"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToDictionary``2(System.Collections.Generic.Collection{``0,``1},System.Action{System.Collections.Generic.Dictionary{``0,``1}})">
            <summary>
            Creates a dictionary from this collection
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="object"></param>
            <param name="onPreCompleted"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToDictionary(System.Collections.Specialized.NameValueCollection,System.Action{System.Collections.Generic.Dictionary{System.String,System.String}},System.StringComparer)">
            <summary>
            Creates a dictionary from this collection with all keys in lower case
            </summary>
            <param name="nvCollection"></param>
            <param name="onPreCompleted"></param>
            <param name="stringComparer"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToDictionary``2(Newtonsoft.Json.Linq.JObject,System.String,System.Func{Newtonsoft.Json.Linq.JToken,``1})">
            <summary>
            Creates a dictionary from from this JSON
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="json">The JSON object that presents the serialized data of collection of objects</param>
            <param name="keyAttribute">The string that presents name of the attribute that their value will be used a the key of collection of objects</param>
            <param name="converter">The conversion</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToDictionary``2(Newtonsoft.Json.Linq.JArray,System.String,System.Func{Newtonsoft.Json.Linq.JToken,``1})">
            <summary>
            Creates a dictionary of objects from this JSON
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="json">The JSON object that presents the serialized data of collection of objects</param>
            <param name="keyAttribute">The string that presents name of the attribute that their value will be used a the key of collection of objects</param>
            <param name="converter">The conversion</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToDictionary``2(Newtonsoft.Json.Linq.JObject,System.String,System.Func{System.Collections.Generic.KeyValuePair{System.String,Newtonsoft.Json.Linq.JToken},``1})">
            <summary>
            Creates a dictionary from from this JSON
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="json">The JSON object that presents the serialized data of collection of objects</param>
            <param name="keyAttribute">The string that presents name of the attribute that their value will be used a the key of collection of objects</param>
            <param name="converter">The conversion</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToNameValueCollection(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Converts this dictionary to the name and value collection
            </summary>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToNameValueCollection(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Creates a name-value collection from JSON object
            </summary>
            <param name="json"></param>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToEnums``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a collection of enums from this collection of enum-strings
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enums"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToEnumerable(System.Array)">
            <summary>
            Converts the array to a enumerable collection of objects
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToCollection``1(System.Collections.Generic.HashSet{``0},System.String)">
            <summary>
            Creates a collection from this hash-set
            </summary>
            <typeparam name="T"></typeparam>
            <param name="object">The collection of objects</param>
            <param name="keyAttribute">The string that presents name of the attribute to get value that will be used as key</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToCollection``2(System.Collections.Generic.HashSet{``1},System.String,System.Action{System.Collections.Generic.Collection{``0,``1}})">
            <summary>
            Creates a collection from this hash-set
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="object">The collection of objects</param>
            <param name="keyAttribute">The string that presents name of the attribute to get value that will be used as key</param>
            <param name="onPreCompleted"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToCollection``1(System.Collections.Generic.List{``0},System.String)">
            <summary>
            Creates a collection from this list
            </summary>
            <typeparam name="T"></typeparam>
            <param name="object">The collection of objects</param>
            <param name="keyAttribute">The string that presents name of the attribute to get value that will be used as key</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToCollection``2(System.Collections.Generic.List{``1},System.String,System.Action{System.Collections.Generic.Collection{``0,``1}})">
            <summary>
            Creates a collection from this hash-set
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="object">The collection of objects</param>
            <param name="keyAttribute">The string that presents name of the attribute to get value that will be used as key</param>
            <param name="onPreCompleted"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToCollection``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Creates a collection from this list
            </summary>
            <typeparam name="T"></typeparam>
            <param name="object">The collection of objects</param>
            <param name="keyAttribute">The string that presents name of the attribute to get value that will be used as key</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToCollection``2(System.Collections.Generic.IEnumerable{``1},System.String,System.Action{System.Collections.Generic.Collection{``0,``1}})">
            <summary>
            Creates a collection from this list
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="object">The collection of objects</param>
            <param name="keyAttribute">The string that presents name of the attribute to get value that will be used as key</param>
            <param name="onPreCompleted"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToCollection``2(System.Collections.Generic.Dictionary{``0,``1},System.Action{System.Collections.Generic.Collection{``0,``1}})">
            <summary>
            Creates a collection from this dictionary
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="object">The collection of objects</param>
            <param name="onPreCompleted"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToCollection``2(Newtonsoft.Json.Linq.JArray,System.String,System.Func{Newtonsoft.Json.Linq.JToken,``1})">
            <summary>
            Creates a collection of objects from this JSON
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="json">The JSON object that presents the serialized data of collection of objects</param>
            <param name="keyAttribute">The string that presents name of the attribute that their value will be used a the key of collection of objects</param>
            <param name="converter">The conversion</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToCollection``1(Newtonsoft.Json.Linq.JArray,System.String,System.Func{Newtonsoft.Json.Linq.JToken,``0})">
            <summary>
            Creates a collection of objects from this JSON
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json">The JSON object that presents the serialized data of collection of objects</param>
            <param name="keyAttribute">The string that presents name of the attribute that their value will be used a the key of collection of objects</param>
            <param name="converter">The conversion</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToCollection``2(Newtonsoft.Json.Linq.JObject,System.String,System.Func{Newtonsoft.Json.Linq.JToken,``1})">
            <summary>
            Creates a collection of objects from this JSON
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="json">The JSON object that presents the serialized data of collection of objects</param>
            <param name="keyAttribute">The string that presents name of the attribute that their value will be used a the key of collection of objects</param>
            <param name="converter">The conversion</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToCollection``1(Newtonsoft.Json.Linq.JObject,System.String,System.Func{Newtonsoft.Json.Linq.JToken,``0})">
            <summary>
            Creates a collection of objects from this JSON
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json">The JSON object that presents the serialized data of collection of objects</param>
            <param name="keyAttribute">The string that presents name of the attribute that their value will be used a the key of collection of objects</param>
            <param name="converter">The conversion</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToCollection``1(Newtonsoft.Json.Linq.JObject,System.String,System.Func{System.Collections.Generic.KeyValuePair{System.String,Newtonsoft.Json.Linq.JToken},``0})">
            <summary>
            Creates a collection of objects from this JSON
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json">The JSON object that presents the serialized data of collection of objects</param>
            <param name="keyAttribute">The string that presents name of the attribute that their value will be used a the key of collection of objects</param>
            <param name="converter">The conversion</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToList(System.Collections.Generic.List{System.Object},System.Type)">
            <summary>
            Converts the collection of objects to the generic list of strong-typed objects
            </summary>
            <param name="object"></param>
            <param name="type">The type of elements</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToList``1(System.Collections.Generic.List{System.Object})">
            <summary>
            Converts the collection of objects to the generic list of strong-typed objects
            </summary>
            <typeparam name="T">The strong-typed generic type</typeparam>
            <param name="object"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToHashSet(System.Collections.Generic.List{System.Object},System.Type)">
            <summary>
            Converts the collection of objects to the generic hash-set of strong-typed objects
            </summary>
            <param name="object"></param>
            <param name="type">The type of elements</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToHashSet``1(System.Collections.Generic.List{System.Object})">
            <summary>
            Converts the generic list of objects to the generic hash-set of strong-typed objects
            </summary>
            <typeparam name="T"></typeparam>
            <param name="object"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToDictionary(System.Dynamic.ExpandoObject,System.Type,System.Type)">
            <summary>
            Converts the collection of objects to the generic dictionary of strong-typed objects
            </summary>
            <param name="object"></param>
            <param name="keyType"></param>
            <param name="valueType"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToDictionary``1(System.Dynamic.ExpandoObject)">
            <summary>
            Converts the collection of objects to the generic dictionary of strong-typed objects
            </summary>
            <typeparam name="T"></typeparam>
            <param name="object"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToCollection(System.Dynamic.ExpandoObject,System.Type,System.Type)">
            <summary>
            Converts the collection of objects to the generic collection of strong-typed objects
            </summary>
            <param name="object"></param>
            <param name="keyType"></param>
            <param name="valueType"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToCollection``1(System.Dynamic.ExpandoObject)">
            <summary>
            Converts the collection of objects to the generic collection of strong-typed objects
            </summary>
            <typeparam name="T"></typeparam>
            <param name="object"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToJArray``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,Newtonsoft.Json.Linq.JToken})">
            <summary>
            Creates a JArray object from this collection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="object">The collection of objects</param>
            <param name="converter">The conversion</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToJArray``2(System.Collections.Generic.IDictionary{``0,``1},System.Func{``1,Newtonsoft.Json.Linq.JToken})">
            <summary>
            Creates a JArray object from this collection
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="object">The collection of objects</param>
            <param name="converter">The conversion</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToJArray``2(System.Collections.Generic.IDictionary{``0,``1},System.Func{System.Collections.Generic.KeyValuePair{``0,``1},Newtonsoft.Json.Linq.JToken})">
            <summary>
            Creates a JArray object from this collection
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="object">The collection of objects</param>
            <param name="converter">The conversion</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToJArray(System.Collections.Specialized.Collection,System.Func{System.Object,Newtonsoft.Json.Linq.JToken})">
            <summary>
            Creates a JArray object from this collection
            </summary>
            <param name="object"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToJObject``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{``0,Newtonsoft.Json.Linq.JToken})">
            <summary>
            Creates a JObject object from this collection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="object"></param>
            <param name="keyAttribute">The string that presents name of attribute to use their value as key</param>
            <param name="converter">The conversion</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToJObject``2(System.Collections.Generic.IDictionary{``0,``1},System.Func{``1,Newtonsoft.Json.Linq.JToken})">
            <summary>
            Creates a JObject object from this collection
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="object"></param>
            <param name="converter">The conversion</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToJObject(System.Collections.Specialized.Collection,System.Func{System.Object,Newtonsoft.Json.Linq.JToken})">
            <summary>
            Creates a JObject object from this collection
            </summary>
            <param name="object"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToJObject(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Creates a JObject object from this collection
            </summary>
            <param name="object"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToArraySegment``1(System.Collections.Generic.List{``0},System.Int32,System.Int32)">
            <summary>
            Converts this list to array segment
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToArraySegment``1(``0[],System.Int32,System.Int32)">
            <summary>
            Converts this array to array segment
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToArraySegment(System.String,System.Text.Encoding)">
            <summary>
            Converts this string to array segment of bytes
            </summary>
            <param name="string"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToArraySegment(System.Boolean)">
            <summary>
            Converts this boolean to array segment of bytes
            </summary>
            <param name="bool"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToArraySegment(System.Char)">
            <summary>
            Converts this char to array segment of bytes
            </summary>
            <param name="char"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToArraySegment(System.Byte)">
            <summary>
            Converts this byte to array segment of bytes
            </summary>
            <param name="byte"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToArraySegment(System.SByte)">
            <summary>
            Converts this sbyte to array segment of bytes
            </summary>
            <param name="sbyte"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToArraySegment(System.Int16)">
            <summary>
            Converts this short to array segment of bytes
            </summary>
            <param name="short"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToArraySegment(System.UInt16)">
            <summary>
            Converts this ushort to array segment of bytes
            </summary>
            <param name="ushort"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToArraySegment(System.Int32)">
            <summary>
            Converts this int to array segment of bytes
            </summary>
            <param name="int"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToArraySegment(System.UInt32)">
            <summary>
            Converts this uint to array segment of bytes
            </summary>
            <param name="uint"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToArraySegment(System.Int64)">
            <summary>
            Converts this long to array segment of bytes
            </summary>
            <param name="long"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToArraySegment(System.UInt64)">
            <summary>
            Converts this ulong to array segment of bytes
            </summary>
            <param name="ulong"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToArraySegment(System.Single)">
            <summary>
            Converts this float to array segment of bytes
            </summary>
            <param name="float"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToArraySegment(System.Double)">
            <summary>
            Converts this double to array segment of bytes
            </summary>
            <param name="double"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToArraySegment(System.Decimal)">
            <summary>
            Converts this decimal to array segment of bytes
            </summary>
            <param name="decimal"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToArraySegment(System.DateTime)">
            <summary>
            Converts this date-time to array segment of bytes
            </summary>
            <param name="datetime"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CollectionService.ToArraySegment(System.Numerics.BigInteger)">
            <summary>
            Converts this big-integer to array segment of bytes
            </summary>
            <param name="bigInt"></param>
            <returns></returns>
        </member>
        <member name="T:net.vieapps.Components.Utility.CryptoService">
            <summary>
            Static servicing methods for working with cryptography
            </summary>
        </member>
        <member name="F:net.vieapps.Components.Utility.CryptoService.DEFAULT_PASS_PHRASE">
            <summary>
            The default passphrase for generating a key
            </summary>
        </member>
        <member name="P:net.vieapps.Components.Utility.CryptoService.DEFAULT_ENCRYPTION_KEY">
            <summary>
            The default key (256 bits - hash key from DEFAULT_PASS_PHRASE) for encrypting/decrypting with AES
            </summary>
        </member>
        <member name="P:net.vieapps.Components.Utility.CryptoService.DEFAULT_ENCRYPTION_IV">
            <summary>
            The default initialization vector (128 bits - hash key from DEFAULT_PASS_PHRASE) for encrypting/decrypting with AES
            </summary>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GenerateRandomKey(System.Int32)">
            <summary>
            Generates a random key with cryptographically strong sequence of random values
            </summary>
            <param name="length">The byte-length of the key (means number of total bytes :: 256 bytes = 2048 bits)</param>
            <returns>An array of bytes that presents the key</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GenerateHashKey(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Generates a key using hash from this array of bytes
            </summary>
            <param name="bytes">The array of bytes to generate key from</param>
            <param name="length">The bit-length of the key (means number of total bits :: 256 bits = 32 bytes)</param>
            <param name="doubleHash">Set to true to use double-hash</param>
            <returns>An array of bytes that presents the key</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GenerateHashKey(System.String,System.Int32,System.Boolean)">
            <summary>
            Generates a key using hash from this passphrase
            </summary>
            <param name="passphrase">The passphrase to generate key from</param>
            <param name="length">The bit-length of the key (means number of total bits :: 256 bits = 32 bytes)</param>
            <param name="doubleHash">Set to true to use double-hash</param>
            <returns>An array of bytes that presents the key</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GenerateHashPassword(System.String,System.String,System.String)">
            <summary>
            Generates a hashing password from a plain-text password with salt and pepper using strong hashing algorithm (Argon2)
            </summary>
            <param name="password">The string that presents the plain-text password for hashing</param>
            <param name="salt">The string that presents the salt for hashing</param>
            <param name="pepper">The string that presents the pepper for hashing</param>
            <returns>The string that presents the 125 bytes of hashing password</returns>
        </member>
        <member name="P:net.vieapps.Components.Utility.CryptoService.HashAlgorithmFactories">
            <summary>
            Gets the factories of hash algorithm
            </summary>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetHashAlgorithm(System.String)">
            <summary>
            Gets a hash algorithm
            </summary>
            <param name="hashAlgorithm">Name of a hash algorithm (md5, sha1, sha256, sha384, sha512, ripemd/ripemd160, blake128, blake/blake256, blake384, blake512)</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetHasher(System.String)">
            <summary>
            Gets a hash algorithm
            </summary>
            <param name="hashAlgorithm">Name of a hash algorithm (md5, sha1, sha256, sha384, sha512, ripemd/ripemd160, blake128, blake/blake256, blake384, blake512)</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetHash(System.Byte[],System.String)">
            <summary>
            Gets hash of this array of bytes
            </summary>
            <param name="bytes"></param>
            <param name="hashAlgorithm">Name of a hash algorithm (md5, sha1, sha256, sha384, sha512, ripemd/ripemd160, blake128, blake/blake256, blake384, blake512)</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetHash(System.String,System.String)">
            <summary>
            Gets hash of this string
            </summary>
            <param name="string"></param>
            <param name="hashAlgorithm">Name of a hash algorithm (md5, sha1, sha256, sha384, sha512, ripemd/ripemd160, blake128, blake/blake256, blake384, blake512)</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetMD5Hash(System.String)">
            <summary>
            Gets MD5 hash of this string
            </summary>
            <param name="string"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetMD5(System.String,System.Boolean)">
            <summary>
            Gets MD5 hash of this string
            </summary>
            <param name="string"></param>
            <param name="toHex"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetSHAHash(System.String)">
            <summary>
            Gets SHA hash of this string (256 bits)
            </summary>
            <param name="string"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetSHA(System.String,System.Boolean)">
            <summary>
            Gets SHA hash of this string (256 bits)
            </summary>
            <param name="string"></param>
            <param name="toHex"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetSHA1Hash(System.String)">
            <summary>
            Gets SHA hash of this string (160 bits)
            </summary>
            <param name="string"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetSHA1(System.String,System.Boolean)">
            <summary>
            Gets SHA hash of this string (160 bits)
            </summary>
            <param name="string"></param>
            <param name="toHex"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetSHA256Hash(System.String)">
            <summary>
            Gets SHA hash of this string (256 bits)
            </summary>
            <param name="string"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetSHA256(System.String,System.Boolean)">
            <summary>
            Gets SHA hash of this string (256 bits)
            </summary>
            <param name="string"></param>
            <param name="toHex"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetSHA384Hash(System.String)">
            <summary>
            Gets SHA hash of this string (384 bits)
            </summary>
            <param name="string"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetSHA384(System.String,System.Boolean)">
            <summary>
            Gets SHA hash of this string (384 bits)
            </summary>
            <param name="string"></param>
            <param name="toHex"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetSHA512Hash(System.String)">
            <summary>
            Gets SHA hash of this string (512 bits)
            </summary>
            <param name="string"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetSHA512(System.String,System.Boolean)">
            <summary>
            Gets SHA hash of this string (512 bits)
            </summary>
            <param name="string"></param>
            <param name="toHex"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetBLAKEHash(System.String)">
            <summary>
            Gets BLAKE2 hash of this string (256 bits)
            </summary>
            <param name="string"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetBLAKE(System.String,System.Boolean)">
            <summary>
            Gets BLAKE2 hash of this string (256 bits)
            </summary>
            <param name="string"></param>
            <param name="toHex"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetBLAKE128Hash(System.String)">
            <summary>
            Gets BLAKE2 hash of this string (128 bits)
            </summary>
            <param name="string"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetBLAKE128(System.String,System.Boolean)">
            <summary>
            Gets BLAKE2 hash of this string (128 bits)
            </summary>
            <param name="string"></param>
            <param name="toHex"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetBLAKE256Hash(System.String)">
            <summary>
            Gets BLAKE2 hash of this string (256 bits)
            </summary>
            <param name="string"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetBLAKE256(System.String,System.Boolean)">
            <summary>
            Gets BLAKE2 hash of this string (256 bits)
            </summary>
            <param name="string"></param>
            <param name="toHex"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetBLAKE384Hash(System.String)">
            <summary>
            Gets BLAKE2 hash of this string (384 bits)
            </summary>
            <param name="string"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetBLAKE384(System.String,System.Boolean)">
            <summary>
            Gets BLAKE2 hash of this string (384 bits)
            </summary>
            <param name="string"></param>
            <param name="toHex"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetBLAKE512Hash(System.String)">
            <summary>
            Gets BLAKE2 hash of this string (512 bits)
            </summary>
            <param name="string"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetBLAKE512(System.String,System.Boolean)">
            <summary>
            Gets BLAKE2 hash of this string (512 bits)
            </summary>
            <param name="string"></param>
            <param name="toHex"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetRIPEMD160Hash(System.String)">
            <summary>
            Gets RIPEMD160 hash of this string (160 bits)
            </summary>
            <param name="string"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetRIPEMD160(System.String,System.Boolean)">
            <summary>
            Gets RIPEMD160 hash of this string (160 bits)
            </summary>
            <param name="string"></param>
            <param name="toHex"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetDoubleHash(System.Byte[],System.String,System.String)">
            <summary>
            Gets the double-hash of this array of bytes
            </summary>
            <param name="bytes"></param>
            <param name="firstAlgorithm">Name of the first hash algorithm (md5, sha1, sha256, sha384, sha512, ripemd/ripemd160, blake128, blake/blake256, blake384, blake512)</param>
            <param name="secondAlgorithm">Name of the second hash algorithm (md5, sha1, sha256, sha384, sha512, ripemd/ripemd160, blake128, blake/blake256, blake384, blake512)</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetDoubleHash(System.String,System.String,System.String)">
            <summary>
            Gets the double-hash of this string
            </summary>
            <param name="string"></param>
            <param name="firstAlgorithm">Name of the first hash algorithm (md5, sha1, sha256, sha384, sha512, ripemd/ripemd160, blake128, blake/blake256, blake384, blake512)</param>
            <param name="secondAlgorithm">Name of the second hash algorithm (md5, sha1, sha256, sha384, sha512, ripemd/ripemd160, blake128, blake/blake256, blake384, blake512)</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetHash160(System.Byte[])">
            <summary>
            Gets the double-hash of this array of bytes with first hash is SHA256, second hash is RIPEMD160
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetHash160(System.String)">
            <summary>
            Gets the double-hash of this string with first hash is SHA256, second hash is RIPEMD160
            </summary>
            <param name="string"></param>
            <returns></returns>
        </member>
        <member name="P:net.vieapps.Components.Utility.CryptoService.HmacHashAlgorithmFactories">
            <summary>
            Gets the factories of hash algorithm
            </summary>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetHMACHashAlgorithm(System.Byte[],System.String)">
            <summary>
            Gets a HMAC hashser
            </summary>
            <param name="key"></param>
            <param name="hashAlgorithm">Name of a hash algorithm (md5, sha1, sha256, sha384, sha512, ripemd/ripemd160, blake128, blake/blake256, blake384, blake512)</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetHMACHasher(System.Byte[],System.String)">
            <summary>
            Gets a HMAC hashser
            </summary>
            <param name="key"></param>
            <param name="hashAlgorithm">Name of a hash algorithm (md5, sha1, sha256, sha384, sha512, ripemd/ripemd160, blake128, blake/blake256, blake384, blake512)</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetHMACHash(System.Byte[],System.Byte[],System.String)">
            <summary>
            Gets HMAC of this array of bytes
            </summary>
            <param name="bytes"></param>
            <param name="key">Keys for hashing (means salt)</param>
            <param name="hashAlgorithm">Name of a hash algorithm (md5, sha1, sha256, sha384, sha512, ripemd/ripemd160, blake128, blake/blake256, blake384, blake512)</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetHMACHash(System.String,System.Byte[],System.String)">
            <summary>
            Gets HMAC of this string
            </summary>
            <param name="string"></param>
            <param name="key">Keys for hashing (means salt)</param>
            <param name="hashAlgorithm">Name of a hash algorithm (md5, sha1, sha256, sha384, sha512, ripemd/ripemd160, blake128, blake/blake256, blake384, blake512)</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetHMACHash(System.String,System.String,System.String)">
            <summary>
            Gets HMAC of this string
            </summary>
            <param name="string"></param>
            <param name="key">Keys for hashing (means salt)</param>
            <param name="hashAlgorithm">Name of a hash algorithm (md5, sha1, sha256, sha384, sha512, ripemd/ripemd160, blake128, blake/blake256, blake384, blake512)</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetHMAC(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Gets HMAC of this string
            </summary>
            <param name="string"></param>
            <param name="key">Keys for hashing (means salt)</param>
            <param name="hashAlgorithm">Name of a hash algorithm (md5, sha1, sha256, sha384, sha512, ripemd/ripemd160, blake128, blake/blake256, blake384, blake512)</param>
            <param name="toHex">true to get hexa-string, otherwise get base64-string</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetHMACMD5Hash(System.String,System.String)">
            <summary>
            Gets MD5 HMAC of this string
            </summary>
            <param name="string"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetHMACMD5(System.String,System.String,System.Boolean)">
            <summary>
            Gets MD5 HMAC of this string
            </summary>
            <param name="string"></param>
            <param name="key"></param>
            <param name="toHex"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetHMACMD5(System.String,System.Boolean)">
            <summary>
            Gets MD5 HMAC of this string
            </summary>
            <param name="string"></param>
            <param name="toHex"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetHMACSHAHash(System.String,System.String)">
            <summary>
            Gets SHA HMAC of this string (256 bits)
            </summary>
            <param name="string"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetHMACSHA(System.String,System.String,System.Boolean)">
            <summary>
            Gets SHA HMAC of this string (256 bits)
            </summary>
            <param name="string"></param>
            <param name="key"></param>
            <param name="toHex"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetHMACSHA(System.String,System.Boolean)">
            <summary>
            Gets SHA HMAC of this string (256 bits)
            </summary>
            <param name="string"></param>
            <param name="toHexa"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetHMACSHA1Hash(System.String,System.String)">
            <summary>
            Gets SHA HMAC of this string (160 bits)
            </summary>
            <param name="string"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetHMACSHA1(System.String,System.String,System.Boolean)">
            <summary>
            Gets SHA HMAC of this string (160 bits)
            </summary>
            <param name="string"></param>
            <param name="key"></param>
            <param name="toHex"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetHMACSHA1(System.String,System.Boolean)">
            <summary>
            Gets SHA HMAC of this string (160 bits)
            </summary>
            <param name="string"></param>
            <param name="toHexa"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetHMACSHA256Hash(System.String,System.String)">
            <summary>
            Gets SHA HMAC of this string (256 bits)
            </summary>
            <param name="string"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetHMACSHA256(System.String,System.String,System.Boolean)">
            <summary>
            Gets SHA HMAC of this string (256 bits)
            </summary>
            <param name="string"></param>
            <param name="key"></param>
            <param name="toHex"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetHMACSHA256(System.String,System.Boolean)">
            <summary>
            Gets SHA HMAC of this string (256 bits)
            </summary>
            <param name="string"></param>
            <param name="toHex"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetHMACSHA384Hash(System.String,System.String)">
            <summary>
            Gets SHA HMAC of this string (384 bits)
            </summary>
            <param name="string"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetHMACSHA384(System.String,System.String,System.Boolean)">
            <summary>
            Gets SHA HMAC of this string (384 bits)
            </summary>
            <param name="string"></param>
            <param name="key"></param>
            <param name="toHex"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetHMACSHA384(System.String,System.Boolean)">
            <summary>
            Gets SHA HMAC of this string (384 bits)
            </summary>
            <param name="string"></param>
            <param name="toHex"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetHMACSHA512Hash(System.String,System.String)">
            <summary>
            Gets SHA HMAC of this string (512 bits)
            </summary>
            <param name="string"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetHMACSHA512(System.String,System.String,System.Boolean)">
            <summary>
            Gets SHA HMAC of this string (512 bits)
            </summary>
            <param name="string"></param>
            <param name="key"></param>
            <param name="toHex"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetHMACSHA512(System.String,System.Boolean)">
            <summary>
            Gets SHA HMAC of this string (512 bits)
            </summary>
            <param name="string"></param>
            <param name="toHex"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetHMACBLAKEHash(System.String,System.String)">
            <summary>
            Gets BLAKE2 HMAC of this string (256 bits)
            </summary>
            <param name="string"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetHMACBLAKE(System.String,System.String,System.Boolean)">
            <summary>
            Gets BLAKE2 HMAC of this string (256 bits)
            </summary>
            <param name="string"></param>
            <param name="key"></param>
            <param name="toHex"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetHMACBLAKE(System.String,System.Boolean)">
            <summary>
            Gets BLAKE2 HMAC of this string (256 bits)
            </summary>
            <param name="string"></param>
            <param name="toHex"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetHMACBLAKE128Hash(System.String,System.String)">
            <summary>
            Gets BLAKE2 HMAC of this string (128 bits)
            </summary>
            <param name="string"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetHMACBLAKE128(System.String,System.String,System.Boolean)">
            <summary>
            Gets BLAKE2 HMAC of this string (128 bits)
            </summary>
            <param name="string"></param>
            <param name="key"></param>
            <param name="toHex"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetHMACBLAKE128(System.String,System.Boolean)">
            <summary>
            Gets BLAKE2 HMAC of this string (128 bits)
            </summary>
            <param name="string"></param>
            <param name="toHexa"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetHMACBLAKE256Hash(System.String,System.String)">
            <summary>
            Gets BLAKE2 HMAC of this string (256 bits)
            </summary>
            <param name="string"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetHMACBLAKE256(System.String,System.String,System.Boolean)">
            <summary>
            Gets BLAKE2 HMAC of this string (256 bits)
            </summary>
            <param name="string"></param>
            <param name="key"></param>
            <param name="toHex"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetHMACBLAKE256(System.String,System.Boolean)">
            <summary>
            Gets BLAKE2 HMAC of this string (256 bits)
            </summary>
            <param name="string"></param>
            <param name="toHex"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetHMACBLAKE384Hash(System.String,System.String)">
            <summary>
            Gets BLAKE2 HMAC of this string (384 bits)
            </summary>
            <param name="string"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetHMACBLAKE384(System.String,System.String,System.Boolean)">
            <summary>
            Gets BLAKE2 HMAC of this string (384 bits)
            </summary>
            <param name="string"></param>
            <param name="key"></param>
            <param name="toHex"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetHMACBLAKE384(System.String,System.Boolean)">
            <summary>
            Gets BLAKE2 HMAC of this string (384 bits)
            </summary>
            <param name="string"></param>
            <param name="toHex"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetHMACBLAKE512Hash(System.String,System.String)">
            <summary>
            Gets BLAKE2 HMAC of this string (512 bits)
            </summary>
            <param name="string"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetHMACBLAKE512(System.String,System.String,System.Boolean)">
            <summary>
            Gets BLAKE2 HMAC of this string (512 bits)
            </summary>
            <param name="string"></param>
            <param name="key"></param>
            <param name="toHex"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetHMACBLAKE512(System.String,System.Boolean)">
            <summary>
            Gets BLAKE2 HMAC of this string (512 bits)
            </summary>
            <param name="string"></param>
            <param name="toHex"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetHMACRIPEMD160Hash(System.String,System.String)">
            <summary>
            Gets RIPEMD HMAC of this string (160 bits)
            </summary>
            <param name="string"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetHMACRIPEMD160(System.String,System.String,System.Boolean)">
            <summary>
            Gets RIPEMD HMAC of this string (160 bits)
            </summary>
            <param name="string"></param>
            <param name="key"></param>
            <param name="toHex"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetHMACRIPEMD160(System.String,System.Boolean)">
            <summary>
            Gets RIPEMD HMAC of this string (160 bits)
            </summary>
            <param name="string"></param>
            <param name="toHex"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetCheckSum(System.Byte[],System.String,System.Int32)">
            <summary>
            Gets the check-sum of this array of bytes using double-hash
            </summary>
            <param name="bytes"></param>
            <param name="hashAlgorithm">Name of a hash algorithm (md5, sha1, sha256, sha384, sha512, ripemd/ripemd160, blake128, blake/blake256, blake384, blake512)</param>
            <param name="length">Length of the check-sum</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetCheckSum(System.String,System.String,System.Int32)">
            <summary>
            Gets the check-sum of this string using double-hash
            </summary>
            <param name="string"></param>
            <param name="hashAlgorithm">Name of a hash algorithm (md5, sha1, sha256, sha384, sha512, ripemd/ripemd160, blake128, blake/blake256, blake384, blake512)</param>
            <param name="length">Length of the check-sum</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GetCheckSum(System.IO.FileInfo,System.String)">
            <summary>
            Gets the check-sum of this file
            </summary>
            <param name="fileInfo"></param>
            <param name="hashAlgorithm">Name of a hash algorithm (md5, sha1, sha256, sha384, sha512, ripemd/ripemd160, blake128, blake/blake256, blake384, blake512)</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.Encrypt(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Encrypts by specific key and initialization vector using AES
            </summary>
            <param name="data"></param>
            <param name="key"></param>
            <param name="iv"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.Encrypt(System.String,System.Byte[],System.Byte[],System.Boolean)">
            <summary>
            Encrypts this string by specific key and initialization vector using AES
            </summary>
            <param name="string"></param>
            <param name="key"></param>
            <param name="iv"></param>
            <param name="toHex"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.Encrypt(System.String,System.String,System.Boolean)">
            <summary>
            Encrypts this string by specific pass-phrase using AES
            </summary>
            <param name="string"></param>
            <param name="passPhrase"></param>
            <param name="toHex"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.Decrypt(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Decrypts by specific key and initialization vector using AES
            </summary>
            <param name="data"></param>
            <param name="key"></param>
            <param name="iv"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.Decrypt(System.String,System.Byte[],System.Byte[],System.Boolean)">
            <summary>
            Decrypts this encrypted string by specific key and initialization vector using AES
            </summary>
            <param name="string"></param>
            <param name="key"></param>
            <param name="iv"></param>
            <param name="isHex"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.Decrypt(System.String,System.String,System.Boolean)">
            <summary>
            Decrypts this encrypted string by specific pass-phrase using AES
            </summary>
            <param name="string"></param>
            <param name="passPhrase"></param>
            <param name="isHex"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.Encrypt(System.Security.Cryptography.RSA,System.Byte[])">
            <summary>
            Encrypts the data by RSA
            </summary>
            <param name="rsa"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.Encrypt(System.Security.Cryptography.RSA,System.String,System.Boolean)">
            <summary>
            Encrypts the data by RSA
            </summary>
            <param name="rsa"></param>
            <param name="data"></param>
            <param name="toHex"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.Decrypt(System.Security.Cryptography.RSA,System.Byte[])">
            <summary>
            Decrypts the data by RSA
            </summary>
            <param name="rsa"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.Decrypt(System.Security.Cryptography.RSA,System.String,System.Boolean)">
            <summary>
            Decrypts the data by RSA
            </summary>
            <param name="rsa"></param>
            <param name="data"></param>
            <param name="isHex"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.Sign(System.Security.Cryptography.RSA,System.Byte[])">
            <summary>
            Signs hash data using RSA
            </summary>
            <param name="rsa"></param>
            <param name="hash">The hashed-data to sign</param>
            <remarks>The RSA instance must contains private parameters (private key) to sign</remarks>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.Sign(System.Security.Cryptography.RSA,System.String,System.Boolean)">
            <summary>
            Signs hash data using RSA
            </summary>
            <param name="rsa"></param>
            <param name="hash">The hashed-data to sign</param>
            <param name="isHex">true to specify that hash-data is hexa string, else for base64 string</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.Verify(System.Security.Cryptography.RSA,System.Byte[],System.Byte[])">
            <summary>
            Verifys the signature of hash using RSA
            </summary>
            <param name="rsa"></param>
            <param name="hash">The hashed-data to verify with signature</param>
            <param name="signature">The signature to verify</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.Verify(System.Security.Cryptography.RSA,System.String,System.String,System.Boolean)">
            <summary>
            Verifys the signature of hash using RSA
            </summary>
            <param name="rsa"></param>
            <param name="hash">The hashed-data to verify with signature</param>
            <param name="signature">The signature to verify</param>
            <param name="isHex">true to specify that hash and signature are hexa string, else for base64 string</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.Encrypt(net.vieapps.Components.Utility.ECCsecp256k1.Point,System.Byte[])">
            <summary>
            Encrypts the data using Elliptic Curve Cryptography (follow Secp256k1 specs - Bitcoin)
            </summary>
            <param name="key">The public key used to encrypt data</param>
            <param name="data">The data to encrypt</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.Encrypt(net.vieapps.Components.Utility.ECCsecp256k1.Point,System.String,System.Boolean)">
            <summary>
            Encrypts the data using Elliptic Curve Cryptography (follow Secp256k1 specs - Bitcoin)
            </summary>
            <param name="key">The public key used to encrypt data</param>
            <param name="data">The data to encrypt</param>
            <param name="toHex">true to get hexa string, false to get base64 string</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.Decrypt(System.Numerics.BigInteger,System.Byte[])">
            <summary>
            Decrypts the data using Elliptic Curve Cryptography (follow Secp256k1 specs - Bitcoin)
            </summary>
            <param name="key">The private key used to decrypt</param>
            <param name="data">The data the decrypt</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.Decrypt(System.Numerics.BigInteger,System.String,System.Boolean)">
            <summary>
            Decrypts the data using Elliptic Curve Cryptography (follow Secp256k1 specs - Bitcoin)
            </summary>
            <param name="key">The private key used to decrypt</param>
            <param name="data">The data the decrypt</param>
            <param name="isHex">true to specify that data is hexa string, else for base64 string</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.Sign(System.Numerics.BigInteger,System.Byte[])">
            <summary>
            Signs hash data using Elliptic Curve Cryptography (follow Secp256k1 specs - Bitcoin)
            </summary>
            <param name="key">The private key used to to sign</param>
            <param name="hash">The hashed-data to sign</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.Sign(System.Numerics.BigInteger,System.String,System.Boolean)">
            <summary>
            Signs hash data using Elliptic Curve Cryptography (follow Secp256k1 specs - Bitcoin)
            </summary>
            <param name="key">The private key used to to sign</param>
            <param name="hash">The hashed-data to sign</param>
            <param name="isHex">true to specify that hashed-data is hexa string, false is base64 string</param>
            <returns>The hexa string that presents the signature</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.Verify(net.vieapps.Components.Utility.ECCsecp256k1.Point,System.Byte[],System.Numerics.BigInteger[])">
            <summary>
            Verifys the signature of hash using Elliptic Curve Cryptography (follow Secp256k1 specs - Bitcoin)
            </summary>
            <param name="key">The public key used to verify</param>
            <param name="hash">The hashed-data to veriry with signature</param>
            <param name="signature">The signature to verify</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.Verify(net.vieapps.Components.Utility.ECCsecp256k1.Point,System.Byte[],System.String)">
            <summary>
            Verifys the signature of hash using Elliptic Curve Cryptography (follow Secp256k1 specs - Bitcoin)
            </summary>
            <param name="key">The public key used to verify</param>
            <param name="hash">The hashed-data to veriry with signature</param>
            <param name="signature">The signature to verify</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.CreateRSA(System.String)">
            <summary>
            Creates an instance of RSA Algorithm
            </summary>
            <param name="key">Key for the RSA instance, must be formated in JSON or PEM</param>
            <returns>An instance of RSA</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.CreateRSAInstance(System.String)">
            <summary>
            Creates an instance of RSA Algorithm
            </summary>
            <param name="key">Key for the RSA instance, must be formated in JSON or PEM</param>
            <returns>An instance of RSA</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.ExportJsonParameters(System.Security.Cryptography.RSA,System.Boolean)">
            <summary>
            Exports the parameters of this RSA instance to string with JSON format
            </summary>
            <param name="rsa"></param>
            <param name="includePrivateParameters">true to export private parameters (private key)</param>
            <returns>The JSON string that presents exported parameters</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.ImportJsonParameters(System.Security.Cryptography.RSA,System.String)">
            <summary>
            Imports the  parameters of RSA from JSON s
            </summary>
            <param name="rsa"></param>
            <param name="jsonParameters">The JSON string that presents exported parameters</param>
            <returns>The RSA instance with imported parameters</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.ExportPemParameters(System.Security.Cryptography.RSA,System.Boolean)">
            <summary>
            Exports the parameters of this RSA instance to string with PEM format
            </summary>
            <param name="rsa"></param>
            <param name="includePrivateParameters">true to export private parameters (private key)</param>
            <returns>The JSON string that presents exported parameters</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.ExportPemPrivateParameters(System.Security.Cryptography.RSA)">
            <summary>
            Exports the private key of RSA to PEM format
            </summary>
            <param name="rsa">Object to export</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.ExportPemPublicParameters(System.Security.Cryptography.RSA)">
            <summary>
            Exports the public key of RSA to PEM format
            </summary>
            <param name="rsa">Object to export</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.ImportPemParameters(System.Security.Cryptography.RSA,System.String)">
            <summary>
            Imports the  parameters of RSA from JSON s
            </summary>
            <param name="rsa"></param>
            <param name="pemParameters">The PEM string that presents exported parameters</param>
            <returns>The RSA instance with imported parameters</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GenerateECCPrivateKey(System.Int32)">
            <summary>
            Generates a random private key of Elliptic Curve Cryptography that follow secp256k1 specs (Bitcoin)
            </summary>
            <param name="length">The byte-length of the key (means number of total bytes :: 256 bytes = 2048 bits)</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GenerateECCPublicKey(System.Numerics.BigInteger)">
            <summary>
            Generates the public key of Elliptic Curve Cryptography that follow secp256k1 specs (Bitcoin)
            </summary>
            <param name="key">The private key used to generate public key</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.CryptoService.GenerateECCKeyPair(System.Int32)">
            <summary>
            Generates key-pair of Elliptic Curve Cryptography that follow secp256k1 specs (Bitcoin)
            </summary>
            <param name="length">The byte-length of the key (means number of total bytes :: 256 bytes = 2048 bits)</param>
            <returns></returns>
        </member>
        <member name="P:net.vieapps.Components.Utility.IRIPEMD160HashProvider.HashSize">
            <summary>
            Gets the size, in bits, of the computed hash code.
            </summary>
            <returns>
            The size, in bits, of the computed hash code.
            </returns>
        </member>
        <member name="P:net.vieapps.Components.Utility.IRIPEMD160HashProvider.InputBlockSize">
            <summary>
            Gets the input block size.
            </summary>
            <returns>
            The input block size.
            </returns>
        </member>
        <member name="P:net.vieapps.Components.Utility.IRIPEMD160HashProvider.OutputBlockSize">
            <summary>
            Gets the output block size.
            </summary>
            <returns>
            The output block size.
            </returns>
        </member>
        <member name="P:net.vieapps.Components.Utility.IRIPEMD160HashProvider.Hash">
            <summary>
            Gets the value of the computed hash code.
            </summary>
            <value>
            The current value of the computed hash code.
            </value>
            <exception cref="T:System.ObjectDisposedException">The object has already been disposed.</exception>
        </member>
        <member name="M:net.vieapps.Components.Utility.IRIPEMD160HashProvider.Reset">
            <summary>
            Resets an implementation of the <see cref="T:net.vieapps.Components.Utility.IRIPEMD160HashProvider"/> to its initial state.
            </summary>
        </member>
        <member name="M:net.vieapps.Components.Utility.IRIPEMD160HashProvider.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Routes data written to the object into the hash algorithm for computing the hash.
            </summary>
            <param name="array">The input to compute the hash code for.</param>
            <param name="ibStart">The offset into the byte array from which to begin using data.</param>
            <param name="cbSize">The number of bytes in the byte array to use as data.</param>
        </member>
        <member name="M:net.vieapps.Components.Utility.IRIPEMD160HashProvider.HashFinal">
            <summary>
            Finalizes the hash computation after the last data is processed by the cryptographic stream object.
            </summary>
            <returns>
            The computed hash code.
            </returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.IRIPEMD160HashProvider.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Computes the hash value for the specified region of the input byte array and copies the specified
            region of the input byte array to the specified region of the output byte array.
            </summary>
            <param name="inputBuffer">The input to compute the hash code for.</param>
            <param name="inputOffset">The offset into the input byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
            <param name="outputBuffer">A copy of the part of the input array used to compute the hash code.</param>
            <param name="outputOffset">The offset into the output byte array from which to begin writing data.</param>
            <returns>
            The number of bytes written.
            </returns>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="inputCount"/> uses an invalid value.</para>
            <para>-or-</para>
            <para><paramref name="inputBuffer"/> has an invalid length.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="inputBuffer"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="inputOffset"/> is out of range. This parameter requires a non-negative number.</exception>
            <exception cref="T:System.ObjectDisposedException">The object has already been disposed.</exception>
        </member>
        <member name="M:net.vieapps.Components.Utility.IRIPEMD160HashProvider.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Computes the hash value for the specified region of the specified byte array.
            </summary>
            <param name="inputBuffer">The input to compute the hash code for.</param>
            <param name="inputOffset">The offset into the byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the byte array to use as data.</param>
            <returns>
            An array that is a copy of the part of the input that is hashed.
            </returns>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="inputCount"/> uses an invalid value.</para>
            <para>-or-</para>
            <para><paramref name="inputBuffer"/> has an invalid length.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="inputBuffer"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="inputOffset"/> is out of range. This parameter requires a non-negative number.</exception>
            <exception cref="T:System.ObjectDisposedException">The object has already been disposed.</exception>
        </member>
        <member name="M:net.vieapps.Components.Utility.IRIPEMD160HashProvider.ComputeHash(System.Byte[])">
            <summary>
            Computes the hash value for the input data.
            </summary>
            <param name="buffer">The input to compute the hash code for.</param>
            <returns>
            The computed hash code.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <c>null</c>.</exception>
            <exception cref="T:System.ObjectDisposedException">The object has already been disposed.</exception>
        </member>
        <member name="P:net.vieapps.Components.Utility.RIPEMD160HashProviderBase.Hash">
            <summary>
            Gets the value of the computed hash code.
            </summary>
            <value>
            The current value of the computed hash code.
            </value>
            <exception cref="T:System.ObjectDisposedException">The object has already been disposed.</exception>
        </member>
        <member name="M:net.vieapps.Components.Utility.RIPEMD160HashProviderBase.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Computes the hash value for the specified region of the input byte array and copies the specified
            region of the input byte array to the specified region of the output byte array.
            </summary>
            <param name="inputBuffer">The input to compute the hash code for.</param>
            <param name="inputOffset">The offset into the input byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
            <param name="outputBuffer">A copy of the part of the input array used to compute the hash code.</param>
            <param name="outputOffset">The offset into the output byte array from which to begin writing data.</param>
            <returns>
            The number of bytes written.
            </returns>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="inputCount"/> uses an invalid value.</para>
            <para>-or-</para>
            <para><paramref name="inputBuffer"/> has an invalid length.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="inputBuffer"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="inputOffset"/> is out of range. This parameter requires a non-negative number.</exception>
            <exception cref="T:System.ObjectDisposedException">The object has already been disposed.</exception>
        </member>
        <member name="M:net.vieapps.Components.Utility.RIPEMD160HashProviderBase.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Computes the hash value for the specified region of the specified byte array.
            </summary>
            <param name="inputBuffer">The input to compute the hash code for.</param>
            <param name="inputOffset">The offset into the byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the byte array to use as data.</param>
            <returns>
            An array that is a copy of the part of the input that is hashed.
            </returns>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="inputCount"/> uses an invalid value.</para>
            <para>-or-</para>
            <para><paramref name="inputBuffer"/> has an invalid length.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="inputBuffer"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="inputOffset"/> is out of range. This parameter requires a non-negative number.</exception>
            <exception cref="T:System.ObjectDisposedException">The object has already been disposed.</exception>
        </member>
        <member name="M:net.vieapps.Components.Utility.RIPEMD160HashProviderBase.ComputeHash(System.Byte[])">
            <summary>
            Computes the hash value for the input data.
            </summary>
            <param name="buffer">The input to compute the hash code for.</param>
            <returns>
            The computed hash code.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <c>null</c>.</exception>
            <exception cref="T:System.ObjectDisposedException">The object has already been disposed.</exception>
        </member>
        <member name="M:net.vieapps.Components.Utility.RIPEMD160HashProviderBase.Dispose">
            <summary>
            Releases all resources used by the current instance of the <see cref="T:net.vieapps.Components.Utility.RIPEMD160HashProviderBase"/> class.
            </summary>
        </member>
        <member name="M:net.vieapps.Components.Utility.RIPEMD160HashProviderBase.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:net.vieapps.Components.Utility.RIPEMD160HashProviderBase"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:net.vieapps.Components.Utility.RIPEMD160HashProviderBase.HashSize">
            <summary>
            Gets the size, in bits, of the computed hash code.
            </summary>
            <returns>
            The size, in bits, of the computed hash code.
            </returns>
        </member>
        <member name="P:net.vieapps.Components.Utility.RIPEMD160HashProviderBase.InputBlockSize">
            <summary>
            Gets the input block size.
            </summary>
            <returns>
            The input block size.
            </returns>
        </member>
        <member name="P:net.vieapps.Components.Utility.RIPEMD160HashProviderBase.OutputBlockSize">
            <summary>
            Gets the output block size.
            </summary>
            <returns>
            The output block size.
            </returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.RIPEMD160HashProviderBase.Reset">
            <summary>
            Resets an implementation of <see cref="T:net.vieapps.Components.Utility.RIPEMD160HashProviderBase"/> to its initial state.
            </summary>
        </member>
        <member name="M:net.vieapps.Components.Utility.RIPEMD160HashProviderBase.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Routes data written to the object into the hash algorithm for computing the hash.
            </summary>
            <param name="array">The input to compute the hash code for.</param>
            <param name="ibStart">The offset into the byte array from which to begin using data.</param>
            <param name="cbSize">The number of bytes in the byte array to use as data.</param>
        </member>
        <member name="M:net.vieapps.Components.Utility.RIPEMD160HashProviderBase.HashFinal">
            <summary>
            Finalizes the hash computation after the last data is processed by the cryptographic stream object.
            </summary>
            <returns>
            The computed hash code.
            </returns>
        </member>
        <member name="F:net.vieapps.Components.Utility.RIPEMD160HashProvider.X">
            <summary>
            The word buffer.
            </summary>
        </member>
        <member name="M:net.vieapps.Components.Utility.RIPEMD160HashProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:net.vieapps.Components.Utility.RIPEMD160HashProvider" /> class.
            </summary>
        </member>
        <member name="P:net.vieapps.Components.Utility.RIPEMD160HashProvider.HashSize">
            <summary>
            Gets the size, in bits, of the computed hash code.
            </summary>
            <returns>
            The size, in bits, of the computed hash code.
            </returns>
        </member>
        <member name="P:net.vieapps.Components.Utility.RIPEMD160HashProvider.InputBlockSize">
            <summary>
            Gets the input block size.
            </summary>
            <returns>
            The input block size.
            </returns>
        </member>
        <member name="P:net.vieapps.Components.Utility.RIPEMD160HashProvider.OutputBlockSize">
            <summary>
            Gets the output block size.
            </summary>
            <returns>
            The output block size.
            </returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.RIPEMD160HashProvider.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Routes data written to the object into the hash algorithm for computing the hash.
            </summary>
            <param name="array">The input to compute the hash code for.</param>
            <param name="ibStart">The offset into the byte array from which to begin using data.</param>
            <param name="cbSize">The number of bytes in the byte array to use as data.</param>
        </member>
        <member name="M:net.vieapps.Components.Utility.RIPEMD160HashProvider.HashFinal">
            <summary>
            Finalizes the hash computation after the last data is processed by the cryptographic stream object.
            </summary>
            <returns>
            The computed hash code.
            </returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.RIPEMD160HashProvider.Reset">
            <summary>
            Resets <see cref="T:net.vieapps.Components.Utility.RIPEMD160HashProvider"/> to its initial state.
            </summary>
        </member>
        <member name="M:net.vieapps.Components.Utility.RIPEMD160HashProvider.F1(System.Int32,System.Int32,System.Int32)">
            <summary>
            Rounds 0-15
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="z">The z.</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.RIPEMD160HashProvider.F2(System.Int32,System.Int32,System.Int32)">
            <summary>
            Rounds 16-31
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="z">The z.</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.RIPEMD160HashProvider.F3(System.Int32,System.Int32,System.Int32)">
            <summary>
            ounds 32-47
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="z">The z.</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.RIPEMD160HashProvider.F4(System.Int32,System.Int32,System.Int32)">
            <summary>
            Rounds 48-63
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="z">The z.</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.RIPEMD160HashProvider.F5(System.Int32,System.Int32,System.Int32)">
            <summary>
            ounds 64-79
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="z">The z.</param>
            <returns></returns>
        </member>
        <member name="T:net.vieapps.Components.Utility.RIPEMD160">
            <summary>
            Cryptographic hash function based upon the Merkle–Damgård construction.
            </summary>
        </member>
        <member name="M:net.vieapps.Components.Utility.RIPEMD160.Create">
            <summary>
            Creates a new instance of the <see cref="T:net.vieapps.Components.Utility.RIPEMD160"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.RIPEMD160.Create(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:net.vieapps.Components.Utility.RIPEMD160"/> class.
            </summary>
            <param name="hashName"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.RIPEMD160.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:net.vieapps.Components.Utility.RIPEMD160"/> class.
            </summary>
        </member>
        <member name="P:net.vieapps.Components.Utility.RIPEMD160.HashSize">
            <summary>
            Gets the size, in bits, of the computed hash code.
            </summary>
            <returns>
            The size, in bits, of the computed hash code.
            </returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.RIPEMD160.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Routes data written to the object into the hash algorithm for computing the hash.
            </summary>
            <param name="array">The input to compute the hash code for.</param>
            <param name="ibStart">The offset into the byte array from which to begin using data.</param>
            <param name="cbSize">The number of bytes in the byte array to use as data.</param>
        </member>
        <member name="M:net.vieapps.Components.Utility.RIPEMD160.HashFinal">
            <summary>
            Finalizes the hash computation after the last data is processed by the cryptographic stream object.
            </summary>
            <returns>
            The computed hash code.
            </returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.RIPEMD160.Initialize">
            <summary>
            Initializes an implementation of the <see cref="T:System.Security.Cryptography.HashAlgorithm"/> class.
            </summary>
        </member>
        <member name="M:net.vieapps.Components.Utility.RIPEMD160.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:net.vieapps.Components.Utility.RIPEMD160"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:net.vieapps.Components.Utility.HMACRIPEMD160">
            <summary>
            Computes a Hash-based Message Authentication Code (HMAC) by using the <see cref="T:net.vieapps.Components.Utility.RIPEMD160"/> hash function.
            </summary>
        </member>
        <member name="F:net.vieapps.Components.Utility.HMACRIPEMD160._innerPaddingWritten">
            <summary>
            Holds value indicating whether the inner padding was already written.
            </summary>
        </member>
        <member name="P:net.vieapps.Components.Utility.HMACRIPEMD160.BlockSizeValue">
            <summary>
            Gets or sets the block size (in bytes) to use in the hash value.
            </summary>
            <value>
            The block size to use in the hash value. For <see cref="T:net.vieapps.Components.Utility.HMACRIPEMD160"/> this is 64 bytes.
            </value>
        </member>
        <member name="P:net.vieapps.Components.Utility.HMACRIPEMD160.HashSize">
            <summary>
            Gets the size (in bits) of the computed hash code.
            </summary>
            <value>
            The size, in bits, of the computed hash code.
            </value>
        </member>
        <member name="P:net.vieapps.Components.Utility.HMACRIPEMD160.Key">
            <summary>
            Gets or sets the key to use in the hash algorithm.
            </summary>
            <returns>
            The key to use in the hash algorithm.
            </returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.HMACRIPEMD160.#ctor(System.Byte[])">
            <summary>
            Initializes a <see cref="T:net.vieapps.Components.Utility.HMACRIPEMD160"/> with the specified key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:net.vieapps.Components.Utility.HMACRIPEMD160.Initialize">
            <summary>
            Initializes an implementation of the <see cref="T:System.Security.Cryptography.HashAlgorithm" /> class.
            </summary>
        </member>
        <member name="M:net.vieapps.Components.Utility.HMACRIPEMD160.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Hashes the core.
            </summary>
            <param name="rgb">The RGB.</param>
            <param name="ib">The ib.</param>
            <param name="cb">The cb.</param>
        </member>
        <member name="M:net.vieapps.Components.Utility.HMACRIPEMD160.HashFinal">
            <summary>
            Finalizes the hash computation after the last data is processed by the cryptographic stream object.
            </summary>
            <returns>
            The computed hash code.
            </returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.HMACRIPEMD160.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged ResourceMessages.</param>
        </member>
        <member name="T:net.vieapps.Components.Utility.ECCsecp256k1">
            <summary>
            Elliptic Curve Cryptography (follow secp256k1 specs - Bitcoin)
            </summary>
        </member>
        <member name="M:net.vieapps.Components.Utility.ECCsecp256k1.GeneratePrivateKey(System.Int32)">
            <summary>
            Generates a random private key for using with Elliptic Curve Cryptography (follow Secp256k1 specs - Bitcoin)
            </summary>
            <param name="length">The byte-length of the key (means number of total bytes :: 256 bytes = 2048 bits)</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ECCsecp256k1.GetPrivateKey(System.Byte[])">
            <summary>
            Gets the private key for using with Elliptic Curve Cryptography (follow Secp256k1 specs - Bitcoin)
            </summary>
            <param name="key">The array of bytes that presents a key</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ECCsecp256k1.GetPrivateKey(System.String,System.Boolean)">
            <summary>
            Gets the private key for using with Elliptic Curve Cryptography (follow Secp256k1 specs - Bitcoin)
            </summary>
            <param name="key">The string that presents a key</param>
            <param name="isHex">true to specify the key is hexa string, false is base64 string</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ECCsecp256k1.GeneratePublicKey(System.Numerics.BigInteger)">
            <summary>
            Generates the public key for using with Elliptic Curve Cryptography (follow Secp256k1 specs - Bitcoin)
            </summary>
            <param name="key">The private key that used to generate public key</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ECCsecp256k1.GeneratePublicKey(System.Byte[])">
            <summary>
            Generates the public key for using with Elliptic Curve Cryptography (follow Secp256k1 specs - Bitcoin)
            </summary>
            <param name="key">The private key that used to generate public key</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ECCsecp256k1.GeneratePublicKey(System.String,System.Boolean)">
            <summary>
            Generates the public key for using with Elliptic Curve Cryptography (follow Secp256k1 specs - Bitcoin)
            </summary>
            <param name="key">The private key that used to generate public key</param>
            <param name="isHex">true to specify the key is hexa string, false is base64 string</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ECCsecp256k1.GetPublicKey(System.Byte[])">
            <summary>
            Generates (Decodes) the public key using Elliptic Curve Cryptography (follow Secp256k1 specs - Bitcoin)
            </summary>
            <param name="key">The array of bytes that presents a key</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ECCsecp256k1.GetPublicKey(System.String,System.Boolean)">
            <summary>
            Generates (Decodes) the public key using Elliptic Curve Cryptography (follow Secp256k1 specs - Bitcoin)
            </summary>
            <param name="key">The string that presents a key</param>
            <param name="isHex">true to specify the key is hexa string, false is base64 string</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ECCsecp256k1.GetPublicKey(net.vieapps.Components.Utility.ECCsecp256k1.Point,System.Boolean)">
            <summary>
            Generates (Encodes) the public key using Elliptic Curve Cryptography (follow Secp256k1 specs - Bitcoin)
            </summary>
            <param name="publicKey">The public key</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ECCsecp256k1.GeneratePublicAddress(net.vieapps.Components.Utility.ECCsecp256k1.Point,System.Boolean,System.Byte)">
            <summary>
            Generates the public address from the public key using Elliptic Curve Cryptography (follow Secp256k1 specs - Bitcoin)
            </summary>
            <param name="publicKey">The public key to generate public address</param>
            <param name="compressed">Do compress the public address</param>
            <param name="prefix">The byte that presents prefix of the public address</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ECCsecp256k1.GeneratePublicAddress(System.Byte[],System.Boolean,System.Byte)">
            <summary>
            Generates the public address from the public key using Elliptic Curve Cryptography (follow Secp256k1 specs - Bitcoin)
            </summary>
            <param name="publicKey">The public key to generate public address</param>
            <param name="compressed">Do compress the address</param>
            <param name="prefix">The byte that presents prefix of the public address</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ECCsecp256k1.GeneratePublicAddress(System.String,System.Boolean,System.Byte)">
            <summary>
            Generates the public address from the public key using Elliptic Curve Cryptography (follow Secp256k1 specs - Bitcoin)
            </summary>
            <param name="publicKey">The public key to generate public address</param>
            <param name="compressed">Do compress the address</param>
            <param name="prefix">The byte that presents prefix of the public address</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ECCsecp256k1.Encrypt(net.vieapps.Components.Utility.ECCsecp256k1.Point,System.Byte[])">
            <summary>
            Encrypts the data using Elliptic Curve Cryptography (follow Secp256k1 specs - Bitcoin)
            </summary>
            <param name="key">The public key to encrypt data</param>
            <param name="data">The array of bytes that contains data to encrypt</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ECCsecp256k1.Encrypt(System.Byte[],System.Byte[])">
            <summary>
            Encrypts the data using Elliptic Curve Cryptography (follow Secp256k1 specs - Bitcoin)
            </summary>
            <param name="key">The public key to encrypt data</param>
            <param name="data">The array of bytes that contains data to encrypt</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ECCsecp256k1.Decrypt(System.Numerics.BigInteger,System.Byte[])">
            <summary>
            Decrypts the data using Elliptic Curve Cryptography (follow Secp256k1 specs - Bitcoin)
            </summary>
            <param name="key">The private key to decrypt data</param>
            <param name="data">The array of bytes that contains data to decrypt</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ECCsecp256k1.Decrypt(System.Byte[],System.Byte[])">
            <summary>
            Decrypts the data using Elliptic Curve Cryptography (follow Secp256k1 specs - Bitcoin)
            </summary>
            <param name="key">The private key to decrypt data</param>
            <param name="data">The array of bytes that contains data to decrypt</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ECCsecp256k1.Sign(System.Numerics.BigInteger,System.Byte[])">
            <summary>
            Signs hash data using Elliptic Curve Cryptography (follow Secp256k1 specs - Bitcoin)
            </summary>
            <param name="key">The private key used to to sign</param>
            <param name="hash">The hashed-data to sign</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ECCsecp256k1.Sign(System.Byte[],System.Byte[])">
            <summary>
            Signs hash data using Elliptic Curve Cryptography (follow Secp256k1 specs - Bitcoin)
            </summary>
            <param name="key">The private key used to to sign</param>
            <param name="hash">The hashed-data to sign</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ECCsecp256k1.Sign(System.Numerics.BigInteger,System.Byte[],System.String)">
            <summary>
            Signs hash data using Elliptic Curve Cryptography (follow Secp256k1 specs - Bitcoin)
            </summary>
            <param name="key">The private key used to to sign</param>
            <param name="data">The data to compute hash</param>
            <param name="hashAlgorithm">Name of a hash algorithm used to compute hash(md5, sha1, sha256, sha384, sha512, ripemd/ripemd160, blake128, blake/blake256, blake384, blake512)</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ECCsecp256k1.Sign(System.Byte[],System.Byte[],System.String)">
            <summary>
            Signs hash data using Elliptic Curve Cryptography (follow Secp256k1 specs - Bitcoin)
            </summary>
            <param name="key">The private key used to to sign</param>
            <param name="data">The data to compute hash</param>
            <param name="hashAlgorithm">Name of a hash algorithm used to compute hash(md5, sha1, sha256, sha384, sha512, ripemd/ripemd160, blake128, blake/blake256, blake384, blake512)</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ECCsecp256k1.Verify(net.vieapps.Components.Utility.ECCsecp256k1.Point,System.Byte[],System.Numerics.BigInteger[])">
            <summary>
            Verifys the signature of hash using Elliptic Curve Cryptography (follow Secp256k1 specs - Bitcoin)
            </summary>
            <param name="key">The public key used to verify</param>
            <param name="hash">The hashed-data to veriry with signature</param>
            <param name="signature">The signature to verify</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ECCsecp256k1.Verify(System.Byte[],System.Byte[],System.Numerics.BigInteger[])">
            <summary>
            Verifys the signature of hash using Elliptic Curve Cryptography (follow Secp256k1 specs - Bitcoin)
            </summary>
            <param name="key">The public key used to verify</param>
            <param name="hash">The hashed-data to veriry with signature</param>
            <param name="signature">The signature to verify</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ECCsecp256k1.Verify(net.vieapps.Components.Utility.ECCsecp256k1.Point,System.Byte[],System.String,System.Numerics.BigInteger[])">
            <summary>
            Verifys the signature of hash using Elliptic Curve Cryptography (follow Secp256k1 specs - Bitcoin)
            </summary>
            <param name="key">The public key used to verify</param>
            <param name="data">The data to compute hash to verify with signature</param>
            <param name="hashAlgorithm">Name of a hash algorithm used to compute hash(md5, sha1, sha256, sha384, sha512, ripemd/ripemd160, blake128, blake/blake256, blake384, blake512)</param>
            <param name="signature">The signature to verify</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ECCsecp256k1.Verify(System.Byte[],System.Byte[],System.String,System.Numerics.BigInteger[])">
            <summary>
            Verifys the signature of hash using Elliptic Curve Cryptography (follow Secp256k1 specs - Bitcoin)
            </summary>
            <param name="key">The public key used to verify</param>
            <param name="data">The data to compute hash to verify with signature</param>
            <param name="hashAlgorithm">Name of a hash algorithm used to compute hash(md5, sha1, sha256, sha384, sha512, ripemd/ripemd160, blake128, blake/blake256, blake384, blake512)</param>
            <param name="signature">The signature to verify</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ECCsecp256k1.GetSignature(System.Numerics.BigInteger[])">
            <summary>
            Gets the string that presents the signature for using with Elliptic Curve Cryptography (follow Secp256k1 specs - Bitcoin)
            </summary>
            <param name="signature">The signature</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ECCsecp256k1.GetSignature(System.String)">
            <summary>
            Gets the signature from a string for using with Elliptic Curve Cryptography (follow Secp256k1 specs - Bitcoin)
            </summary>
            <param name="signature">The signature</param>
            <returns></returns>
        </member>
        <member name="T:net.vieapps.Components.Utility.DateTimeService">
            <summary>
            Static servicing methods for working with date-time
            </summary>
        </member>
        <member name="P:net.vieapps.Components.Utility.DateTimeService.UnixEpoch">
            <summary>
            The Unix Epoch
            </summary>
        </member>
        <member name="P:net.vieapps.Components.Utility.DateTimeService.CheckingDateTime">
            <summary>
            Gets the default date-time for checking (1/1/1900)
            </summary>
        </member>
        <member name="M:net.vieapps.Components.Utility.DateTimeService.GetElapsedTimes(System.Int64,System.Boolean,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Gets the string that presents elapsed times (means times for processing)
            </summary>
            <param name="elapsedTimes">The value that presents total elapsed times in mili-seconds</param>
            <param name="computeMinutes">true to compute minutes in elapsed times</param>
            <param name="addString">true to add string (like minute(s), second(s), mili-second(s), ...) into the ending-point</param>
            <param name="strDays">The string that presents the label of day(s)</param>
            <param name="strHours">The string that presents the label of hour(s)</param>
            <param name="strMinutes">The string that presents the label of minute(s)</param>
            <param name="strSeconds">The string that presents the label of second(s)</param>
            <param name="strMiliseconds">The string that presents the label of mili-second(s)</param>
            <param name="strNanoseconds">The string that presents the label of nano-second(s)</param>
            <returns>The string that presents elapsed times</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.DateTimeService.GetElapsedTimes(System.Diagnostics.Stopwatch,System.Boolean,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Gets the string that presents elapsed times (means times for processing)
            </summary>
            <param name="stopwatch">The <see cref="T:System.Diagnostics.Stopwatch">Stopwatch</see> object that presents elapsed times</param>
            <param name="computeMinutes">true to compute minutes in elapsed times</param>
            <param name="addString">true to add string (like minute(s), second(s), mili-second(s), ...) into the ending-point</param>
            <param name="strDays">The string that presents the label of day(s)</param>
            <param name="strHours">The string that presents the label of hour(s)</param>
            <param name="strMinutes">The string that presents the label of minute(s)</param>
            <param name="strSeconds">The string that presents the label of second(s)</param>
            <param name="strMiliseconds">The string that presents the label of mili-second(s)</param>
            <param name="strNanoseconds">The string that presents the label of nano-second(s)</param>
            <returns>The string that presents elapsed times</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.DateTimeService.GetElapsedTimes(System.DateTime,System.Boolean,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Gets the string that presents elapsed times (means times for processing)
            </summary>
            <param name="startTime">The <see cref="T:System.DateTime">DateTime</see> object that presents the starting time</param>
            <param name="computeMinutes">true to compute minutes in elapsed times</param>
            <param name="addString">true to add string (like minute(s), second(s), mili-second(s), ...) into the ending-point</param>
            <param name="strDays">The string that presents the label of day(s)</param>
            <param name="strHours">The string that presents the label of hour(s)</param>
            <param name="strMinutes">The string that presents the label of minute(s)</param>
            <param name="strSeconds">The string that presents the label of second(s)</param>
            <param name="strMiliseconds">The string that presents the label of mili-second(s)</param>
            <param name="strNanoseconds">The string that presents the label of nano-second(s)</param>
            <returns>The string that presents elapsed times</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.DateTimeService.GetWeekDayName(System.DateTime)">
            <summary>
            Gets the name of weekday from this date-time
            </summary>
            <param name="datetime"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.DateTimeService.GetMonthName(System.DateTime)">
            <summary>
            Gets name of month from this date-time
            </summary>
            <param name="datetime"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.DateTimeService.GetMonthFromHttpString(System.String)">
            <summary>
            Gets the month from this this HTTP date-time string
            </summary>
            <param name="string"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.DateTimeService.FromHttpDateTime(System.String,System.Boolean)">
            <summary>
            Converts this HTTP date-time string to date-time
            </summary>
            <param name="string"></param>
            <param name="useUTC"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.DateTimeService.GetFirstDayOfWeek(System.DateTime)">
            <summary>
            Gets the first-day-of-week of this date-time
            </summary>
            <param name="datetime"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.DateTimeService.GetEndDayOfWeek(System.DateTime)">
            <summary>
            Gets the end-day-of-week of this date-time
            </summary>
            <param name="datetime"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.DateTimeService.GetFirstDayOfMonth(System.DateTime)">
            <summary>
            Gets the first-day-of-month of this date-time
            </summary>
            <param name="datetime"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.DateTimeService.GetEndDayOfMonth(System.DateTime)">
            <summary>
            Gets the end-day-of-month of this date-time
            </summary>
            <param name="datetime"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.DateTimeService.IsInCurrentWeek(System.DateTime)">
            <summary>
            Checks to see this date-time is in current week
            </summary>
            <param name="datetime"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.DateTimeService.IsInCurrentMonth(System.DateTime)">
            <summary>
            Checks to see this date-time is in current month
            </summary>
            <param name="datetime"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.DateTimeService.ToUnixTimestamp(System.DateTime,System.Boolean)">
            <summary>
            Converts this date-time to UNIX timestamp
            </summary>
            <param name="datetime"></param>
            <param name="useUTC"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.DateTimeService.FromUnixTimestamp(System.Int64,System.Boolean)">
            <summary>
            Converts this UNIX timestamp to date-time
            </summary>
            <param name="unixTimestamp"></param>
            <param name="useUTC"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.DateTimeService.ToDTString(System.DateTime,System.Boolean,System.Boolean)">
            <summary>
            Converts this date-time to string in format 'yyyy/MM/dd HH:mm:ss'
            </summary>
            <param name="datetime"></param>
            <param name="useUTC">true to use UTC date-time</param>
            <param name="allowTime">true to allow time, false to use date onlye</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.DateTimeService.ToUtcString(System.DateTime,System.Boolean)">
            <summary>
            Converts this date-time to string in format 'yyyy-MM-ddTHH:mm:ssZzzzz'
            </summary>
            <param name="datetime"></param>
            <param name="useUTC"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.DateTimeService.ToIsoString(System.DateTime,System.Boolean)">
            <summary>
            Converts this date-time to string in format 'yyyy-MM-ddTHH:mm:ssZzzzz'
            </summary>
            <param name="datetime"></param>
            <param name="useUTC"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.DateTimeService.ToHttpString(System.DateTime,System.Boolean)">
            <summary>
            Converts this date-time to HTTP string with GMT
            </summary>
            <param name="datetime"></param>
            <param name="useUTC"></param>
            <returns></returns>
        </member>
        <member name="T:net.vieapps.Components.Utility.EncodingService">
            <summary>
            Static servicing methods for working with encoding
            </summary>
        </member>
        <member name="M:net.vieapps.Components.Utility.EncodingService.ToBytes(System.ArraySegment{System.Byte})">
            <summary>
            Converts this array segment of bytes to array of bytes
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.EncodingService.ToBytes(System.String,System.Text.Encoding)">
            <summary>
            Converts this string to array of bytes
            </summary>
            <param name="string"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.EncodingService.ToBytes(System.Boolean)">
            <summary>
            Converts this boolean to array of bytes
            </summary>
            <param name="bool"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.EncodingService.ToBytes(System.Char)">
            <summary>
            Converts this char to array of bytes
            </summary>
            <param name="char"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.EncodingService.ToBytes(System.Byte)">
            <summary>
            Converts this byte to array of bytes
            </summary>
            <param name="byte"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.EncodingService.ToBytes(System.SByte)">
            <summary>
            Converts this sbyte to array of bytes
            </summary>
            <param name="sbyte"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.EncodingService.ToBytes(System.Int16)">
            <summary>
            Converts this short to array of bytes
            </summary>
            <param name="short"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.EncodingService.ToBytes(System.UInt16)">
            <summary>
            Converts this ushort to array of bytes
            </summary>
            <param name="ushort"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.EncodingService.ToBytes(System.Int32)">
            <summary>
            Converts this int to array of bytes
            </summary>
            <param name="int"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.EncodingService.ToBytes(System.UInt32)">
            <summary>
            Converts this uint to array of bytes
            </summary>
            <param name="uint"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.EncodingService.ToBytes(System.Int64)">
            <summary>
            Converts this long to array of bytes
            </summary>
            <param name="long"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.EncodingService.ToBytes(System.UInt64)">
            <summary>
            Converts this ulong to array of bytes
            </summary>
            <param name="ulong"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.EncodingService.ToBytes(System.Single)">
            <summary>
            Converts this float to array of bytes
            </summary>
            <param name="float"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.EncodingService.ToBytes(System.Double)">
            <summary>
            Converts this double to array of bytes
            </summary>
            <param name="double"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.EncodingService.ToBytes(System.Decimal)">
            <summary>
            Converts this decimal to array of bytes
            </summary>
            <param name="decimal"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.EncodingService.ToBytes(System.DateTime)">
            <summary>
            Converts this date-time to array of bytes
            </summary>
            <param name="datetime"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.EncodingService.ToBytes(System.Numerics.BigInteger,System.Boolean)">
            <summary>
            Converts this big-integer to array of bytes
            </summary>
            <param name="bigInt"></param>
            <param name="toUnsigned"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.EncodingService.ToUnsignedBytes(System.Numerics.BigInteger)">
            <summary>
            Converts this big-integer to unsigned array of bytes
            </summary>
            <param name="bigInt"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.EncodingService.Base64ToBytes(System.String,System.Boolean)">
            <summary>
            Converts this Base64 string to array of bytes
            </summary>
            <param name="string"></param>
            <param name="isBase64Url"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.EncodingService.Base64UrlToBytes(System.String)">
            <summary>
            Converts this Base64Url string to array of bytes
            </summary>
            <param name="string"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.EncodingService.ToHex(System.Byte[])">
            <summary>
            Converts this array of bytes to hexa string
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.EncodingService.ToHex(System.String,System.Boolean)">
            <summary>
            Converts this string to hexa string
            </summary>
            <param name="string"></param>
            <param name="isBase64"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.EncodingService.ToHex(System.Numerics.BigInteger)">
            <summary>
            Converts this big-integer to hexa string
            </summary>
            <param name="bigInt"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.EncodingService.HexToBytes(System.String)">
            <summary>
            Converts this hexa-string to array of bytes
            </summary>
            <param name="hex"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.EncodingService.Base32Encode(System.Byte[],System.Boolean,System.String)">
            <summary>
            Encodes this array of bytes to Base32 string
            </summary>
            <param name="bytes"></param>
            <param name="addChecksum"></param>
            <param name="hashAlgorithm">Name of a hash algorithm (md5, sha1, sha256, sha384, sha512, ripemd/ripemd160, blake128, blake/blake256, blake384, blake512) for working with check-sum</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.EncodingService.Base32Decode(System.String,System.Boolean,System.String)">
            <summary>
            Decodes this Base32 string to array of bytes
            </summary>
            <param name="string"></param>
            <param name="verifyChecksum"></param>
            <param name="hashAlgorithm">Name of a hash algorithm (md5, sha1, sha256, sha384, sha512, ripemd/ripemd160, blake128, blake/blake256, blake384, blake512) for working with check-sum</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.EncodingService.ToBase32(System.String,System.Boolean,System.String)">
            <summary>
            Converts this string to Base32 string
            </summary>
            <param name="string"></param>
            <param name="addChecksum"></param>
            <param name="hashAlgorithm">Name of a hash algorithm (md5, sha1, sha256, sha384, sha512, ripemd/ripemd160, blake128, blake/blake256, blake384, blake512) for working with check-sum</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.EncodingService.FromBase32(System.String,System.Boolean,System.String)">
            <summary>
            Converts this Base32 string to plain string
            </summary>
            <param name="string"></param>
            <param name="verifyChecksum"></param>
            <param name="hashAlgorithm">Name of a hash algorithm (md5, sha1, sha256, sha384, sha512, ripemd/ripemd160, blake128, blake/blake256, blake384, blake512) for working with check-sum</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.EncodingService.Base58Encode(System.Byte[],System.Boolean,System.String)">
            <summary>
            Encodes this array of bytes to Base58 string
            </summary>
            <param name="bytes">The array of bytes to encode</param>
            <param name="addChecksum">true to add checksum</param>
            <param name="hashAlgorithm">Name of a hash algorithm (md5, sha1, sha256, sha384, sha512, ripemd/ripemd160, blake128, blake/blake256, blake384, blake512) for working with check-sum</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.EncodingService.Base58Decode(System.String,System.Boolean,System.String)">
            <summary>
            Decodes this Base58 string to array of bytes
            </summary>
            <param name="string">The string to decode</param>
            <param name="verifyChecksum">true to verify checksum</param>
            <param name="hashAlgorithm">Name of a hash algorithm (md5, sha1, sha256, sha384, sha512, ripemd/ripemd160, blake128, blake/blake256, blake384, blake512) for working with check-sum</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.EncodingService.ToBase58(System.String,System.Boolean,System.String)">
            <summary>
            Converts this string to Base58 string
            </summary>
            <param name="string">The string to convert</param>
            <param name="addChecksum">true to add checksum</param>
            <param name="hashAlgorithm">Name of a hash algorithm (md5, sha1, sha256, sha384, sha512, ripemd/ripemd160, blake128, blake/blake256, blake384, blake512) for working with check-sum</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.EncodingService.FromBase58(System.String,System.Boolean,System.String)">
            <summary>
            Converts this Base58 string to plain string
            </summary>
            <param name="string">The string to convert</param>
            <param name="verifyChecksum">true to verify checksum</param>
            <param name="hashAlgorithm">Name of a hash algorithm (md5, sha1, sha256, sha384, sha512, ripemd/ripemd160, blake128, blake/blake256, blake384, blake512) for working with check-sum</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.EncodingService.Base64Encode(System.Byte[],System.Boolean,System.String)">
            <summary>
            Encodes this array of bytes to Base64 string
            </summary>
            <param name="bytes">The array of bytes to encode</param>
            <param name="addChecksum">true to add checksum</param>
            <param name="hashAlgorithm">Name of a hash algorithm (md5, sha1, sha256, sha384, sha512, ripemd/ripemd160, blake128, blake/blake256, blake384, blake512) for working with check-sum</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.EncodingService.Base64Decode(System.String,System.Boolean,System.String)">
            <summary>
            Decodes this Base64 string to array of bytes
            </summary>
            <param name="string">The string to decode</param>
            <param name="verifyChecksum">true to verify checksum</param>
            <param name="hashAlgorithm">Name of a hash algorithm (md5, sha1, sha256, sha384, sha512, ripemd/ripemd160, blake128, blake/blake256, blake384, blake512) for working with check-sum</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.EncodingService.ToBase64(System.Byte[],System.Boolean,System.String)">
            <summary>
            Converts this array of bytes to Base64 string
            </summary>
            <param name="bytes"></param>
            <param name="addChecksum">true to add checksum</param>
            <param name="hashAlgorithm">Name of a hash algorithm (md5, sha1, sha256, sha384, sha512, ripemd/ripemd160, blake128, blake/blake256, blake384, blake512) for working with check-sum</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.EncodingService.ToBase64(System.String,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            Converts this string to Base64 string
            </summary>
            <param name="string"></param>
            <param name="isHex"></param>
            <param name="isBase64Url"></param>
            <param name="addChecksum"></param>
            <param name="hashAlgorithm">Name of a hash algorithm (md5, sha1, sha256, sha384, sha512, ripemd/ripemd160, blake128, blake/blake256, blake384, blake512) for working with check-sum</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.EncodingService.ToBase64Url(System.Byte[],System.Boolean,System.String)">
            <summary>
            Converts this array of bytes to Base64Url string
            </summary>
            <param name="bytes"></param>
            <param name="addChecksum"></param>
            <param name="hashAlgorithm">Name of a hash algorithm (md5, sha1, sha256, sha384, sha512, ripemd/ripemd160, blake128, blake/blake256, blake384, blake512) for working with check-sum</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.EncodingService.ToBase64Url(System.String,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            Converts this string to Base64Url string
            </summary>
            <param name="string"></param>
            <param name="isBase64"></param>
            <param name="isHex"></param>
            <param name="addChecksum"></param>
            <param name="hashAlgorithm">Name of a hash algorithm (md5, sha1, sha256, sha384, sha512, ripemd/ripemd160, blake128, blake/blake256, blake384, blake512) for working with check-sum</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.EncodingService.FromBase64(System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Converts this Base64 string to plain string
            </summary>
            <param name="string"></param>
            <param name="isBase64Url"></param>
            <param name="verifyChecksum"></param>
            <param name="hashAlgorithm">Name of a hash algorithm (md5, sha1, sha256, sha384, sha512, ripemd/ripemd160, blake128, blake/blake256, blake384, blake512) for working with check-sum</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.EncodingService.FromBase64Url(System.String)">
            <summary>
            Converts this Base64Url string to plain string
            </summary>
            <param name="string"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.EncodingService.UrlEncode(System.String)">
            <summary>
            Encodes this string to use in url
            </summary>
            <param name="string"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.EncodingService.UrlDecode(System.String)">
            <summary>
            Decodes this url-encoded string
            </summary>
            <param name="string"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.EncodingService.Url64Encode(System.String)">
            <summary>
            Encodes this string to Base64Url string
            </summary>
            <param name="string"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.EncodingService.Url64Decode(System.String)">
            <summary>
            Decodes this Base64Url string
            </summary>
            <param name="string"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.EncodingService.HtmlEncode(System.String)">
            <summary>
            Encodes this string to HTML string
            </summary>
            <param name="string"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.EncodingService.HtmlDecode(System.String)">
            <summary>
            Decodes this HTML string
            </summary>
            <param name="string"></param>
            <returns></returns>
        </member>
        <member name="T:net.vieapps.Components.Utility.ExternalProcess">
            <summary>
            Servicing class for working with external processes
            </summary>
        </member>
        <member name="M:net.vieapps.Components.Utility.ExternalProcess.Start(System.String,System.String,System.String,System.Action{System.Object,System.EventArgs},System.Action{System.Object,System.Diagnostics.DataReceivedEventArgs},System.Action{System.Object,System.Diagnostics.DataReceivedEventArgs},System.Boolean)">
            <summary>
            Starts to run an external process directly
            </summary>
            <param name="filePath">The absolute path to the file of external process</param>
            <param name="arguments">The arguments</param>
            <param name="workingDirectory">The working directory</param>
            <param name="onExited">The action to run when the process was exited (Exited event)</param>
            <param name="onOutputDataReceived">The action to run when an output message was received (OutputDataReceived event)</param>
            <param name="onErrorDataReceived">The action to run when an error message was received (ErrorDataReceived event)</param>
            <param name="captureOutput">true to capture output (standard output and error output)</param>
            <returns></returns>
            <remarks>
            Remember assign execution permisions to the file (sudo chmod 777 'filename') while running on Linux/macOS
            </remarks>
        </member>
        <member name="M:net.vieapps.Components.Utility.ExternalProcess.Start(System.String,System.String,System.Action{System.Object,System.EventArgs},System.Action{System.Object,System.Diagnostics.DataReceivedEventArgs})">
            <summary>
            Starts to run an external process directly
            </summary>
            <param name="filePath">The absolute path to the file of external process</param>
            <param name="arguments">The arguments</param>
            <param name="onExited">The action to run when the process was exited (Exited event)</param>
            <param name="onDataReceived">The method to handle the data receive events (include OutputDataReceived and ErrorDataReceived events)</param>
            <returns></returns>
            <remarks>
            Remember assign execution permisions to the file (sudo chmod 777 'filename') while running on Linux/macOS
            </remarks>
        </member>
        <member name="M:net.vieapps.Components.Utility.ExternalProcess.Start(System.String,System.String,System.Action{System.Object,System.EventArgs},System.Action{System.Object,System.Diagnostics.DataReceivedEventArgs},System.Action{System.Object,System.Diagnostics.DataReceivedEventArgs},System.Boolean)">
            <summary>
            Starts to run a command as external process with 'cmd.exe' (Windows) or '/bin/bash' (Linux/macOS)
            </summary>
            <param name="command">The command to run</param>
            <param name="workingDirectory">The working directory</param>
            <param name="onExited">The action to run when the process was exited (Exited event)</param>
            <param name="onOutputDataReceived">The action to run when an output message was received (OutputDataReceived event)</param>
            <param name="onErrorDataReceived">The action to run when an error message was received (ErrorDataReceived event)</param>
            <param name="captureOutput">true to capture output (standard output and error output)</param>
            <returns></returns>
            <remarks>
            Remember assign execution permisions to the file (sudo chmod 777 'filename') while running on Linux/macOS
            </remarks>
        </member>
        <member name="M:net.vieapps.Components.Utility.ExternalProcess.Stop(net.vieapps.Components.Utility.ExternalProcess.Info,System.Action{net.vieapps.Components.Utility.ExternalProcess.Info},System.Action{System.Exception},System.Int32)">
            <summary>
            Stops an external process
            </summary>
            <param name="info">The information</param>
            <param name="onCompleted">The action to run when completed</param>
            <param name="onError">The action to run when got error</param>
            <param name="waitingTimes">The time for waiting when try to close</param>
        </member>
        <member name="M:net.vieapps.Components.Utility.ExternalProcess.Kill(System.Diagnostics.Process,System.Action{System.Diagnostics.Process},System.Action{System.Diagnostics.Process},System.Action{System.Exception})">
            <summary>
            Kills an external process
            </summary>
            <param name="process"></param>
            <param name="tryToClose">The action to run to try to close the process before the process be killed</param>
            <param name="onKilled">The action to run when process was killed</param>
            <param name="onError">The action to run when got error</param>
        </member>
        <member name="M:net.vieapps.Components.Utility.ExternalProcess.Kill(System.Int32,System.Action{System.Diagnostics.Process},System.Action{System.Diagnostics.Process},System.Action{System.Exception})">
            <summary>
            Kills an external process that specified by identity
            </summary>
            <param name="processID">The integer that presents the identity of a process that to be killed</param>
            <param name="tryToClose">The action to try to close the process before the process be killed</param>
            <param name="onKilled">The action to run when process was killed</param>
            <param name="onError">The action to run when got error</param>
        </member>
        <member name="T:net.vieapps.Components.Utility.ExternalProcess.Info">
            <summary>
            Presents information of an external process
            </summary>
        </member>
        <member name="M:net.vieapps.Components.Utility.ExternalProcess.Info.#ctor(System.String,System.String)">
            <summary>
            Creates new information of an external process
            </summary>
            <param name="filePath">The absolute path to the file of external process</param>
            <param name="arguments">The arguments</param>
        </member>
        <member name="P:net.vieapps.Components.Utility.ExternalProcess.Info.FilePath">
            <summary>
            Gest the absolute path of file
            </summary>
        </member>
        <member name="P:net.vieapps.Components.Utility.ExternalProcess.Info.Arguments">
            <summary>
            Gets the arguments
            </summary>
        </member>
        <member name="P:net.vieapps.Components.Utility.ExternalProcess.Info.StandardOutput">
            <summary>
            Ges the standard output (stdout)
            </summary>
        </member>
        <member name="P:net.vieapps.Components.Utility.ExternalProcess.Info.StandardError">
            <summary>
            Gets the standard error (stderr)
            </summary>
        </member>
        <member name="P:net.vieapps.Components.Utility.ExternalProcess.Info.Process">
            <summary>
            Gets the related process
            </summary>
        </member>
        <member name="P:net.vieapps.Components.Utility.ExternalProcess.Info.ID">
            <summary>
            Gets the identity
            </summary>
        </member>
        <member name="P:net.vieapps.Components.Utility.ExternalProcess.Info.StartTime">
            <summary>
            Gets the start time
            </summary>
        </member>
        <member name="P:net.vieapps.Components.Utility.ExternalProcess.Info.ExitTime">
            <summary>
            Gets the exit time
            </summary>
        </member>
        <member name="P:net.vieapps.Components.Utility.ExternalProcess.Info.ExitCode">
            <summary>
            Gets the exit code
            </summary>
        </member>
        <member name="P:net.vieapps.Components.Utility.ExternalProcess.Info.Extra">
            <summary>
            Gets the extra information
            </summary>
        </member>
        <member name="M:net.vieapps.Components.Utility.ExternalProcess.Info.Set``1(System.String,``0)">
            <summary>
            Sets the value of a specified key of the extra information
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:net.vieapps.Components.Utility.ExternalProcess.Info.Get``1(System.String,``0)">
            <summary>
            Gets the value of a specified key from the extra information
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="default"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ExternalProcess.Info.Remove(System.String)">
            <summary>
            Removes the value of a specified key from the extra information
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ExternalProcess.Info.Remove``1(System.String,``0@)">
            <summary>
            Removes the value of a specified key from the extra information
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.Logger.AssignLoggerFactory(Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Assigns a logger factory
            </summary>
            <param name="loggerFactory"></param>
        </member>
        <member name="M:net.vieapps.Components.Utility.Logger.GetLoggerFactory">
            <summary>
            Gets a logger factory
            </summary>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.Logger.CreateLogger(System.Type)">
            <summary>
            Creates a logger
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.Logger.CreateLogger``1">
            <summary>
            Creates a logger
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.Logger.LogTrace(Microsoft.Extensions.Logging.ILogger,System.String,System.Exception)">
            <summary>
            Writes a trace log message
            </summary>
            <param name="logger"></param>
            <param name="message">The log message</param>
            <param name="exception">The exception</param>
        </member>
        <member name="M:net.vieapps.Components.Utility.Logger.LogWarning(Microsoft.Extensions.Logging.ILogger,System.String,System.Exception)">
            <summary>
            Writes a warning log message
            </summary>
            <param name="logger"></param>
            <param name="message">The log message</param>
            <param name="exception">The exception</param>
        </member>
        <member name="M:net.vieapps.Components.Utility.Logger.LogInformation(Microsoft.Extensions.Logging.ILogger,System.String,System.Exception)">
            <summary>
            Writes a information log message
            </summary>
            <param name="logger"></param>
            <param name="message">The log message</param>
            <param name="exception">The exception</param>
        </member>
        <member name="M:net.vieapps.Components.Utility.Logger.LogDebug(Microsoft.Extensions.Logging.ILogger,System.String,System.Exception)">
            <summary>
            Writes a debug log message
            </summary>
            <param name="logger"></param>
            <param name="message">The log message</param>
            <param name="exception">The exception</param>
        </member>
        <member name="M:net.vieapps.Components.Utility.Logger.LogError(Microsoft.Extensions.Logging.ILogger,System.String,System.Exception)">
            <summary>
            Writes a error log message
            </summary>
            <param name="logger"></param>
            <param name="message">The log message</param>
            <param name="exception">The exception</param>
        </member>
        <member name="M:net.vieapps.Components.Utility.Logger.LogCritical(Microsoft.Extensions.Logging.ILogger,System.String,System.Exception)">
            <summary>
            Writes a critical log message
            </summary>
            <param name="logger"></param>
            <param name="message">The log message</param>
            <param name="exception">The exception</param>
        </member>
        <member name="M:net.vieapps.Components.Utility.Logger.Log(Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.LogLevel,System.String,System.Exception)">
            <summary>
            Writes a log message
            </summary>
            <param name="logger"></param>
            <param name="mode">Write mode</param>
            <param name="message">The log message</param>
            <param name="exception">The exception</param>
        </member>
        <member name="M:net.vieapps.Components.Utility.Logger.Log(Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.LogLevel,System.String,System.Exception)">
            <summary>
            Writes a log message
            </summary>
            <param name="logger"></param>
            <param name="minLevel">The minimum level (for checking when write)</param>
            <param name="mode">Write mode</param>
            <param name="message">The log message</param>
            <param name="exception">The exception</param>
        </member>
        <member name="M:net.vieapps.Components.Utility.Logger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.LogLevel,System.String,System.Exception)">
            <summary>
            Writes a log message
            </summary>
            <typeparam name="T"></typeparam>
            <param name="minLevel">The minimum level (for checking when write)</param>
            <param name="mode">Write mode</param>
            <param name="message">The log message</param>
            <param name="exception">The exception</param>
        </member>
        <member name="T:net.vieapps.Components.Utility.EmailMessage">
            <summary>
            Presents an email message
            </summary>
        </member>
        <member name="M:net.vieapps.Components.Utility.EmailMessage.#ctor">
            <summary>
            Initializes a new email message
            </summary>
        </member>
        <member name="M:net.vieapps.Components.Utility.EmailMessage.#ctor(System.String)">
            <summary>
            Initializes a new email message
            </summary>
            <param name="encryptedMessage">The encrypted message</param>
        </member>
        <member name="P:net.vieapps.Components.Utility.EmailMessage.ID">
            <summary>
            Gets or sets the identity of the message
            </summary>
        </member>
        <member name="P:net.vieapps.Components.Utility.EmailMessage.CorrelationID">
            <summary>
            Gets or sets the correlation identity of the message
            </summary>
        </member>
        <member name="P:net.vieapps.Components.Utility.EmailMessage.SendingTime">
            <summary>
            Gets or sets time to start to send this message via email
            </summary>
            <remarks>
            Set a specifict time to tell mailer send this message from this time
            </remarks>
        </member>
        <member name="M:net.vieapps.Components.Utility.EmailMessage.Load(System.String)">
            <summary>
            Loads message from file and deserialize as object
            </summary>
            <param name="filePath">The full path to a file that contains the encrypted message</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.EmailMessage.LoadAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Loads message from file and deserialize as object
            </summary>
            <param name="filePath">The full path to a file that contains the encrypted message</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.EmailMessage.Save(net.vieapps.Components.Utility.EmailMessage,System.String)">
            <summary>
            Serializes and saves message into file
            </summary>
            <param name="message">The message</param>
            <param name="directory">The path to a directory that stores the queue of messages</param>
        </member>
        <member name="M:net.vieapps.Components.Utility.EmailMessage.SaveAsync(net.vieapps.Components.Utility.EmailMessage,System.String,System.Threading.CancellationToken)">
            <summary>
            Serializes and saves message into file
            </summary>
            <param name="message">The message</param>
            <param name="directory">The path to a directory that stores the queue of messages</param>
            <param name="cancellationToken">The cancellation token</param>
        </member>
        <member name="P:net.vieapps.Components.Utility.EmailMessage.Encrypted">
            <summary>
            Gets the string that presents the encrypted messages
            </summary>
        </member>
        <member name="T:net.vieapps.Components.Utility.WebHookMessage">
            <summary>
            Presents a web-hook message
            </summary>
        </member>
        <member name="M:net.vieapps.Components.Utility.WebHookMessage.#ctor">
            <summary>
            Initializes a new web-hook message
            </summary>
        </member>
        <member name="M:net.vieapps.Components.Utility.WebHookMessage.#ctor(System.String)">
            <summary>
            Initializes a new web-hook message
            </summary>
            <param name="encryptedMessage">The encrypted message</param>
        </member>
        <member name="P:net.vieapps.Components.Utility.WebHookMessage.EndpointURL">
            <summary>
            Gets or Sets the url of webhook's endpoint
            </summary>
        </member>
        <member name="P:net.vieapps.Components.Utility.WebHookMessage.Body">
            <summary>
            Gets or Sets the body of the webhook message
            </summary>
        </member>
        <member name="P:net.vieapps.Components.Utility.WebHookMessage.Header">
            <summary>
            Gets or Sets header of webhook message
            </summary>
        </member>
        <member name="P:net.vieapps.Components.Utility.WebHookMessage.Query">
            <summary>
            Gets or Sets query-string of webhook message
            </summary>
        </member>
        <member name="P:net.vieapps.Components.Utility.WebHookMessage.ID">
            <summary>
            Gets or sets identity of the message
            </summary>
        </member>
        <member name="P:net.vieapps.Components.Utility.WebHookMessage.CorrelationID">
            <summary>
            Gets or sets the correlation identity of the message
            </summary>
        </member>
        <member name="P:net.vieapps.Components.Utility.WebHookMessage.SendingTime">
            <summary>
            Gets or sets time to start to send this message
            </summary>
        </member>
        <member name="M:net.vieapps.Components.Utility.WebHookMessage.Load(System.String)">
            <summary>
            Loads message from file and deserialize as object
            </summary>
            <param name="filePath">The full path to a file that contains the encrypted message</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.WebHookMessage.LoadAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Loads message from file and deserialize as object
            </summary>
            <param name="filePath">The full path to a file that contains the encrypted message</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.WebHookMessage.Save(net.vieapps.Components.Utility.WebHookMessage,System.String)">
            <summary>
            Serializes and saves message into file
            </summary>
            <param name="message">The message</param>
            <param name="directory">The path to a directory that stores the queue of messages</param>
        </member>
        <member name="M:net.vieapps.Components.Utility.WebHookMessage.SaveAsync(net.vieapps.Components.Utility.WebHookMessage,System.String,System.Threading.CancellationToken)">
            <summary>
            Serializes and saves message into file
            </summary>
            <param name="message">The message</param>
            <param name="directory">The path to a directory that stores the queue of messages</param>
            <param name="cancellationToken">The cancellation token</param>
        </member>
        <member name="P:net.vieapps.Components.Utility.WebHookMessage.Encrypted">
            <summary>
            Gets the string that presents the encrypted messages
            </summary>
        </member>
        <member name="T:net.vieapps.Components.Utility.MessageService">
            <summary>
            Collection of global methods for sending a message (email and web hook)
            </summary>
        </member>
        <member name="P:net.vieapps.Components.Utility.MessageService.HarmfulDomains">
            <summary>
            Gets the collection of harmful domains need to prevent while sending email messages
            </summary>
        </member>
        <member name="M:net.vieapps.Components.Utility.MessageService.GetMailAddress(System.String,System.Boolean)">
            <summary>
            Prepares a valid email address
            </summary>
            <param name="emailAddress">The string that presents information of an email adress before validating</param>
            <param name="convertNameToANSI">true to convert display name as ANSI</param>
            <returns><see cref="T:System.Net.Mail.MailAddress">MailAddress</see> object that contains valid email address</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.MessageService.GetDomain(System.String)">
            <summary>
            Gets the domain name from the email address
            </summary>
            <param name="emailAddress"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.MessageService.GetMailMessage(System.Net.Mail.MailAddress,System.Net.Mail.MailAddress,System.Collections.Generic.IEnumerable{System.Net.Mail.MailAddress},System.Collections.Generic.IEnumerable{System.Net.Mail.MailAddress},System.Collections.Generic.IEnumerable{System.Net.Mail.MailAddress},System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Net.Mail.MailPriority,System.Boolean,System.Text.Encoding,System.String)">
            <summary>
            Gets an e-mail message
            </summary>
            <param name="fromAddress">Sender address</param>
            <param name="replyToAddress">Address will be replied to</param>
            <param name="toAddresses">Collection of recipients</param>
            <param name="ccAddresses">Collection of CC recipients</param>
            <param name="bccAddresses">Collection of BCC recipients</param>
            <param name="subject">The message subject</param>
            <param name="body">The message body</param>
            <param name="attachments">Collection of attachment files (means the collection of files with full path)</param>
            <param name="footer">The additional footer (will be placed at the bottom of the body)</param>
            <param name="priority">The priority</param>
            <param name="isBodyHtml">true if the message body is HTML formated</param>
            <param name="encoding">Encoding of subject and body message</param>
            <param name="mailer">The name of mailer agent (means 'x-mailer' header)</param>
        </member>
        <member name="M:net.vieapps.Components.Utility.MessageService.GetMailMessage(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Net.Mail.MailPriority,System.Boolean,System.Text.Encoding,System.String)">
            <summary>
            Gets an e-mail message
            </summary>
            <param name="from">Sender name and e-mail address</param>
            <param name="replyTo">Address will be replied to</param>
            <param name="to">Recipients, seperated multiple by semi-colon (;)</param>
            <param name="cc">CC recipients, seperated multiple by semi-colon (;)</param>
            <param name="bcc">BCC recipients, seperated multiple by semi-colon (;)</param>
            <param name="subject">The message subject</param>
            <param name="body">The message body</param>
            <param name="attachment">The full path to an attachment file</param>
            <param name="footer">The additional footer (will be placed at the bottom of the body)</param>
            <param name="priority">The priority</param>
            <param name="isBodyHtml">true if the message body is HTML formated</param>
            <param name="encoding">Encoding of subject and body message</param>
            <param name="mailer">The name of mailer agent (means 'x-mailer' header)</param>
        </member>
        <member name="M:net.vieapps.Components.Utility.MessageService.Normalize(System.Net.Mail.MailMessage)">
            <summary>
            Normalizes the email message
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.MessageService.GetSmtpClient(System.String,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Gets the Smtp client for sending email messages
            </summary>
            <param name="host">The host address of the SMTP server (IP or host name)</param>
            <param name="port">The port number of SMTP service on the SMTP server</param>
            <param name="user">The name of user for connecting with SMTP server</param>
            <param name="password">The password of user for connecting with SMTP server</param>
            <param name="enableSsl">true if the SMTP server requires SSL</param>
        </member>
        <member name="M:net.vieapps.Components.Utility.MessageService.GetSmtpClient(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Gets the SMTP client for sending email messages
            </summary>
            <param name="host">The host address of the SMTP server (IP or host name)</param>
            <param name="port">The port number of SMTP service on the SMTP server</param>
            <param name="user">The name of user for connecting with SMTP server</param>
            <param name="password">The password of user for connecting with SMTP server</param>
            <param name="enableSsl">true if the SMTP server requires SSL</param>
        </member>
        <member name="M:net.vieapps.Components.Utility.MessageService.SendMail(System.Net.Mail.SmtpClient,System.Net.Mail.MailMessage)">
            <summary>
            Sends an email message using a SMTP client
            </summary>
            <param name="smtp">The SMTP client for sending email</param>
            <param name="message">The email message</param>
        </member>
        <member name="M:net.vieapps.Components.Utility.MessageService.SendMailAsync(System.Net.Mail.SmtpClient,System.Net.Mail.MailMessage,System.Threading.CancellationToken)">
            <summary>
            Sends an email message using a SMTP client
            </summary>
            <param name="smtp">The SMTP client for sending email</param>
            <param name="message">The email message</param>
            <param name="cancellationToken">The cancellation token</param>
        </member>
        <member name="M:net.vieapps.Components.Utility.MessageService.SendMail(System.Net.Mail.SmtpClient,System.Net.Mail.MailAddress,System.Net.Mail.MailAddress,System.Collections.Generic.IEnumerable{System.Net.Mail.MailAddress},System.Collections.Generic.IEnumerable{System.Net.Mail.MailAddress},System.Collections.Generic.IEnumerable{System.Net.Mail.MailAddress},System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Net.Mail.MailPriority,System.Boolean,System.Text.Encoding,System.String)">
            <summary>
            Sends an email message using a SMTP client
            </summary>
            <param name="smtp">The SMTP client for sending email</param>
            <param name="fromAddress">Sender address</param>
            <param name="replyToAddress">Address will be replied to</param>
            <param name="toAddresses">Collection of recipients</param>
            <param name="ccAddresses">Collection of CC recipients</param>
            <param name="bccAddresses">Collection of BCC recipients</param>
            <param name="subject">The message subject</param>
            <param name="body">The message body</param>
            <param name="attachments">Collection of attachment files (means the collection of files with full path)</param>
            <param name="footer">The additional footer (will be placed at the bottom of the body)</param>
            <param name="priority">The priority</param>
            <param name="isBodyHtml">true if the message body is HTML formated</param>
            <param name="encoding">Encoding of subject and body message</param>
            <param name="mailer">The name of mailer agent (means 'x-mailer' header)</param>
        </member>
        <member name="M:net.vieapps.Components.Utility.MessageService.SendMailAsync(System.Net.Mail.SmtpClient,System.Net.Mail.MailAddress,System.Net.Mail.MailAddress,System.Collections.Generic.IEnumerable{System.Net.Mail.MailAddress},System.Collections.Generic.IEnumerable{System.Net.Mail.MailAddress},System.Collections.Generic.IEnumerable{System.Net.Mail.MailAddress},System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Net.Mail.MailPriority,System.Boolean,System.Text.Encoding,System.String,System.Threading.CancellationToken)">
            <summary>
            Sends an email message using a SMTP client
            </summary>
            <param name="smtp">The SMTP client for sending email</param>
            <param name="fromAddress">Sender address</param>
            <param name="replyToAddress">Address will be replied to</param>
            <param name="toAddresses">Collection of recipients</param>
            <param name="ccAddresses">Collection of CC recipients</param>
            <param name="bccAddresses">Collection of BCC recipients</param>
            <param name="subject">The message subject</param>
            <param name="body">The message body</param>
            <param name="attachments">Collection of attachment files (means the collection of files with full path)</param>
            <param name="footer">The additional footer (will be placed at the bottom of the body)</param>
            <param name="priority">The priority</param>
            <param name="isHtmlFormat">true if the message body is HTML formated</param>
            <param name="encoding">Encoding of subject and body message</param>
            <param name="mailer">The name of mailer agent (means 'x-mailer' header)</param>
            <param name="cancellationToken">The cancellation token</param>
        </member>
        <member name="M:net.vieapps.Components.Utility.MessageService.SendMail(System.Net.Mail.MailAddress,System.Net.Mail.MailAddress,System.Collections.Generic.IEnumerable{System.Net.Mail.MailAddress},System.Collections.Generic.IEnumerable{System.Net.Mail.MailAddress},System.Collections.Generic.IEnumerable{System.Net.Mail.MailAddress},System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Net.Mail.MailPriority,System.Boolean,System.Text.Encoding,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Sends an email message using the default SMTP client
            </summary>
            <param name="fromAddress">Sender address</param>
            <param name="replyToAddress">Address will be replied to</param>
            <param name="toAddresses">Collection of recipients</param>
            <param name="ccAddresses">Collection of CC recipients</param>
            <param name="bccAddresses">Collection of BCC recipients</param>
            <param name="subject">The message subject</param>
            <param name="body">The message body</param>
            <param name="attachments">Collection of attachment files (means the collection of files with full path)</param>
            <param name="footer">The additional footer (will be placed at the bottom of the body)</param>
            <param name="priority">The priority</param>
            <param name="isBodyHtml">true if the message body is HTML formated</param>
            <param name="encoding">Encoding of subject and body message</param>
            <param name="mailer">The name of mailer agent (means 'x-mailer' header)</param>
            <param name="smtpServerHost">The host address of the SMTP server (IP or host name)</param>
            <param name="smtpServerPort">The port number of SMTP service on the SMTP server</param>
            <param name="smtpServerUser">The name of user for connecting with SMTP server</param>
            <param name="smtpServerPassword">The password of user for connecting with SMTP server</param>
            <param name="smtpServerEnableSsl">true if the SMTP server requires SSL</param>
        </member>
        <member name="M:net.vieapps.Components.Utility.MessageService.SendMailAsync(System.Net.Mail.MailAddress,System.Net.Mail.MailAddress,System.Collections.Generic.IEnumerable{System.Net.Mail.MailAddress},System.Collections.Generic.IEnumerable{System.Net.Mail.MailAddress},System.Collections.Generic.IEnumerable{System.Net.Mail.MailAddress},System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Net.Mail.MailPriority,System.Boolean,System.Text.Encoding,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Sends an email message using the default SMTP client
            </summary>
            <param name="fromAddress">Sender address</param>
            <param name="replyToAddress">Address will be replied to</param>
            <param name="toAddresses">Collection of recipients</param>
            <param name="ccAddresses">Collection of CC recipients</param>
            <param name="bccAddresses">Collection of BCC recipients</param>
            <param name="subject">The message subject</param>
            <param name="body">The message body</param>
            <param name="attachments">Collection of attachment files (means the collection of files with full path)</param>
            <param name="footer">The additional footer (will be placed at the bottom of the body)</param>
            <param name="priority">The priority</param>
            <param name="isBodyHtml">true if the message body is HTML formated</param>
            <param name="encoding">Encoding of subject and body message</param>
            <param name="mailer">The name of mailer agent (means 'x-mailer' header)</param>
            <param name="smtpServerHost">The host address of the SMTP server (IP or host name)</param>
            <param name="smtpServerPort">The port number of SMTP service on the SMTP server</param>
            <param name="smtpServerUser">The name of user for connecting with SMTP server</param>
            <param name="smtpServerPassword">The password of user for connecting with SMTP server</param>
            <param name="smtpServerEnableSsl">true if the SMTP server requires SSL</param>
            <param name="cancellationToken">The cancellation token</param>
        </member>
        <member name="M:net.vieapps.Components.Utility.MessageService.SendMail(System.Net.Mail.SmtpClient,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Net.Mail.MailPriority,System.Boolean,System.Text.Encoding,System.String)">
            <summary>
            Sends an email message using a SMTP client
            </summary>
            <param name="smtp">The SMTP client for sending email</param>
            <param name="from">Sender name and e-mail address</param>
            <param name="replyTo">Address will be replied to</param>
            <param name="to">Recipients, seperated multiple by semi-colon (;)</param>
            <param name="cc">CC recipients, seperated multiple by semi-colon (;)</param>
            <param name="bcc">BCC recipients, seperated multiple by semi-colon (;)</param>
            <param name="subject">The message subject</param>
            <param name="body">The message body</param>
            <param name="attachment">The full path to an attachment file</param>
            <param name="footer">The additional footer (will be placed at the bottom of the body)</param>
            <param name="priority">The priority</param>
            <param name="isBodyHtml">true if the message body is HTML formated</param>
            <param name="encoding">Encoding of subject and body message</param>
            <param name="mailer">The name of mailer agent (means 'x-mailer' header)</param>
        </member>
        <member name="M:net.vieapps.Components.Utility.MessageService.SendMailAsync(System.Net.Mail.SmtpClient,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Net.Mail.MailPriority,System.Boolean,System.Text.Encoding,System.String,System.Threading.CancellationToken)">
            <summary>
            Sends an email message using a SMTP client
            </summary>
            <param name="smtp">The SMTP client for sending email</param>
            <param name="from">Sender name and e-mail address</param>
            <param name="replyTo">Address will be replied to</param>
            <param name="to">Recipients, seperated multiple by semi-colon (;)</param>
            <param name="cc">CC recipients, seperated multiple by semi-colon (;)</param>
            <param name="bcc">BCC recipients, seperated multiple by semi-colon (;)</param>
            <param name="subject">The message subject</param>
            <param name="body">The message body</param>
            <param name="attachment">The full path to an attachment file</param>
            <param name="footer">The additional footer (will be placed at the bottom of the body)</param>
            <param name="priority">The priority</param>
            <param name="isBodyHtml">true if the message body is HTML formated</param>
            <param name="encoding">Encoding of subject and body message</param>
            <param name="mailer">The name of mailer agent (means 'x-mailer' header)</param>
            <param name="cancellationToken">The cancellation token</param>
        </member>
        <member name="M:net.vieapps.Components.Utility.MessageService.SendMail(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Net.Mail.MailPriority,System.Boolean,System.Text.Encoding,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Sends an email message using the default SMTP client
            </summary>
            <param name="from">Sender name and e-mail address</param>
            <param name="replyTo">Address will be replied to</param>
            <param name="to">Recipients, seperated multiple by semi-colon (;)</param>
            <param name="cc">CC recipients, seperated multiple by semi-colon (;)</param>
            <param name="bcc">BCC recipients, seperated multiple by semi-colon (;)</param>
            <param name="subject">The message subject</param>
            <param name="body">The message body</param>
            <param name="attachment">The full path to an attachment file</param>
            <param name="footer">The additional footer (will be placed at the bottom of the body)</param>
            <param name="priority">The priority</param>
            <param name="isBodyHtml">true if the message body is HTML formated</param>
            <param name="encoding">Encoding of subject and body message</param>
            <param name="mailer">The name of mailer agent (means 'x-mailer' header)</param>
            <param name="smtpServerHost">The host address of the SMTP server (IP or host name)</param>
            <param name="smtpServerPort">The port number of SMTP service on the SMTP server</param>
            <param name="smtpServerUser">The name of user for connecting with SMTP server</param>
            <param name="smtpServerPassword">The password of user for connecting with SMTP server</param>
            <param name="smtpServerEnableSsl">true if the SMTP server requires SSL</param>
        </member>
        <member name="M:net.vieapps.Components.Utility.MessageService.SendMailAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Net.Mail.MailPriority,System.Boolean,System.Text.Encoding,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Sends an email message using the default SMTP client
            </summary>
            <param name="from">Sender name and e-mail address</param>
            <param name="replyTo">Address will be replied to</param>
            <param name="to">Recipients, seperated multiple by semi-colon (;)</param>
            <param name="cc">CC recipients, seperated multiple by semi-colon (;)</param>
            <param name="bcc">BCC recipients, seperated multiple by semi-colon (;)</param>
            <param name="subject">The message subject</param>
            <param name="body">The message body</param>
            <param name="attachment">The full path to an attachment file</param>
            <param name="footer">The additional footer (will be placed at the bottom of the body)</param>
            <param name="priority">The priority</param>
            <param name="isBodyHtml">true if the message body is HTML formated</param>
            <param name="encoding">Encoding of subject and body message</param>
            <param name="mailer">The name of mailer agent (means 'x-mailer' header)</param>
            <param name="smtpServerHost">The host address of the SMTP server (IP or host name)</param>
            <param name="smtpServerPort">The port number of SMTP service on the SMTP server</param>
            <param name="smtpServerUser">The name of user for connecting with SMTP server</param>
            <param name="smtpServerPassword">The password of user for connecting with SMTP server</param>
            <param name="smtpServerEnableSsl">true if the SMTP server requires SSL</param>
            <param name="cancellationToken">The cancellation token</param>
        </member>
        <member name="M:net.vieapps.Components.Utility.MessageService.SendMails(System.Net.Mail.SmtpClient,System.Collections.Generic.IEnumerable{System.Net.Mail.MailMessage})">
            <summary>
            Sends the collection of email messages using a SMTP client
            </summary>
            <param name="smtp">The SMTP client for sending email</param>
            <param name="messages">The collection of email messages</param>
        </member>
        <member name="M:net.vieapps.Components.Utility.MessageService.SendMailsAsync(System.Net.Mail.SmtpClient,System.Collections.Generic.IEnumerable{System.Net.Mail.MailMessage},System.Threading.CancellationToken)">
            <summary>
            Sends the collection of email messages using a SMTP client
            </summary>
            <param name="smtp"></param>
            <param name="messages"></param>
            <param name="cancellationToken">The cancellation token</param>
        </member>
        <member name="M:net.vieapps.Components.Utility.MessageService.SendMessage(net.vieapps.Components.Utility.EmailMessage)">
            <summary>
            Sends this email message
            </summary>
            <param name="message">The email message</param>
        </member>
        <member name="M:net.vieapps.Components.Utility.MessageService.SendMessageAsync(net.vieapps.Components.Utility.EmailMessage,System.Threading.CancellationToken)">
            <summary>
            Sends this email message
            </summary>
            <param name="message">The email message</param>
            <param name="cancellationToken">The cancellation token</param>
        </member>
        <member name="M:net.vieapps.Components.Utility.MessageService.Normalize(net.vieapps.Components.Utility.WebHookMessage,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Normalizes the web-hook message
            </summary>
            <param name="message">The web-hook message</param>
            <param name="signAlgorithm">The HMAC algorithm to sign the body with the specified key (md5, sha1, sha256, sha384, sha512, ripemd/ripemd160, blake128, blake/blake256, blake384, blake512)</param>
            <param name="signKey">The key that use to sign</param>
            <param name="signatureName">The name of the signature parameter, default is combination of algorithm and the string 'Signature', ex: HmacSha256Signature</param>
            <param name="signatureAsHex">true to use signature as hex, false to use as Base64</param>
            <param name="signatureInQuery">true to place the signature in query string, false to place in header, default is false</param>
            <param name="additionalQuery">The additional query string</param>
            <param name="additionalHeader">The additional header</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.MessageService.SendMessageAsync(net.vieapps.Components.Utility.WebHookMessage,System.String,System.Net.WebProxy,System.Threading.CancellationToken)">
            <summary>
            Sends a web-hook message (means post a JSON document to a specified URL)
            </summary>
            <param name="message">The well-formed webhook message to send</param>
            <param name="agent">The additional name to add to user agent string, default value is 'VIEApps NGX WebHook Sender'</param>
            <param name="proxy">The proxy to use</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.MessageService.SendMessageAsync(net.vieapps.Components.Utility.WebHookMessage,System.Threading.CancellationToken)">
            <summary>
            Sends a web-hook message (means post a JSON document to a specified URL)
            </summary>
            <param name="message">The well-formed webhook message to send</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.MessageService.SendMessage(net.vieapps.Components.Utility.WebHookMessage,System.String,System.Net.WebProxy,System.Threading.CancellationToken)">
            <summary>
            Sends a web-hook message (means post a JSON document to a specified URL)
            </summary>
            <param name="message">The well-formed webhook message to send</param>
            <param name="agent">The additional name to add to user agent string, default value is 'VIEApps NGX WebHook Sender'</param>
            <param name="proxy">The proxy to use</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.MessageService.SendMessage(net.vieapps.Components.Utility.WebHookMessage,System.Threading.CancellationToken)">
            <summary>
            Sends a web-hook message (means post a JSON document to a specified URL)
            </summary>
            <param name="message">The well-formed webhook message to send</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:net.vieapps.Components.Utility.ObjectService">
            <summary>
            Static servicing methods for working with objects
            </summary>
        </member>
        <member name="T:net.vieapps.Components.Utility.ObjectService.AttributeInfo">
            <summary>
            Presents information of an attribute of an objects
            </summary>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.AttributeInfo.#ctor">
            <summary>
            Initializes information of an objects' attribute
            </summary>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.AttributeInfo.#ctor(System.Reflection.MemberInfo)">
            <summary>
            Initializes information of an objects' attribute
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.AttributeInfo.#ctor(System.String,System.Reflection.MemberInfo)">
            <summary>
            Initializes information of an objects' attribute
            </summary>
            <param name="name"></param>
            <param name="info"></param>
        </member>
        <member name="P:net.vieapps.Components.Utility.ObjectService.AttributeInfo.Name">
            <summary>
            Gets the name
            </summary>
        </member>
        <member name="P:net.vieapps.Components.Utility.ObjectService.AttributeInfo.Info">
            <summary>
            Gets the information
            </summary>
        </member>
        <member name="P:net.vieapps.Components.Utility.ObjectService.AttributeInfo.IsPublic">
            <summary>
            Specifies this attribute is public (everyone can access)
            </summary>
        </member>
        <member name="P:net.vieapps.Components.Utility.ObjectService.AttributeInfo.CanRead">
            <summary>
            Specifies this attribute can be read
            </summary>
        </member>
        <member name="P:net.vieapps.Components.Utility.ObjectService.AttributeInfo.CanWrite">
            <summary>
            Specifies this attribute can be written
            </summary>
        </member>
        <member name="P:net.vieapps.Components.Utility.ObjectService.AttributeInfo.Type">
            <summary>
            Gets the type of the attribute
            </summary>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.GetProperties(System.Type,System.Func{net.vieapps.Components.Utility.ObjectService.AttributeInfo,System.Boolean},System.Boolean)">
            <summary>
            Gets the collection of public properties of the type
            </summary>
            <param name="type">The type for processing</param>
            <param name="predicate">The predicate</param>
            <param name="allowDuplicatedName">true to allow duplicated name</param>
            <returns>Collection of public properties</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.GetProperties``1(System.Func{net.vieapps.Components.Utility.ObjectService.AttributeInfo,System.Boolean},System.Boolean)">
            <summary>
            Gets the collection of public properties of the object's type
            </summary>
            <param name="predicate">The predicate</param>
            <param name="allowDuplicatedName">true to allow duplicated name</param>
            <returns>Collection of public properties</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.GetProperties(System.Object,System.Func{net.vieapps.Components.Utility.ObjectService.AttributeInfo,System.Boolean},System.Boolean)">
            <summary>
            Gets the collection of public properties of the object's type
            </summary>
            <param name="object">The object for processing</param>
            <param name="predicate">The predicate</param>
            <param name="allowDuplicatedName">true to allow duplicated name</param>
            <returns>Collection of public properties</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.GetPublicAttributes(System.Type,System.Func{net.vieapps.Components.Utility.ObjectService.AttributeInfo,System.Boolean},System.Boolean)">
            <summary>
            Gets the collection of public attributes of this type
            </summary>
            <param name="type">The type for processing</param>
            <param name="predicate">The predicate</param>
            <param name="allowDuplicatedName">true to allow duplicated name</param>
            <returns>Collection of public attributes</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.GetPublicAttributes(System.Object,System.Func{net.vieapps.Components.Utility.ObjectService.AttributeInfo,System.Boolean},System.Boolean)">
            <summary>
            Gets the collection of public attributes of the object's type
            </summary>
            <param name="object">The object for processing</param>
            <param name="predicate">The predicate</param>
            <param name="allowDuplicatedName">true to allow duplicated name</param>
            <returns>Collection of public attributes</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.GetFields(System.Type,System.Func{net.vieapps.Components.Utility.ObjectService.AttributeInfo,System.Boolean})">
            <summary>
            Gets the collection of fields (private attributes) of the type
            </summary>
            <param name="type">The type for processing</param>
            <param name="predicate">The predicate</param>
            <returns>Collection of private fields/attributes</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.GetFields``1(System.Func{net.vieapps.Components.Utility.ObjectService.AttributeInfo,System.Boolean})">
            <summary>
            Gets the collection of fields (private attributes) of the object's type
            </summary>
            <param name="predicate">The predicate</param>
            <returns>Collection of private fields/attributes</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.GetFields(System.Object,System.Func{net.vieapps.Components.Utility.ObjectService.AttributeInfo,System.Boolean})">
            <summary>
            Gets the collection of fields (private attributes) of the object's type
            </summary>
            <param name="object">The object for processing</param>
            <param name="predicate">The predicate</param>
            <returns>Collection of private fields/attributes</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.GetPrivateAttributes(System.Type,System.Func{net.vieapps.Components.Utility.ObjectService.AttributeInfo,System.Boolean})">
            <summary>
            Gets the collection of private attributes of this type
            </summary>
            <param name="type">The type for processing</param>
            <param name="predicate">The predicate</param>
            <returns>Collection of private attributes</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.GetPrivateAttributes(System.Object,System.Func{net.vieapps.Components.Utility.ObjectService.AttributeInfo,System.Boolean})">
            <summary>
            Gets the collection of private attributes of this object type
            </summary>
            <param name="object">The object for processing</param>
            <param name="predicate">The predicate</param>
            <returns>Collection of private attributes</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.GetAttributes(System.Type,System.Func{net.vieapps.Components.Utility.ObjectService.AttributeInfo,System.Boolean})">
            <summary>
            Gets the collection of attributes of the type (means contains all public and private attributes)
            </summary>
            <param name="type">The type for processing</param>
            <param name="predicate">The predicate</param>
            <returns>Collection of all attributes</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.GetAttributes``1(System.Func{net.vieapps.Components.Utility.ObjectService.AttributeInfo,System.Boolean})">
            <summary>
            Gets the collection of attributes of the object's type (means contains all public and private attributes)
            </summary>
            <param name="predicate">The predicate</param>
            <returns>Collection of attributes</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.GetAttributes(System.Object,System.Func{net.vieapps.Components.Utility.ObjectService.AttributeInfo,System.Boolean})">
            <summary>
            Gets the collection of attributes of the object's type (means contains all public and private attributes)
            </summary>
            <param name="object">The object for processing</param>
            <param name="predicate">The predicate</param>
            <returns>Collection of attributes</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.GetTypeName(System.Type,System.Boolean)">
            <summary>
            Get the full type name (type name with assembly name) of this type
            </summary>
            <param name="type"></param>
            <param name="justName">true to get only name (means last element in full namespace)</param>
            <returns>The string that presents type name</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.GetTypeName(System.Object,System.Boolean)">
            <summary>
            Get the full type name (type name with assembly name) of this object
            </summary>
            <param name="object"></param>
            <param name="justName">true to get only name (means last element in full namespace)</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.IsDefined``1(System.Type,System.Boolean)">
            <summary>
            Gets the state that indicates the custom attribute is defined or not
            </summary>
            <param name="type">The type for working with</param>
            <param name="inherit">true to search this member's inheritance chain to find the attributes</param>
            <returns>The first custom attribute</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.IsDefined``1(net.vieapps.Components.Utility.ObjectService.AttributeInfo,System.Boolean)">
            <summary>
            Gets the state that indicates the custom attribute is defined or not
            </summary>
            <param name="attribute">The attribute for working with</param>
            <param name="inherit">true to search this member's inheritance chain to find the attributes</param>
            <returns>The first custom attribute</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.GetCustomAttributes``1(System.Type,System.Boolean)">
            <summary>
            Gets the collection of custom attributes
            </summary>
            <param name="type">The type for working with</param>
            <param name="inherit">true to search this member's inheritance chain to find the attributes (default is true)</param>
            <returns>The collection of custom attributes</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.GetCustomAttribute``1(System.Type,System.Boolean)">
            <summary>
            Gets the first custom attribute
            </summary>
            <param name="type">The type for working with</param>
            <param name="inherit">true to search this member's inheritance chain to find the attributes (default is true)</param>
            <returns>The first custom attribute</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.GetCustomAttributes``1(net.vieapps.Components.Utility.ObjectService.AttributeInfo,System.Boolean)">
            <summary>
            Gets the collection of custom attributes
            </summary>
            <param name="attribute">The attribute for working with</param>
            <param name="inherit">true to search this member's inheritance chain to find the attributes (default is true)</param>
            <returns>The collection of custom attributes</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.GetCustomAttribute``1(net.vieapps.Components.Utility.ObjectService.AttributeInfo,System.Boolean)">
            <summary>
            Gets the first custom attribute
            </summary>
            <param name="attribute">The attribute for working with</param>
            <param name="inherit">true to search this member's inheritance chain to find the attributes (default is true)</param>
            <returns>The first custom attribute</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.IsPrimitiveType(System.Type)">
            <summary>
            Gets the state to determines the type is primitive or not
            </summary>
            <param name="type">Type for checking</param>
            <returns>true if type is primitive</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.IsPrimitiveType(net.vieapps.Components.Utility.ObjectService.AttributeInfo)">
            <summary>
            Gets the state to determines the attribute type is primitive or not
            </summary>
            <param name="attribute">The attribute for checking</param>
            <returns>true if type is numeric</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.IsStringType(System.Type)">
            <summary>
            Gets the state to determines the type is string or not
            </summary>
            <param name="type">Type for checking</param>
            <returns>true if type is string</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.IsStringType(net.vieapps.Components.Utility.ObjectService.AttributeInfo)">
            <summary>
            Gets the state to determines the attribute type is string or not
            </summary>
            <param name="attribute">The attribute for checking</param>
            <returns>true if type is numeric</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.IsDateTimeType(System.Type)">
            <summary>
            Gets the state to determines the type is date-time or not
            </summary>
            <param name="type">Type for checking</param>
            <returns>true if type is date-time</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.IsDateTimeType(net.vieapps.Components.Utility.ObjectService.AttributeInfo)">
            <summary>
            Gets the state to determines the attribute type is date-time or not
            </summary>
            <param name="attribute">The attribute for checking</param>
            <returns>true if type is numeric</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.IsIntegralType(System.Type)">
            <summary>
            Gets the state to determines the type is integral numeric or not
            </summary>
            <param name="type">Type for checking</param>
            <returns>true if type is integral numeric</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.IsIntegralType(net.vieapps.Components.Utility.ObjectService.AttributeInfo)">
            <summary>
            Gets the state to determines the attribute type is integral numeric or not
            </summary>
            <param name="attribute">The attribute for checking</param>
            <returns>true if type is numeric</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.IsFloatingPointType(System.Type)">
            <summary>
            Gets the state to determines the type is floating numeric or not
            </summary>
            <param name="type">Type for checking</param>
            <returns>true if type is floating numeric</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.IsFloatingPointType(net.vieapps.Components.Utility.ObjectService.AttributeInfo)">
            <summary>
            Gets the state to determines the attribute type is floating numeric or not
            </summary>
            <param name="attribute">The attribute for checking</param>
            <returns>true if type is numeric</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.IsNumericType(System.Type)">
            <summary>
            Gets the state to determines the type is numeric or not
            </summary>
            <param name="type">Type for checking</param>
            <returns>true if type is numeric</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.IsNumericType(net.vieapps.Components.Utility.ObjectService.AttributeInfo)">
            <summary>
            Gets the state to determines the attribute type is numeric or not
            </summary>
            <param name="attribute">The attribute for checking</param>
            <returns>true if type is numeric</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.IsClassType(System.Type)">
            <summary>
            Gets the state to determines the type is a reference of a class or not
            </summary>
            <param name="type">Type for checking</param>
            <returns>true if type is numeric</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.IsClassType(net.vieapps.Components.Utility.ObjectService.AttributeInfo)">
            <summary>
            Gets the state to determines the attribute type is a reference of a class or not
            </summary>
            <param name="attribute">The attribute for checking</param>
            <returns>true if type is numeric</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.IsEnum(net.vieapps.Components.Utility.ObjectService.AttributeInfo)">
            <summary>
            Gets the state to determines the attribute type is enumeration or not
            </summary>
            <param name="attribute">The attribute for checking</param>
            <returns>true if type is numeric</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.IsSerializable(net.vieapps.Components.Utility.ObjectService.AttributeInfo)">
            <summary>
            Gets the state to determines the attribute type is serializable (got 'Serializable' attribute) or not
            </summary>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.IsSerializable(System.Object)">
            <summary>
            Gets the state to determines the object is serializable (got 'Serializable' attribute) or not
            </summary>
            <param name="object"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.GetNullableType(System.Type)">
            <summary>
            Gets the nullable type from this type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.GetNullableType``1">
            <summary>
            Gets the nullable type from this type
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.IsNullable(System.Type)">
            <summary>
            Gets the state to determines this type is nullable or not
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.IsNullable(net.vieapps.Components.Utility.ObjectService.AttributeInfo)">
            <summary>
            Gets the state to determines this attribute is nullable or not
            </summary>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.IsNullable``1">
            <summary>
            Gets the state to determines this type is nullable or not
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.IsNullable``1(``0)">
            <summary>
            Gets the state to determines this object is nullable or not
            </summary>
            <typeparam name="T"></typeparam>
            <param name="object"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.IsSubclassOfGeneric(System.Type,System.Type)">
            <summary>
            Gets the state to determines this type is sub-class of a generic type
            </summary>
            <param name="type">The type for checking</param>
            <param name="genericType">The generic type for checking</param>
            <returns>true if the checking type is sub-class of the generic type</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.GetGenericTypeArguments(System.Type)">
            <summary>
            Gets the generic type arguments of this type
            </summary>
            <param name="type">The type for processing</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.GetGenericTypeArguments(net.vieapps.Components.Utility.ObjectService.AttributeInfo)">
            <summary>
            Gets the generic type arguments of this attribute type
            </summary>
            <param name="attribute">The attribute for processing</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.GetGenericTypeArguments(System.Object)">
            <summary>
            Gets the generic type arguments of this object
            </summary>
            <param name="object">The type for processing</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.IsGenericList(System.Type)">
            <summary>
            Gets the state to determines the type is a generic list
            </summary>
            <param name="type">Type for checking</param>
            <returns>true if the type is a generic list; otherwise false.</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.IsGenericList(net.vieapps.Components.Utility.ObjectService.AttributeInfo)">
            <summary>
            Gets the state to determines the attribute type is a generic list
            </summary>
            <param name="attribute">Teh attribute for checking</param>
            <returns>true if the type is a generic list; otherwise false.</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.IsGenericList(System.Object)">
            <summary>
            Gets the state to determines the object's type is a generic list
            </summary>
            <param name="object">The object for checking type</param>
            <returns>true if the type of the object is a reference (or sub-class) of a generic list; otherwise false.</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.IsGenericHashSet(System.Type)">
            <summary>
            Gets the state to determines the type is a generic hash-set
            </summary>
            <param name="type">Type for checking</param>
            <returns>true if the type is a reference (or sub-class) of a generic hash-set; otherwise false.</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.IsGenericHashSet(net.vieapps.Components.Utility.ObjectService.AttributeInfo)">
            <summary>
            Gets the state to determines the attribute type is a generic hash-set
            </summary>
            <param name="attribute">Teh attribute for checking</param>
            <returns>true if the type is a generic list; otherwise false.</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.IsGenericHashSet(System.Object)">
            <summary>
            Gets the state to determines the object's type is a generic hash-set
            </summary>
            <param name="object">The object for checking type</param>
            <returns>true if the type of the object is a reference (or sub-class) of a generic hash-set; otherwise false.</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.IsGenericListOrHashSet(System.Type)">
            <summary>
            Gets the state to determines the type is a generic list or generic hash-set
            </summary>
            <param name="type">Type for checking</param>
            <returns>true if the type is a reference (or sub-class) of a generic list or generic hash-set; otherwise false.</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.IsGenericListOrHashSet(net.vieapps.Components.Utility.ObjectService.AttributeInfo)">
            <summary>
            Gets the state to determines the attribute type is a generic list or generic hash-set
            </summary>
            <param name="attribute">Teh attribute for checking</param>
            <returns>true if the type is a generic list; otherwise false.</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.IsGenericListOrHashSet(System.Object)">
            <summary>
            Gets the state to determines the object's type is generic list or generic hash-set
            </summary>
            <param name="object">The object for checking type</param>
            <returns>true if the type of the object is a reference (or sub-class) of a generic list or generic hash-set; otherwise false.</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.IsGenericDictionary(System.Type)">
            <summary>
            Gets the state to determines the type is reference of a generic dictionary
            </summary>
            <param name="type">Type for checking</param>
            <returns>true if the type is a reference (or sub-class) of a generic dictionary; otherwise false.</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.IsGenericDictionary(net.vieapps.Components.Utility.ObjectService.AttributeInfo)">
            <summary>
            Gets the state to determines the attribute type is a generic dictionary
            </summary>
            <param name="attribute">Teh attribute for checking</param>
            <returns>true if the type is a generic list; otherwise false.</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.IsGenericDictionary(System.Object)">
            <summary>
            Gets the state to determines the type of the object is reference of a generic dictionary
            </summary>
            <param name="object">The object for checking type</param>
            <returns>true if the type of the object is a reference (or sub-class) of a generic dictionary; otherwise false.</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.IsGenericCollection(System.Type)">
            <summary>
            Gets the state to determines the type is reference of a generic collection
            </summary>
            <param name="type">Type for checking</param>
            <returns>true if the type is sub-class of the generic collection class; otherwise false.</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.IsGenericCollection(net.vieapps.Components.Utility.ObjectService.AttributeInfo)">
            <summary>
            Gets the state to determines the attribute type is a generic collection
            </summary>
            <param name="attribute">Teh attribute for checking</param>
            <returns>true if the type is a generic list; otherwise false.</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.IsGenericCollection(System.Object)">
            <summary>
            Gets the state to determines the type of the object is reference of a generic collection
            </summary>
            <param name="object">The object for checking type</param>
            <returns>true if the type of the object is sub-class of the generic collection class; otherwise false.</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.IsGenericDictionaryOrCollection(System.Type)">
            <summary>
            Gets the state to determines the type is reference of a generic dictionary or a generic collection
            </summary>
            <param name="type">Type for checking</param>
            <returns>true if the type is sub-class of the generic collection class; otherwise false.</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.IsGenericDictionaryOrCollection(net.vieapps.Components.Utility.ObjectService.AttributeInfo)">
            <summary>
            Gets the state to determines the attribute type is a generic dictionary or a generic collection
            </summary>
            <param name="attribute">Teh attribute for checking</param>
            <returns>true if the type is a generic list; otherwise false.</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.IsGenericDictionaryOrCollection(System.Object)">
            <summary>
            Gets the state to determines the type of the object is reference of a generic dictionary or a generic collection
            </summary>
            <param name="object">The object for checking type</param>
            <returns>true if the type of the object is sub-class of the generic collection class; otherwise false.</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.IsICollection(System.Type)">
            <summary>
            Gets the state to determines the type is reference of a class that is sub-class of the <see cref="T:System.Collections.ICollection">ICollection</see> interface
            </summary>
            <param name="type">Type for checking</param>
            <returns>true if the type is reference of a class that is sub-class of the <see cref="T:System.Collections.ICollection">ICollection</see> interface; otherwise false.</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.IsICollection(net.vieapps.Components.Utility.ObjectService.AttributeInfo)">
            <summary>
            Gets the state to determines the attribute type is reference of a class that is sub-class of the <see cref="T:System.Collections.ICollection">ICollection</see> interface
            </summary>
            <param name="attribute">Teh attribute for checking</param>
            <returns>true if the type is a generic list; otherwise false.</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.IsICollection(System.Object)">
            <summary>
            Gets the state to determines the type of the object is reference of a class that is sub-class of the <see cref="T:System.Collections.ICollection">ICollection</see> interface
            </summary>
            <param name="object">The object for checking type</param>
            <returns>true if the type of the object is reference of a class that is sub-class of the <see cref="T:System.Collections.ICollection">ICollection</see> interface; otherwise false.</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.IsCollection(System.Type)">
            <summary>
            Gets the state to determines the type is reference (or sub-class) of the the <see cref="T:System.Collections.Specialized.Collection">Collection</see> class
            </summary>
            <param name="type">Type for checking</param>
            <returns>true if the type is is reference (or sub-class) of the the <see cref="T:System.Collections.Specialized.Collection">Collection</see> class; otherwise false.</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.IsCollection(net.vieapps.Components.Utility.ObjectService.AttributeInfo)">
            <summary>
            Gets the state to determines the attribute type is reference (or sub-class) of the the <see cref="T:System.Collections.Specialized.Collection">Collection</see> class
            </summary>
            <param name="attribute">Teh attribute for checking</param>
            <returns>true if the type is a generic list; otherwise false.</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.IsCollection(System.Object)">
            <summary>
            Gets the state to determines the type of the object is reference (or sub-class) of the the Collection class
            </summary>
            <param name="object">The object for checking type</param>
            <returns>true if the type of the object is is reference (or sub-class) of the the Collection class; otherwise false.</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.IsArray(net.vieapps.Components.Utility.ObjectService.AttributeInfo)">
            <summary>
            Gets the state to determines the attribute type is is array or not
            </summary>
            <param name="attribute">Teh attribute for checking</param>
            <returns>true if the type is a generic list; otherwise false.</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.IsArray(System.Object)">
            <summary>
            Gets the state to determines the object is array or not
            </summary>
            <param name="object">The object for checking type</param>
            <returns>true if the type of the object is is reference (or sub-class) of the the Collection class; otherwise false.</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.CreateInstance(System.Type)">
            <summary>
            Creates an instance of the specified type using a generated factory to avoid using Reflection
            </summary>
            <param name="type">The type to be created</param>
            <returns>The newly created instance</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.CreateInstance``1">
            <summary>
            Creates an instance of the specified type using a generated factory to avoid using Reflection.
            </summary>
            <typeparam name="T">The type to be created</typeparam>
            <returns>The newly created instance</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.CastAs(System.Object,System.Type)">
            <summary>
            Casts the object to other type
            </summary>
            <param name="object">The object to cast to other type</param>
            <param name="type">The type to cast to</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.CastAs``1(System.Object)">
            <summary>
            Casts the value to other type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="object">The object to cast to other type</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.SetAttributeValue(System.Object,System.String,System.Object)">
            <summary>
            Sets value of an attribute (public/private/static) of an object.
            </summary>
            <param name="object">The object need to get data from.</param>
            <param name="name">The string that presents the name of the attribute need to get.</param>
            <param name="value">The object that presents the value of the attribute need to set.</param>
            <returns>true if success, otherwise false</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.SetAttributeValue(System.Object,net.vieapps.Components.Utility.ObjectService.AttributeInfo,System.Object,System.Boolean)">
            <summary>
            Sets value of an attribute (public/private/static) of an object.
            </summary>
            <param name="object">The object need to get data from.</param>
            <param name="attribute">The object that presents information of the attribute need to get</param>
            <param name="value">The object that presents the value of the attribute need to set.</param>
            <param name="cast">true to cast the type of attribute</param>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.GetAttributeValue(System.Object,System.String)">
            <summary>
            Gets value of an attribute of an object.
            </summary>
            <param name="object">The object need to get data from.</param>
            <param name="name">The string that presents the name of the attribute need to get.</param>
            <returns>The object that presents data of object's attribute</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.GetAttributeValue``1(System.Object,System.String,``0)">
            <summary>
            Gets value of an attribute of an object.
            </summary>
            <typeparam name="T">The type of value to cast to</typeparam>
            <param name="object">The object need to get data from.</param>
            <param name="name">The string that presents the name of the attribute need to get.</param>
            <param name="default">The default value</param>
            <returns>The object that presents data of object's attribute</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.GetAttributeValue(System.Object,net.vieapps.Components.Utility.ObjectService.AttributeInfo)">
            <summary>
            Gets value of an attribute of an object.
            </summary>
            <param name="object">The object need to get data from</param>
            <param name="attribute">The object that presents information of the attribute need to get</param>
            <returns>The object that presents data of object's attribute</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.GetAttributeValue``1(System.Object,net.vieapps.Components.Utility.ObjectService.AttributeInfo,``0)">
            <summary>
            Gets value of an attribute of an object.
            </summary>
            <typeparam name="T">The type of value to cast to</typeparam>
            <param name="object">The object need to get data from</param>
            <param name="attribute">The object that presents information of the attribute need to get</param>
            <param name="default">The default value</param>
            <returns>The object that presents data of object's attribute</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.GetStaticObject(System.Type,System.String)">
            <summary>
            Gets a static object that specified by name
            </summary>
            <param name="type">The type of the static class that contains the static object</param>
            <param name="name">The name of the static object</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.GetStaticObject(System.String,System.String)">
            <summary>
            Gets a static object that specified by name
            </summary>
            <param name="class">The string that present the type of the static class that contains the static object</param>
            <param name="name">The name of the static object</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.TrimAll(System.Object)">
            <summary>
            Trims all string properties
            </summary>
            <param name="object"></param>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.TrimAll``1(``0)">
            <summary>
            Trims all string properties
            </summary>
            <typeparam name="T"></typeparam>
            <param name="object"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.CopyTo``1(``0,``0,System.Collections.Generic.HashSet{System.String},System.Action{``0},System.Action{System.Exception})">
            <summary>
            Copies data of the object to other object
            </summary>
            <param name="object">The object to get data from</param>
            <param name="destination">The destination object that will be copied to</param>
            <param name="excluded">The hash-set of excluded attributes</param>
            <param name="onCompleted">The action to run before completing the copy process</param>
            <param name="onError">The action to run when got any error</param>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.CopyFrom``1(``0,System.Object,System.Collections.Generic.HashSet{System.String},System.Action{``0},System.Action{System.Exception})">
            <summary>
            Copies data of the source object
            </summary>
            <param name="object"></param>
            <param name="source">Source object to copy data</param>
            <param name="excluded">The hash-set of excluded attributes</param>
            <param name="onCompleted">The action to run before completing the copy process</param>
            <param name="onError">The action to run when got any error</param>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.CopyFrom``1(``0,Newtonsoft.Json.Linq.JToken,System.Collections.Generic.HashSet{System.String},System.Action{``0},System.Action{System.Exception})">
            <summary>
            Copies data of the JSON object
            </summary>
            <param name="object"></param>
            <param name="json">JSON object to copy data</param>
            <param name="excluded">The hash-set of excluded attributes</param>
            <param name="onCompleted">The action to run before completing the copy process</param>
            <param name="onError">The action to run when got any error</param>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.CopyFrom``1(``0,System.Dynamic.ExpandoObject,System.Collections.Generic.HashSet{System.String},System.Action{``0},System.Action{System.Exception})">
            <summary>
            Copies data of the ExpandoObject object
            </summary>
            <param name="object"></param>
            <param name="expandoObject">The <see cref="T:System.Dynamic.ExpandoObject">ExpandoObject</see> object to copy data</param>
            <param name="excluded">The hash-set of excluded attributes</param>
            <param name="onCompleted">The action to run before completing the copy process</param>
            <param name="onError">The action to run when got any error</param>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.Copy``1(``0,System.Collections.Generic.HashSet{System.String},System.Action{``0},System.Action{System.Exception})">
            <summary>
            Creates new an instance of the object and copies data (from this current object)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="object"></param>
            <param name="excluded">The hash-set of excluded attributes</param>
            <param name="onCompleted">The action to run before completing the copy process</param>
            <param name="onError">The action to run when got any error</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.Copy``1(Newtonsoft.Json.Linq.JToken,System.Collections.Generic.HashSet{System.String},System.Action{``0},System.Action{System.Exception})">
            <summary>
            Creates new an instance of the object and copies data (from a JSON object)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json">The JSON object to copy data</param>
            <param name="excluded">The hash-set of excluded attributes</param>
            <param name="onCompleted">The action to run before completing the copy process</param>
            <param name="onError">The action to run when got any error</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.Copy``1(System.Dynamic.ExpandoObject,System.Collections.Generic.HashSet{System.String},System.Action{``0},System.Action{System.Exception})">
            <summary>
            Creates new an instance of the object and copies data (from an ExpandoObject object)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expandoObject">The ExpandoObject object to copy data</param>
            <param name="excluded">The hash-set of excluded attributes</param>
            <param name="onCompleted">The action to run before completing the copy process</param>
            <param name="onError">The action to run when got any error</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.Clone``1(``0,System.Action{``0},System.Action{System.Exception})">
            <summary>
            Clones the object (perform a deep copy of the object)
            </summary>
            <typeparam name="T">The type of object being copied</typeparam>
            <param name="object">The object instance to copy</param>
            <param name="onCompleted">The action to run before completing the clone process</param>
            <param name="onError">The action to run when got any error</param>
            <returns>The copied object.</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.ToJson(System.Xml.XmlNode,System.Action{Newtonsoft.Json.Linq.JObject})">
            <summary>
            Converts this XmlNode object to JSON object
            </summary>
            <param name="node">The XmlNode object to convert to JSON</param>
            <param name="onCompleted">The action to run when the conversion process is completed</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.ToJson(System.String,System.Action{Newtonsoft.Json.Linq.JToken})">
            <summary>
            Serializes this string to JSON object (with default settings of Json.NET Serializer)
            </summary>
            <param name="json">The JSON string to serialize to JSON object</param>
            <param name="onCompleted">The action to run when the conversion process is completed</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.ToJson``1(``0,System.Action{Newtonsoft.Json.Linq.JToken})">
            <summary>
            Serializes this object to JSON object (with default settings of Json.NET Serializer)
            </summary>
            <typeparam name="T">Type of the object</typeparam>
            <param name="object">The object to serialize to JSON</param>
            <param name="onCompleted">The action to run when the conversion process is completed</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.FromJson``1(Newtonsoft.Json.Linq.JToken,System.Boolean,System.Action{``0,Newtonsoft.Json.Linq.JToken})">
            <summary>
            Creates (Deserializes) an object from this JSON object
            </summary>
            <typeparam name="T">Type of the object</typeparam>
            <param name="json">The JSON object that contains information for deserializing</param>
            <param name="copy">true to create new instance and copy data; false to deserialize object</param>
            <param name="onCompleted">The action to run when the conversion process is completed</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.FromJson``1(System.String,System.Boolean,System.Action{``0,Newtonsoft.Json.Linq.JToken})">
            <summary>
            Creates (Deserializes) an object from this JSON object
            </summary>
            <typeparam name="T">Type of the object</typeparam>
            <param name="json">The JSON string that contains information for deserializing</param>
            <param name="copy">true to create new instance and copy data; false to deserialize object</param>
            <param name="onCompleted">The action to run when the conversion process is completed</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.Get``1(Newtonsoft.Json.Linq.JToken,System.String,``0)">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken">JToken</see> with the specified key converted to the specified type
            </summary>
            <typeparam name="T">The type to convert the token to</typeparam>
            <param name="json"></param>
            <param name="key">The token key</param>
            <param name="default">The default value</param>
            <returns>The converted token value</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.ToXml``1(``0,System.Action{System.Xml.Linq.XElement})">
            <summary>
            Serializes this object to XML object
            </summary>
            <typeparam name="T">Type of the object</typeparam>
            <param name="object"></param>
            <param name="onCompleted">The action to run when the conversion process is completed</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.ToXml(System.String,System.Action{System.Xml.Linq.XElement})">
            <summary>
            Converts this string object to XML object
            </summary>
            <param name="object"></param>
            <param name="onCompleted">The action to run when the conversion process is completed</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.ToXml(Newtonsoft.Json.Linq.JObject,System.String,System.Action{System.Xml.Linq.XElement})">
            <summary>
            Converts this JSON object to XML object
            </summary>
            <param name="object"></param>
            <param name="rootElementName"></param>
            <param name="onCompleted">The action to run when the conversion process is completed</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.FromXml``1(System.Xml.Linq.XContainer,System.Action{``0,System.Xml.Linq.XContainer})">
            <summary>
            Creates (Deserializes) an object from this XML object
            </summary>
            <typeparam name="T">Type of the object</typeparam>
            <param name="xml">The XML object that contains information for deserializing</param>
            <param name="onCompleted">The action to run when the conversion process is completed</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.FromXml``1(System.String,System.Action{``0})">
            <summary>
            Creates (Deserializes) an object from this XML string
            </summary>
            <typeparam name="T">Type of the object</typeparam>
            <param name="xml">The XML string that contains information for deserializing</param>
            <param name="onCompleted">The action to run when the conversion process is completed</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.ToXElement(System.Xml.XmlNode,System.Action{System.Xml.Linq.XElement})">
            <summary>
            Converts this XmlNode object to XElement object
            </summary>
            <param name="node"></param>
            <param name="onCompleted">The action to run when the conversion process is completed</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.ToXmlNode(System.Xml.Linq.XElement,System.Action{System.Xml.XmlNode})">
            <summary>
            Converts this XElement object to XmlNode object
            </summary>
            <param name="element"></param>
            <param name="onCompleted">The action to run when the conversion process is completed</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.ToXmlDocument(System.Xml.Linq.XElement,System.Action{System.Xml.XmlDocument})">
            <summary>
            Converts this XElement object to XmlDocument object
            </summary>
            <param name="element"></param>
            <param name="onCompleted">The action to run when the conversion process is completed</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.ToXDocument(System.Xml.XmlDocument,System.Action{System.Xml.Linq.XDocument})">
            <summary>
            Converts this XmlDocument object to XDocument object
            </summary>
            <param name="document"></param>
            <param name="onCompleted">The action to run when the conversion process is completed</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.ToXmlDocument(System.Xml.Linq.XDocument,System.Action{System.Xml.XmlDocument})">
            <summary>
            Converts this XDocument object to XmlDocument object
            </summary>
            <param name="document"></param>
            <param name="onCompleted">The action to run when the conversion process is completed</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.ToExpandoObject(System.String,System.Action{System.Dynamic.ExpandoObject})">
            <summary>
            Creates (Deserializes) an <see cref="T:System.Dynamic.ExpandoObject">ExpandoObject</see> object from this JSON string
            </summary>
            <param name="json">The string that presents serialized data to create object</param>
            <param name="onCompleted">The action to run when the conversion process is completed</param>
            <returns>An <see cref="T:System.Dynamic.ExpandoObject">ExpandoObject</see> object</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.ToExpandoObject(Newtonsoft.Json.Linq.JToken,System.Action{System.Dynamic.ExpandoObject})">
            <summary>
            Creates (Deserializes) an <see cref="T:System.Dynamic.ExpandoObject">ExpandoObject</see> object from this JSON
            </summary>
            <param name="json">The string that presents serialized data to create object</param>
            <returns>An <see cref="T:System.Dynamic.ExpandoObject">ExpandoObject</see> object</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.ToExpandoObject(System.Collections.Generic.IDictionary{System.String,System.Object},System.Action{System.Dynamic.ExpandoObject})">
            <summary>
            Creates an <see cref="T:System.Dynamic.ExpandoObject">ExpandoObject</see> object from this dictionary object
            </summary>
            <param name="object"></param>
            <returns>An <see cref="T:System.Dynamic.ExpandoObject">ExpandoObject</see> object</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.ToExpandoObject``1(``0,System.Action{System.Dynamic.ExpandoObject})">
            <summary>
            Creates an <see cref="T:System.Dynamic.ExpandoObject">ExpandoObject</see> object from this object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="object"></param>
            <returns>An <see cref="T:System.Dynamic.ExpandoObject">ExpandoObject</see> object</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.FromExpandoObject``1(System.Dynamic.ExpandoObject,System.Action{``0,System.Dynamic.ExpandoObject})">
            <summary>
            Creates (Deserializes) an object from this <see cref="T:System.Dynamic.ExpandoObject">ExpandoObject</see> object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="object"></param>
            <param name="onCompleted">The action to run when the conversion process is completed</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.Merge(System.Dynamic.ExpandoObject,System.Dynamic.ExpandoObject,System.Action{System.Dynamic.ExpandoObject})">
            <summary>
            Merges this <see cref="T:System.Dynamic.ExpandoObject">ExpandoObject</see> object with other
            </summary>
            <param name="object"></param>
            <param name="other"></param>
            <param name="onCompleted">The action to run when the merging process is completed</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.TryGet(System.Dynamic.ExpandoObject,System.String,System.Object@)">
            <summary>
            Tries to get value of an attribute of the <see cref="T:System.Dynamic.ExpandoObject">ExpandoObject</see> object by specified name (accept the dot (.) to get attribute of child object)
            </summary>
            <param name="object"></param>
            <param name="name">The string that presents the name of the attribute, accept the dot (.) to get attribute of child object</param>
            <param name="value">The value (if got); otherwise null.</param>
            <returns>true if the object has an attribute; otherwise false.</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.TryGet``1(System.Dynamic.ExpandoObject,System.String,``0@)">
            <summary>
            Tries to get value of an attribute of the <see cref="T:System.Dynamic.ExpandoObject">ExpandoObject</see> object by specified name (accept the dot (.) to get attribute of child object)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="object"></param>
            <param name="name">The string that presents the name of the attribute, accept the dot (.) to get attribute of child object</param>
            <param name="value">The value (if got); otherwise default of T.</param>
            <returns>true if the object has an attribute; otherwise false.</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.Get(System.Dynamic.ExpandoObject,System.String)">
            <summary>
            Gets the value of an attribute of this <see cref="T:System.Dynamic.ExpandoObject">ExpandoObject</see> object (accept the dot (.) to get attribute of child object)
            </summary>
            <param name="object"></param>
            <param name="name">The string that presents the name of the attribute, accept the dot (.) to get attribute of child object</param>
            <returns>The value of an attribute (if the object got it); otherwise null.</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.Get``1(System.Dynamic.ExpandoObject,System.String,``0)">
            <summary>
            Gets the value of an attribute of this <see cref="T:System.Dynamic.ExpandoObject">ExpandoObject</see> object (accept the dot (.) to get attribute of child object)
            </summary>
            <param name="object"></param>
            <param name="name">The string that presents the name of the attribute, accept the dot (.) to get attribute of child object</param>
            <param name="default">Default value when the attribute is not found</param>
            <returns>The value of an attribute (if the object got it); otherwise null.</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.Has(System.Dynamic.ExpandoObject,System.String)">
            <summary>
            Checks to see the <see cref="T:System.Dynamic.ExpandoObject">ExpandoObject</see> object is got an attribute by specified name (accept the dot (.) to get check of child object)
            </summary>
            <param name="object"></param>
            <param name="name">The string that presents the name of the attribute for checking, accept the dot (.) to get check of child object</param>
            <returns>true if the object got an attribute with the name</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.Set(System.Dynamic.ExpandoObject,System.String,System.Object)">
            <summary>
            Sets the value of an attribute of the <see cref="T:System.Dynamic.ExpandoObject">ExpandoObject</see> object by specified name (accept the dot (.) to get attribute of child object)
            </summary>
            <param name="object"></param>
            <param name="name">The string that presents the name of the attribute, accept the dot (.) to get attribute of child object</param>
            <param name="value">The value to set</param>
            <returns>true if the attribute has been setted; otherwise false.</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.ObjectService.Remove(System.Dynamic.ExpandoObject,System.String)">
            <summary>
            Removes an attribute of the <see cref="T:System.Dynamic.ExpandoObject">ExpandoObject</see> object by specified name (accept the dot (.) to get attribute of child object)
            </summary>
            <param name="object"></param>
            <param name="name">The string that presents the name of the attribute, accept the dot (.) to get attribute of child object</param>
            <returns>true if the attribute has been removed from the object; otherwise false.</returns>
        </member>
        <member name="T:net.vieapps.Components.Utility.AsObjectAttribute">
            <summary>
            Specifies this property is serialized as an object (JObject) instead as an array (JArray) while serializing/deserializing via Json.NET
            </summary>
        </member>
        <member name="P:net.vieapps.Components.Utility.AsObjectAttribute.KeyAttribute">
            <summary>
            Gets or sets the name of attribute to use as the key (if not value is provided, the name 'ID' will be used while processing)
            </summary>
        </member>
        <member name="T:net.vieapps.Components.Utility.AsArrayAttribute">
            <summary>
            Specifies this property is serialized as an array (JArray) instead as an object (JObject) while serializing/deserializing via Json.NET
            </summary>
        </member>
        <member name="P:net.vieapps.Components.Utility.AsArrayAttribute.KeyAttribute">
            <summary>
            Gets or sets the name of attribute to use as the key (if not value is provided, the name 'ID' will be used while processing)
            </summary>
        </member>
        <member name="T:net.vieapps.Components.Utility.IPropertyChangedNotifier">
            <summary>
            Presents the notifier for notifying an event when a property value was change
            </summary>
        </member>
        <member name="M:net.vieapps.Components.Utility.IPropertyChangedNotifier.NotifyPropertyChanged(System.String,System.Object)">
            <summary>
            Calls for notifying an event when a property value was change
            </summary>
            <param name="name"></param>
            <param name="sender"></param>
        </member>
        <member name="M:net.vieapps.Components.Utility.IPropertyChangedNotifier.ProcessPropertyChanged(System.String)">
            <summary>
            Fires automatically when receive an event of property value was changed
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:net.vieapps.Components.Utility.OTPService">
            <summary>
            One-time password servicing methods
            </summary>
        </member>
        <member name="M:net.vieapps.Components.Utility.OTPService.GeneratePassword(System.Byte[],System.Int64,System.Int32)">
            <summary>
            Generates the counter-based password (RFC 4226)
            </summary>
            <param name="secret">The secret key to generate password</param>
            <param name="counter">The counter to generate password from the secret key</param>
            <param name="digits">The number of password digits</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.OTPService.GeneratePassword(System.String,System.Int64,System.Int32)">
            <summary>
            Generates the counter-based password (RFC 4226)
            </summary>
            <param name="secret">The secret key to generate password</param>
            <param name="counter">The counter to generate password from the secret key</param>
            <param name="digits">The number of password digits</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.OTPService.GeneratePassword(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Generates the time-based password (RFC 6238)
            </summary>
            <param name="secret">The secret key to generate password</param>
            <param name="interval">The interval length (seconds) to generate password - Authenticator app (just like Google /Microsoft) uses 30 seconds interval length</param>
            <param name="digits">The number of password digits</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.OTPService.GeneratePassword(System.String,System.Int32,System.Int32)">
            <summary>
            Generates the time-based password (RFC 6238)
            </summary>
            <param name="secret">The secret key to generate password</param>
            <param name="interval">The interval length (seconds) to generate password - Authenticator app (just like Google /Microsoft) uses 30 seconds interval length</param>
            <param name="digits">The number of password digits</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.OTPService.GenerateProvisioningUri(System.String,System.Byte[],System.String)">
            <summary>
            Generates the URI for provisioning
            </summary>
            <param name="identifier">The string that presents identity (username or email)</param>
            <param name="secret">The secret key</param>
            <param name="issuer">The string that presents name of issuer</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.OTPService.GenerateProvisioningUri(System.String,System.String,System.String)">
            <summary>
            Generates the URI for provisioning
            </summary>
            <param name="identifier">The string that presents identity (username or email)</param>
            <param name="secret">The secret key</param>
            <param name="issuer">The string that presents name of issuer</param>
            <returns></returns>
        </member>
        <member name="T:net.vieapps.Components.Utility.StringService">
            <summary>
            Static servicing methods for working with string
            </summary>
        </member>
        <member name="M:net.vieapps.Components.Utility.StringService.Left(System.String,System.Int32)">
            <summary>
            Gets left-side sub-string (just like VB does)
            </summary>
            <param name="string"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.StringService.Right(System.String,System.Int32)">
            <summary>
            Gets right-side sub-string (just like VB does)
            </summary>
            <param name="string"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.StringService.PadLeft(System.String,System.Int32,System.String)">
            <summary>
            Returns a new string that right-aligns the characters in this instance by padding them with spaces on the left, for a specified total length
            </summary>
            <param name="string"></param>
            <param name="totalWidth"></param>
            <param name="paddingChar"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.StringService.PadRight(System.String,System.Int32,System.String)">
            <summary>
            Returns a new string that left-aligns the characters in this string by padding them with spaces on the right, for a specified total length
            </summary>
            <param name="string"></param>
            <param name="totalWidth"></param>
            <param name="paddingChar"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.StringService.Replace(System.String,System.StringComparison,System.String,System.String)">
            <summary>
            Replaces
            </summary>
            <param name="string"></param>
            <param name="comparisonType"></param>
            <param name="pattern"></param>
            <param name="replacement"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.StringService.IsEquals(System.String,System.String,System.StringComparison)">
            <summary>
            Check to see its equals
            </summary>
            <param name="string"></param>
            <param name="compareTo"></param>
            <param name="comparisonType"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.StringService.IsContains(System.String,System.String,System.StringComparison)">
            <summary>
            Check to see its contains
            </summary>
            <param name="string"></param>
            <param name="substring"></param>
            <param name="comparisonType"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.StringService.IsStartsWith(System.String,System.String,System.StringComparison)">
            <summary>
            Check to see its starts with
            </summary>
            <param name="string"></param>
            <param name="substring"></param>
            <param name="comparisonType"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.StringService.IsStartsWith(System.String,System.Char,System.StringComparison)">
            <summary>
            Check to see its starts with
            </summary>
            <param name="string"></param>
            <param name="char"></param>
            <param name="comparisonType"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.StringService.IsEndsWith(System.String,System.String,System.StringComparison)">
            <summary>
            Check to see its ends with
            </summary>
            <param name="string"></param>
            <param name="substring"></param>
            <param name="comparisonType"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.StringService.IsEndsWith(System.String,System.Char,System.StringComparison)">
            <summary>
            Check to see its ends with
            </summary>
            <param name="string"></param>
            <param name="char"></param>
            <param name="comparisonType"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.StringService.PositionOf(System.String,System.String,System.Int32,System.StringComparison)">
            <summary>
            Gets position of sub-string (index of sub-string)
            </summary>
            <param name="string"></param>
            <param name="substring"></param>
            <param name="startIndex"></param>
            <param name="comparisonType"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.StringService.Count(System.String,System.String,System.Int32,System.StringComparison)">
            <summary>
            Counts the number of appearances of the sub-string
            </summary>
            <param name="string"></param>
            <param name="substring"></param>
            <param name="startIndex"></param>
            <param name="comparisonType"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.StringService.Compress(System.String,System.String)">
            <summary>
            Compresses the string using Deflate compression method
            </summary>
            <param name="string"></param>
            <param name="mode">Compression mode (br/gzip/deflate)</param>
            <returns>The compressed-string in Base64 format</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.StringService.Decompress(System.String,System.String)">
            <summary>
            Decompresses the Base64 string using Deflate compression method
            </summary>
            <param name="string"></param>
            <param name="mode">Decompression mode (br/gzip/deflate)</param>
            <returns>The decompressed-string</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.StringService.Reverse(System.String)">
            <summary>
            Gets reversed string
            </summary>
            <param name="string"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.StringService.GetCapitalizedFirstLetter(System.String,System.Boolean)">
            <summary>
            Gets the string with first-letter is capitalized
            </summary>
            <param name="string"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.StringService.GetCapitalizedWords(System.String)">
            <summary>
            Gets the string with first-letter of all words is capitalized
            </summary>
            <param name="string"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.StringService.ToEnum(System.String,System.Type)">
            <summary>
            Converts this enum-string to enum type value
            </summary>
            <param name="string"></param>
            <param name="type">The type of enum</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.StringService.ToEnum``1(System.String)">
            <summary>
            Converts this enum-string to enum type value
            </summary>
            <typeparam name="T"></typeparam>
            <param name="string"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.StringService.TryToEnum``1(System.String,``0@)">
            <summary>
            Trys to converts this enum-string to enum-typed value
            </summary>
            <typeparam name="T"></typeparam>
            <param name="string"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.StringService.GetString(System.Byte[],System.Int32,System.Text.Encoding)">
            <summary>
            Gets the string from array of bytes by specified encoding (default is UTF8)
            </summary>
            <param name="bytes"></param>
            <param name="count"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.StringService.GetString(System.ArraySegment{System.Byte},System.Int32,System.Text.Encoding)">
            <summary>
            Gets the string from array of bytes by specified encoding (default is UTF8)
            </summary>
            <param name="bytes"></param>
            <param name="count"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.StringService.GetDoubleBracesTokens(System.String)">
            <summary>
            Gets the double braces (mustache-style - {{  }}) tokens
            </summary>
            <param name="string"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.StringService.Format(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Formats the string with parameters of double braces (mustache-style - {{  }}) tokens
            </summary>
            <param name="string"></param>
            <param name="params"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.StringService.ConvertUTF8ToUnicode(System.String)">
            <summary>
            Converts this Vietnamese string from UTF8 to Unicode
            </summary>
            <param name="string"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.StringService.ConvertUnicodeToUTF8(System.String)">
            <summary>
            Converts this Vietnamese string from Unicode to UTF8
            </summary>
            <param name="string"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.StringService.ConvertUnicodeToANSI(System.String)">
            <summary>
            Converts this Vietnamese string from Unicode to ANSI
            </summary>
            <param name="string"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.StringService.ConvertUnicodeToDecimal(System.String)">
            <summary>
            Converts this Vietnamese string from Unicode to Decimal
            </summary>
            <param name="string"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.StringService.ConvertDecimalToUnicode(System.String)">
            <summary>
            Converts this Vietnamese string from Decimal to Unicode
            </summary>
            <param name="string"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.StringService.ConvertTCVN3ToUnicode(System.String)">
            <summary>
            Converts this Vietnamese string from TCVN3 to Unicode
            </summary>
            <param name="string"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.StringService.ConvertUnicodeToCompositeUnicode(System.String)">
            <summary>
            Converts this Vietnamese string from Pre-composed Unicode to Composite Unicode
            </summary>
            <param name="string"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.StringService.ConvertCompositeUnicodeToUnicode(System.String)">
            <summary>
            Converts this Vietnamese string from Composite Unicode to Pre-composed Unicode
            </summary>
            <param name="string"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.StringService.IsNumeric(System.String)">
            <summary>
            Checks to see the string is numeric string or not
            </summary>
            <param name="string"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.StringService.GetANSIUri(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Generates the ANSI uri from this string (means remove all white spaces and special characters)
            </summary>
            <param name="string"></param>
            <param name="toLowerCase">true to return lower case</param>
            <param name="allowDotSymbols">true to allow dot symbols (.)</param>
            <param name="allowEmpty">true to allow empty (default is false - will be updated as a random value)</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.StringService.IsValidANSIUri(System.String,System.Boolean)">
            <summary>
            Validate the ANSI uri
            </summary>
            <param name="ansiUri">The string that presents an ANSI uri to check</param>
            <param name="allowDotSymbols">true to allow dot symbols (.)</param>
            <returns>true if valid; otherwise false.</returns>
        </member>
        <member name="T:net.vieapps.Components.Utility.UtilityService">
            <summary>
            Utility servicing methods
            </summary>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.GetUUID(System.String)">
            <summary>
            Gets the UUID (unique universal identity - in 128 bits)
            </summary>
            <param name="uuid">The string that presents an UUID</param>
            <returns>The string that presents UUID with hyphens (128 bits)</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.GenerateUUID(System.String,System.String)">
            <summary>
            Generate an UUID from this string
            </summary>
            <param name="string"></param>
            <param name="mode">BLAKE or MD5</param>
            <returns></returns>
        </member>
        <member name="P:net.vieapps.Components.Utility.UtilityService.NewUUID">
            <summary>
            Gets a new UUID (universal unique identity - 128 bits or 32 hexa-characters)
            </summary>
        </member>
        <member name="P:net.vieapps.Components.Utility.UtilityService.BlankUUID">
            <summary>
            Gets the blank UUID
            </summary>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.IsValidUUID(System.String,System.Boolean)">
            <summary>
            Validates the UUID string
            </summary>
            <param name="uuid"></param>
            <param name="onlyHex">true to only allow hexa characters</param>
            <returns>true if it is valid; otherwise false.</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.GetRandomNumber(System.Int32,System.Int32)">
            <summary>
            Gets the random number between min and max
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.GetRandomNumber(System.Int32)">
            <summary>
            Gets the random of big integer number
            </summary>
            <param name="length">The number of random bits to generate.</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.GetRandomCode(System.Boolean,System.Boolean)">
            <summary>
            Gets a random code
            </summary>
            <param name="useShortCode">true to use short-code</param>
            <param name="useHex">true to use hexa in code</param>
            <returns>The string that presents random code</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.ExecuteTask(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Executes an action in the thread pool with cancellation supported
            </summary>
            <param name="action">The action to run in the thread pool</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="creationOptions">The options that controls the behavior of the created task</param>
            <param name="scheduler">The scheduler that is used to schedule the created task</param>
            <returns>An awaitable task</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.ExecuteTask``1(System.Func{``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Executes an action in the thread pool with cancellation supported
            </summary>
            <typeparam name="T"></typeparam>
            <param name="func">The function to run in the thread pool</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="creationOptions">The options that controls the behavior of the created task</param>
            <param name="scheduler">The scheduler that is used to schedule the created task</param>
            <returns>An awaitable task</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.WithCancellationToken(System.Threading.Tasks.Task,System.Threading.CancellationToken)">
            <summary>
            Performs an awaitable task with cancellation token supported
            </summary>
            <param name="task"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.WithCancellationToken``1(System.Threading.Tasks.Task{``0},System.Threading.CancellationToken)">
            <summary>
            Performs an awaitable task with cancellation token supported
            </summary>
            <typeparam name="T"></typeparam>
            <param name="task"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.GetResponseAsync(System.Net.HttpWebRequest,System.Threading.CancellationToken)">
            <summary>
            Performs a web request and get response in async
            </summary>
            <param name="httpRequest"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.DownloadDataTaskAsync(System.Net.WebClient,System.String,System.Threading.CancellationToken)">
            <summary>
            Downloads the resource as an array of byte from the URI specified as an asynchronous operation using a task object.
            </summary>
            <param name="webclient"></param>
            <param name="address"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.DownloadDataTaskAsync(System.Net.WebClient,System.Uri,System.Threading.CancellationToken)">
            <summary>
            Downloads the resource as an array of byte from the URI specified as an asynchronous operation using a task object.
            </summary>
            <param name="webclient"></param>
            <param name="address"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.DownloadStringTaskAsync(System.Net.WebClient,System.String,System.Threading.CancellationToken)">
            <summary>
            Downloads the resource as a string from the URI specified as an asynchronous operation using a task object.
            </summary>
            <param name="webclient"></param>
            <param name="address"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.DownloadStringTaskAsync(System.Net.WebClient,System.Uri,System.Threading.CancellationToken)">
            <summary>
            Downloads the resource as a string from the URI specified as an asynchronous operation using a task object.
            </summary>
            <param name="webclient"></param>
            <param name="address"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.DownloadFileTaskAsync(System.Net.WebClient,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Downloads the specified resource to a local file as an asynchronous operation using a task object.
            </summary>
            <param name="webclient"></param>
            <param name="address"></param>
            <param name="fileName"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.DownloadFileTaskAsync(System.Net.WebClient,System.Uri,System.String,System.Threading.CancellationToken)">
            <summary>
            Downloads the specified resource to a local file as an asynchronous operation using a task object.
            </summary>
            <param name="webclient"></param>
            <param name="address"></param>
            <param name="fileName"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.WriteAsync(System.IO.StreamWriter,System.String,System.Threading.CancellationToken)">
            <summary>
            Writes a string to the stream asynchronously
            </summary>
            <param name="writer"></param>
            <param name="string"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.WriteLineAsync(System.IO.StreamWriter,System.String,System.Threading.CancellationToken)">
            <summary>
            Writes a line of string to the stream asynchronously
            </summary>
            <param name="writer"></param>
            <param name="string"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.FlushAsync(System.IO.StreamWriter,System.Threading.CancellationToken)">
            <summary>
            Clears all buffers for this stream asynchronously and causes any buffered data to be written to the underlying device
            </summary>
            <param name="writer"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.ReadToEndAsync(System.IO.StreamReader,System.Threading.CancellationToken)">
            <summary>
            Reads all characters from the current position to the end of the stream asynchronously and returns them as one string
            </summary>
            <param name="reader"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.ReadLineAsync(System.IO.StreamReader,System.Threading.CancellationToken)">
            <summary>
            Reads a line of characters asynchronously from the current stream and returns the data as a string
            </summary>
            <param name="reader"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:net.vieapps.Components.Utility.UtilityService.SpiderUserAgent">
            <summary>
            Gets an user-agent as spider-bot
            </summary>
        </member>
        <member name="P:net.vieapps.Components.Utility.UtilityService.MobileUserAgent">
            <summary>
            Gets an user-agent as mobile browser
            </summary>
        </member>
        <member name="P:net.vieapps.Components.Utility.UtilityService.DesktopUserAgent">
            <summary>
            Gets an user-agent as desktop browser
            </summary>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.GetWebCredential(System.Uri,System.String,System.String)">
            <summary>
            Gets the Basic network credential to perform a web request
            </summary>
            <param name="uri"></param>
            <param name="username"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.GetWebProxy(System.Uri,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets the web proxy
            </summary>
            <param name="uri"></param>
            <param name="username"></param>
            <param name="password"></param>
            <param name="bypass"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.GetWebProxy(System.String,System.Int32,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets the web proxy
            </summary>
            <param name="host"></param>
            <param name="port"></param>
            <param name="username"></param>
            <param name="password"></param>
            <param name="bypass"></param>
            <returns></returns>
        </member>
        <member name="P:net.vieapps.Components.Utility.UtilityService.Proxy">
            <summary>
            Gets the pre-configurated web proxy
            </summary>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.AssignWebProxy(System.String,System.Int32,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Assigns the web-proxy
            </summary>
            <param name="host"></param>
            <param name="port"></param>
            <param name="username"></param>
            <param name="password"></param>
            <param name="bypass"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.GetWebResponseAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{System.Net.Cookie},System.String,System.String,System.Int32,System.String,System.String,System.Net.CredentialCache,System.Net.WebProxy,System.Threading.CancellationToken)">
            <summary>
            Gets the web response
            </summary>
            <param name="method">The HTTP verb to perform request</param>
            <param name="uri">The URI to perform request to</param>
            <param name="headers">The requesting headers</param>
            <param name="cookies">The requesting cookies</param>
            <param name="body">The requesting body</param>
            <param name="contentType">The content-type of the requesting body</param>
            <param name="timeout">The requesting time-out</param>
            <param name="userAgent">The string that presents 'User-Agent' header</param>
            <param name="referUri">The string that presents the referring url</param>
            <param name="credential">The credential for marking request</param>
            <param name="proxy">The proxy for marking request</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.SendHttpRequestAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{System.Net.Cookie},System.String,System.String,System.Int32,System.String,System.String,System.Net.CredentialCache,System.Net.WebProxy,System.Threading.CancellationToken)">
            <summary>
            Sends the HTTP request to a remote  end-point
            </summary>
            <param name="method">The HTTP verb to perform request</param>
            <param name="uri">The URI to perform request to</param>
            <param name="headers">The requesting headers</param>
            <param name="cookies">The requesting cookies</param>
            <param name="body">The requesting body</param>
            <param name="contentType">The content-type of the requesting body</param>
            <param name="timeout">The requesting time-out</param>
            <param name="userAgent">The string that presents 'User-Agent' header</param>
            <param name="referUri">The string that presents the referring url</param>
            <param name="credential">The credential for marking request</param>
            <param name="proxy">The proxy for marking request</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.GetWebResponseAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.String,System.Int32,System.String,System.Net.WebProxy,System.Threading.CancellationToken)">
            <summary>
            Gets the web response
            </summary>
            <param name="method">The HTTP verb to perform request</param>
            <param name="uri">The URI to perform request to</param>
            <param name="headers">The requesting headers</param>
            <param name="body">The requesting body</param>
            <param name="contentType">The content-type of the requesting body</param>
            <param name="timeout">The requesting time-out</param>
            <param name="userAgent">The string that presents 'User-Agent' header</param>
            <param name="proxy">The proxy for marking request</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.SendHttpRequestAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.String,System.Int32,System.String,System.Net.WebProxy,System.Threading.CancellationToken)">
            <summary>
            Sends the HTTP request to a remote  end-point
            </summary>
            <param name="method">The HTTP verb to perform request</param>
            <param name="uri">The URI to perform request to</param>
            <param name="headers">The requesting headers</param>
            <param name="body">The requesting body</param>
            <param name="contentType">The content-type of the requesting body</param>
            <param name="timeout">The requesting time-out</param>
            <param name="userAgent">The string that presents 'User-Agent' header</param>
            <param name="proxy">The proxy for marking request</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.GetWebResourceAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{System.Net.Cookie},System.String,System.String,System.Int32,System.String,System.String,System.Net.CredentialCache,System.Net.WebProxy,System.Threading.CancellationToken)">
            <summary>
            Gets the web resource stream
            </summary>
            <param name="method">The HTTP verb to perform request</param>
            <param name="uri">The URI to perform request to</param>
            <param name="headers">The requesting headers</param>
            <param name="cookies">The requesting cookies</param>
            <param name="body">The requesting body</param>
            <param name="contentType">The content-type of the requesting body</param>
            <param name="timeout">The requesting time-out</param>
            <param name="userAgent">The string that presents 'User-Agent' header</param>
            <param name="referUri">The string that presents the referring url</param>
            <param name="credential">The credential for marking request</param>
            <param name="proxy">The proxy for marking request</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.GetWebResourceAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the web resource stream
            </summary>
            <param name="uri">The URI to perform request to</param>
            <param name="referUri">The string that presents the referring url</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.GetWebPageAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{System.Net.Cookie},System.String,System.String,System.Int32,System.String,System.String,System.Net.CredentialCache,System.Net.WebProxy,System.Threading.CancellationToken)">
            <summary>
            Gets the web page (means HTML code of a web page)
            </summary>
            <param name="method">The HTTP verb to perform request</param>
            <param name="uri">The URI to perform request to</param>
            <param name="headers">The requesting headers</param>
            <param name="cookies">The requesting cookies</param>
            <param name="body">The requesting body</param>
            <param name="contentType">The content-type of the requesting body</param>
            <param name="timeout">The requesting time-out</param>
            <param name="userAgent">The string that presents 'User-Agent' header</param>
            <param name="referUri">The string that presents the referring url</param>
            <param name="credential">The credential for marking request</param>
            <param name="proxy">The proxy for marking request</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.GetWebPageAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a web page of a remote end-point
            </summary>
            <param name="uri">The URI to perform request to</param>
            <param name="referUri">The string that presents the referring url</param>
            <param name="userAgent">The string that presents 'User-Agent' header</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.FetchWebResourceAsync(System.String,System.Threading.CancellationToken,System.String,System.String)">
            <summary>
            Gets a web page of a remote end-point
            </summary>
            <param name="uri">The URI to perform request to</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="referUri">The string that presents the referring url</param>
            <param name="userAgent">The string that presents 'User-Agent' header</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.RemoveTag(System.String,System.String,System.String)">
            <summary>
            Removes HTML/XML tags
            </summary>
            <param name="input"></param>
            <param name="tag"></param>
            <param name="attributeValueToClean"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.RemoveTags(System.String)">
            <summary>
            Removes all HTML/XML tags
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.RemoveMsOfficeTags(System.String,System.String[])">
            <summary>
            Removes  Microsoft Office tags
            </summary>
            <param name="input"></param>
            <param name="tags"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.RemoveTagAttributes(System.String,System.String)">
            <summary>
            Removes attributes of a HTML/XML tags
            </summary>
            <param name="input"></param>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.ClearTag(System.String,System.String)">
            <summary>
            Clears HTML/XML tags (with inner)
            </summary>
            <param name="input"></param>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.ClearComments(System.String)">
            <summary>
            Clears comments tags
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.RemoveWhitespaces(System.String)">
            <summary>
            Removes whitespaces and breaks
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.NormalizeHTMLBreaks(System.String,System.Boolean)">
            <summary>
            Normalizes breaks (BR) of HTML code
            </summary>
            <param name="html"></param>
            <param name="noBreakBetweenTags"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.GetNormalizedFilename(System.String)">
            <summary>
            Normalizes the name of a file
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.GetFileSize(System.IO.FileInfo)">
            <summary>
            Gets size of a file in the friendly text
            </summary>
            <param name="fileInfo"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.GetFileSize(System.String)">
            <summary>
            Gets size of a file in the friendly text
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.GetFiles(System.String,System.String,System.Boolean,System.Collections.Generic.List{System.String},System.String,System.String)">
            <summary>
            Searchs and gets listing of files by searching pattern
            </summary>
            <param name="path"></param>
            <param name="searchPatterns"></param>
            <param name="searchInSubFolder"></param>
            <param name="excludedSubFolders"></param>
            <param name="orderBy"></param>
            <param name="orderMode"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.GetFilesAsync(System.String,System.String,System.Boolean,System.Collections.Generic.List{System.String},System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Searchs and gets listing of files by searching pattern
            </summary>
            <param name="path"></param>
            <param name="searchPatterns"></param>
            <param name="searchInSubFolder"></param>
            <param name="excludedSubFolders"></param>
            <param name="orderBy"></param>
            <param name="orderMode"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.GetFilePaths(System.String,System.String,System.Boolean,System.Collections.Generic.List{System.String},System.String,System.String)">
            <summary>
            Searchs and gets the listing of file paths by searching pattern
            </summary>
            <param name="path"></param>
            <param name="searchPatterns"></param>
            <param name="searchInSubFolder"></param>
            <param name="excludedSubFolders"></param>
            <param name="orderBy"></param>
            <param name="orderMode"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.GetFilePathsAsync(System.String,System.String,System.Boolean,System.Collections.Generic.List{System.String},System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Searchs and gets the listing of file paths by searching pattern
            </summary>
            <param name="path"></param>
            <param name="searchPatterns"></param>
            <param name="searchInSubFolder"></param>
            <param name="excludedSubFolders"></param>
            <param name="orderBy"></param>
            <param name="orderMode"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.GetPath(System.String[])">
            <summary>
            Gets path to a file/folder with 'right' path separator on each OS Platform
            </summary>
            <param name="paths"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.MoveFiles(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Moves file (searched by patterns) of a folder to other folders
            </summary>
            <param name="source"></param>
            <param name="destination"></param>
            <param name="searchPatterns"></param>
            <param name="deleteOldFilesBeforeMoving"></param>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.MoveFilesAsync(System.String,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Moves file (searched by patterns) of a folder to other folders
            </summary>
            <param name="source"></param>
            <param name="destination"></param>
            <param name="searchPatterns"></param>
            <param name="deleteOldFilesBeforeMoving"></param>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.GetRecyclableMemoryStreamFactory">
            <summary>
            Gets a factory to get recyclable memory stream with RecyclableMemoryStreamManager class to limit LOH fragmentation and improve performance
            </summary>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.GetRecyclableMemoryStreamFactory(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets a factory to get recyclable memory stream with RecyclableMemoryStreamManager class to limit LOH fragmentation and improve performance
            </summary>
            <param name="blockSize"></param>
            <param name="largeBufferMultiple"></param>
            <param name="maximumBufferSize"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.CreateMemoryStream(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Creates an instance of <see cref="T:System.IO.MemoryStream">MemoryStream</see> using RecyclableMemoryStream to limit LOH fragmentation and improve performance
            </summary>
            <param name="buffer"></param>
            <param name="index"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.ToMemoryStream(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Converts this array of bytes to memory stream
            </summary>
            <param name="buffer"></param>
            <param name="index"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.ToMemoryStream(System.ArraySegment{System.Byte})">
            <summary>
            Converts this array segment of bytes to memory stream
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.ToArraySegment(System.IO.MemoryStream)">
            <summary>
            Converts this memory stream to array segment of byte
            </summary>
            <param name="stream"></param>
            <remarks>
            Try to get buffer first to avoid calling ToArray on the MemoryStream because it allocates a new byte array on the heap.
            Avoid this by attempting to access the internal memory stream buffer, this works with supported streams like the recyclable memory stream and writable memory streams
            </remarks>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.ToBytes(System.IO.MemoryStream)">
            <summary>
            Converts this memory stream to array of bytes
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.Write(System.IO.Stream,System.ArraySegment{System.Byte})">
            <summary>
            Writes the array segment of bytes to this stream
            </summary>
            <param name="stream"></param>
            <param name="buffer"></param>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.WriteAsync(System.IO.Stream,System.ArraySegment{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Writes the array segment of bytes to this stream
            </summary>
            <param name="stream"></param>
            <param name="buffer"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.ReadTextFile(System.IO.FileInfo,System.Text.Encoding)">
            <summary>
            Reads a text file
            </summary>
            <param name="fileInfo"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.ReadTextFile(System.String,System.Text.Encoding)">
            <summary>
            Reads a text file
            </summary>
            <param name="filePath"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.ReadTextFileAsync(System.IO.FileInfo,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            Reads a text file
            </summary>
            <param name="fileInfo"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.ReadTextFileAsync(System.String,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            Reads a text file
            </summary>
            <param name="filePath"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.WriteTextFile(System.IO.FileInfo,System.String,System.Boolean,System.Text.Encoding)">
            <summary>
            Writes a text file
            </summary>
            <param name="fileInfo"></param>
            <param name="content"></param>
            <param name="append"></param>
            <param name="encoding"></param>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.WriteTextFile(System.String,System.String,System.Boolean,System.Text.Encoding)">
            <summary>
            Writes a text file
            </summary>
            <param name="filePath"></param>
            <param name="content"></param>
            <param name="append"></param>
            <param name="encoding"></param>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.WriteTextFileAsync(System.IO.FileInfo,System.String,System.Boolean,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            Writes a text file
            </summary>
            <param name="fileInfo"></param>
            <param name="content"></param>
            <param name="append"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.WriteTextFileAsync(System.String,System.String,System.Boolean,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            Writes a text file
            </summary>
            <param name="filePath"></param>
            <param name="content"></param>
            <param name="append"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.ReadTextFile(System.String,System.Int64,System.Int32)">
            <summary>
            Reads the multiple lines of a text file
            </summary>
            <param name="filePath"></param>
            <param name="position"></param>
            <param name="totalOfLines"></param>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.ReadTextFile(System.String,System.Int32)">
            <summary>
            Reads the multiple lines of a text file
            </summary>
            <param name="filePath">The path to text file</param>
            <param name="totalOfLines">The total number of lines to read (set as 0 to read from current position to end of file)</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.ReadTextFileAsync(System.String,System.Int64,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Reads the multiple lines of a text file
            </summary>
            <param name="filePath"></param>
            <param name="position"></param>
            <param name="totalOfLines"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.ReadTextFileAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Reads the multiple lines of a text file
            </summary>
            <param name="filePath">The path to text file</param>
            <param name="totalOfLines">The total number of lines to read (set as 0 to read from current position to end of file)</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.WriteTextFile(System.String,System.Collections.Generic.List{System.String},System.Boolean,System.Text.Encoding)">
            <summary>
            Writes the multiple lines of a text file
            </summary>
            <param name="filePath"></param>
            <param name="lines"></param>
            <param name="append"></param>
            <param name="encoding"></param>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.WriteTextFileAsync(System.String,System.Collections.Generic.List{System.String},System.Boolean,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            Writes the multiple lines of a text file
            </summary>
            <param name="filePath"></param>
            <param name="lines"></param>
            <param name="append"></param>
            <param name="encoding"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.ReadBinaryFile(System.IO.FileInfo)">
            <summary>
            Reads a binary file
            </summary>
            <param name="fileInfo"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.ReadBinaryFile(System.String)">
            <summary>
            Reads a binary file
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.ReadBinaryFileAsync(System.IO.FileInfo,System.Threading.CancellationToken)">
            <summary>
            Reads a binary file
            </summary>
            <param name="fileInfo"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.ReadBinaryFileAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Reads a binary file
            </summary>
            <param name="filePath"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.WriteBinaryFile(System.String,System.Byte[],System.Boolean)">
            <summary>
            Writes a binary file
            </summary>
            <param name="filePath"></param>
            <param name="content"></param>
            <param name="append"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.WriteBinaryFileAsync(System.String,System.Byte[],System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Writes a binary file
            </summary>
            <param name="filePath"></param>
            <param name="content"></param>
            <param name="append"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.WriteBinaryFile(System.String,System.IO.Stream,System.Boolean)">
            <summary>
            Writes a binary file
            </summary>
            <param name="filePath"></param>
            <param name="content"></param>
            <param name="append"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.WriteBinaryFileAsync(System.String,System.IO.Stream,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Writes a binary file
            </summary>
            <param name="filePath"></param>
            <param name="content"></param>
            <param name="append"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.UploadAsync(System.IO.Stream,System.String,System.String,System.Action{System.String,System.String,System.Int64},System.Action{System.String,System.Exception},System.Threading.CancellationToken)">
            <summary>
            Uploads the data stream as file to a remote server
            </summary>
            <param name="stream"></param>
            <param name="filename"></param>
            <param name="url"></param>
            <param name="onCompleted"></param>
            <param name="onError"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.UploadAsync(System.Byte[],System.String,System.String,System.Action{System.String,System.String,System.Int64},System.Action{System.String,System.Exception},System.Threading.CancellationToken)">
            <summary>
            Uploads data as file to a remote server
            </summary>
            <param name="data"></param>
            <param name="filename"></param>
            <param name="url"></param>
            <param name="onCompleted"></param>
            <param name="onError"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.UploadFileAsync(System.String,System.String,System.Action{System.String,System.String,System.String,System.Int64},System.Action{System.String,System.String,System.Exception},System.Threading.CancellationToken)">
            <summary>
            Upload a file to a remote server
            </summary>
            <param name="filePath"></param>
            <param name="url"></param>
            <param name="onCompleted"></param>
            <param name="onError"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.Download(System.String,System.Action{System.String,System.Int64},System.Action{System.String,System.Exception})">
            <summary>
            Downloads data from a remote server
            </summary>
            <param name="url"></param>
            <param name="onCompleted"></param>
            <param name="onError"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.DownloadAsync(System.String,System.Action{System.String,System.Int64},System.Action{System.String,System.Exception},System.Threading.CancellationToken)">
            <summary>
            Downloads data from a remote server
            </summary>
            <param name="url"></param>
            <param name="onCompleted"></param>
            <param name="onError"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.DownloadFileAsync(System.String,System.String,System.String,System.Action{System.String,System.String,System.Int64},System.Action{System.String,System.Exception},System.Threading.CancellationToken)">
            <summary>
            Downloads a file from a remote server
            </summary>
            <param name="url"></param>
            <param name="filePath"></param>
            <param name="referUri"></param>
            <param name="onCompleted"></param>
            <param name="onError"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.DownloadFileAsync(System.String,System.String,System.String,System.Action{System.String,System.String},System.Action{System.String,System.Exception},System.Threading.CancellationToken)">
            <summary>
            Downloads a file from a remote server
            </summary>
            <param name="url"></param>
            <param name="filePath"></param>
            <param name="referUri"></param>
            <param name="onCompleted"></param>
            <param name="onError"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.Compress(System.IO.Stream,System.String)">
            <summary>
            Compresses the stream
            </summary>
            <param name="stream"></param>
            <param name="mode">Compression mode (br/gzip/deflate)</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.CompressAsync(System.IO.Stream,System.String,System.Threading.CancellationToken)">
            <summary>
            Compresses the stream
            </summary>
            <param name="stream"></param>
            <param name="mode">Compression mode (br/gzip/deflate)</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.Compress(System.ArraySegment{System.Byte},System.String)">
            <summary>
            Compresses the array segment of bytes
            </summary>
            <param name="data"></param>
            <param name="mode">Compression mode (br/gzip/deflate)</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.Compress(System.Byte[],System.String)">
            <summary>
            Compresses the array of bytes
            </summary>
            <param name="data"></param>
            <param name="mode">Compression mode (br/gzip/deflate)</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.Decompress(System.IO.Stream,System.String)">
            <summary>
            Decompresses the stream
            </summary>
            <param name="stream"></param>
            <param name="mode">Decompression mode (br/gzip/deflate)</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.DecompressAsync(System.IO.Stream,System.String,System.Threading.CancellationToken)">
            <summary>
            Decompresses the stream
            </summary>
            <param name="stream"></param>
            <param name="mode">Decompression mode (br/gzip/deflate)</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.Decompress(System.Byte[],System.String)">
            <summary>
            Decompresses the array of bytes
            </summary>
            <param name="data"></param>
            <param name="mode">Decompression mode (br/gzip/deflate)</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.Decompress(System.ArraySegment{System.Byte},System.String)">
            <summary>
            Decompresses the array segment of bytes
            </summary>
            <param name="data"></param>
            <param name="mode">Decompression mode (br/gzip/deflate)</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.ToBigInteger(System.Byte[])">
            <summary>
            Converts this array of bytes to big-integer
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.ToBigInteger(System.String)">
            <summary>
            Converts this hexa-string to big-integer
            </summary>
            <param name="hex"></param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.GetAppSetting(Microsoft.Extensions.Configuration.IConfiguration,System.String)">
            <summary>
            Gets a setting section of the app (from the JSON configuration file [appsettings.json])
            </summary>
            <param name="path">The path from root section (ex: Logging/LogLevel/Default)</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.GetAppSetting``1(Microsoft.Extensions.Configuration.IConfiguration,System.String,``0)">
            <summary>
            Gets a setting value of the app (from the JSON configuration file [appsettings.json])
            </summary>
            <param name="path">The path from root section (ex: Logging/LogLevel/Default)</param>
            <param name="default">The default value if the setting is not found</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.GetAppSetting(System.String,System.String,System.String)">
            <summary>
            Gets a setting of the app (from the XML configuration file [app.config/web.config] - section 'appSettings') with special prefix
            </summary>
            <param name="name">The name of the setting</param>
            <param name="default">The default value if the setting is not found</param>
            <param name="prefix">The special name prefix of the parameter</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.GetAppParameter(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Gets a parameter of the app (first from header, then second from query)
            </summary>
            <param name="name">The name of the setting</param>
            <param name="header">The collection of header</param>
            <param name="query">The collection of query</param>
            <param name="default">The default value if the parameter is not found</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.GetAppParameter(System.String,System.Collections.Specialized.NameValueCollection,System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Gets a parameter of the app (first from header, then second from query)
            </summary>
            <param name="name">The name of the setting</param>
            <param name="header">The collection of header</param>
            <param name="query">The collection of query</param>
            <param name="default">The default value if the parameter is not found</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.RunProcess(System.String,System.String,System.Action{System.Object,System.EventArgs},System.Action{System.Object,System.Diagnostics.DataReceivedEventArgs})">
            <summary>
            Runs a process
            </summary>
            <param name="filePath">The string that presents the path to a file to run</param>
            <param name="arguments">The string that presents the arguments to run</param>
            <param name="onExited">The method to handle the Exit event</param>
            <param name="onDataReceived">The method to handle the data receive events (include OutputDataReceived and ErrorDataReceived events)</param>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.KillProcess(System.Diagnostics.Process,System.Action{System.Diagnostics.Process})">
            <summary>
            Kills a process
            </summary>
            <param name="process"></param>
            <param name="action">The action to try to close the process before the process be killed</param>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.KillProcess(System.Int32,System.Action{System.Diagnostics.Process})">
            <summary>
            Kills a process by ID
            </summary>
            <param name="id">The integer that presents the identity of a process</param>
            <param name="action">The action to try to close the process before the process be killed</param>
        </member>
        <member name="M:net.vieapps.Components.Utility.UtilityService.GetVersion(System.Reflection.Assembly,System.Boolean)">
            <summary>
            Gets the string that presents the version number of this assembly
            </summary>
            <param name="assembly"></param>
            <param name="getInfoVersion"></param>
            <returns></returns>
        </member>
        <member name="T:net.vieapps.Components.Utility.SearchQuery">
            <summary>
            Presents a parsed query for searching
            </summary>
        </member>
        <member name="M:net.vieapps.Components.Utility.SearchQuery.#ctor(System.String)">
            <summary>
            Initializes a searching query
            </summary>
            <param name="query"></param>
        </member>
        <member name="M:net.vieapps.Components.Utility.SearchQuery.Parse(System.String)">
            <summary>
            Parses the searching query
            </summary>
            <param name="query"></param>
        </member>
        <member name="T:net.vieapps.Components.Utility.AppConfigurationSectionHandler">
            <summary>
            The handler for processing a custom configuration section of the app
            </summary>
        </member>
        <member name="P:net.vieapps.Components.Utility.AppConfigurationSectionHandler.Section">
            <summary>
            Gets the configuration section
            </summary>
        </member>
        <member name="T:net.vieapps.Components.Utility.TextFileReader">
            <summary>
            Extends the System.IO.StreamReader that reads lines from a file in a particular encoding
            </summary>
        </member>
        <member name="M:net.vieapps.Components.Utility.TextFileReader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:net.vieapps.Components.Utility.TextFileReader"/> class.
            </summary>
            <param name="filePath">The path to file</param>
        </member>
        <member name="M:net.vieapps.Components.Utility.TextFileReader.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:net.vieapps.Components.Utility.TextFileReader.Encoding">
            <summary>
            Gets the current encoding of text file.
            </summary>
        </member>
        <member name="P:net.vieapps.Components.Utility.TextFileReader.Length">
            <summary>
            Gets the length of text file (in bytes).
            </summary>
        </member>
        <member name="P:net.vieapps.Components.Utility.TextFileReader.Position">
            <summary>
            Gets the current position
            </summary>
        </member>
        <member name="M:net.vieapps.Components.Utility.TextFileReader.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seeks to the position (to read next lines from this position)
            </summary>
            <param name="offset">The offset relative to the origin parameter</param>
            <param name="origin">Indicating the reference point used to obtain the new position</param>
            <returns>The new position within the current stream</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.TextFileReader.ReadLine">
            <summary>
            Reads a line of characters (from the current position)
            </summary>
            <returns>The next line from file, or null if the end of file is reached</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.TextFileReader.ReadLineAsync(System.Threading.CancellationToken)">
            <summary>
            Reads a line of characters (from the current position)
            </summary>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The next line from file, or null if the end of file is reached</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.TextFileReader.ReadLines(System.Int32)">
            <summary>
            Reads some lines of characters (from the current position)
            </summary>
            <param name="totalOfLines">The total number of lines to read (set as 0 to read from current position to end of file)</param>
            <returns>The next lines from the file, or empty collectoin if the end of file is reached</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.TextFileReader.ReadLinesAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Reads some lines of characters (from the current position)
            </summary>
            <param name="totalOfLines">The total number of lines to read (set as 0 to read from current position to end of file)</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The next lines from the file, or empty collectoin if the end of file is reached</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.TextFileReader.ReadAllLines">
            <summary>
            Reads all lines of characters of the files
            </summary>
            <returns></returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.TextFileReader.ReadAllLinesAsync(System.Threading.CancellationToken)">
            <summary>
            Reads all lines of characters of the files
            </summary>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:net.vieapps.Components.Utility.RandomBigInteger">
            <summary>
            Represents a pseudo-random number generator, which is a device that produces a sequence of numbers that meet certain statistical requirements for randomness.
            </summary>
        </member>
        <member name="M:net.vieapps.Components.Utility.RandomBigInteger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:net.vieapps.Components.Utility.RandomBigInteger">RandomBigInteger</see> class, using a time-dependent default seed value.
            </summary>
        </member>
        <member name="M:net.vieapps.Components.Utility.RandomBigInteger.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:net.vieapps.Components.Utility.RandomBigInteger">RandomBigInteger</see> class, using the specified seed value.
            </summary>
            <param name="seed"></param>
        </member>
        <member name="M:net.vieapps.Components.Utility.RandomBigInteger.Next(System.Int32)">
            <summary>
            Generates a random positive BigInteger between 0 and 2^bitLength (non-inclusive).
            </summary>
            <param name="length">The number of random bits to generate.</param>
            <returns>A random positive BigInteger between 0 and 2^bitLength (non-inclusive).</returns>
        </member>
        <member name="M:net.vieapps.Components.Utility.RandomBigInteger.Next(System.Numerics.BigInteger,System.Numerics.BigInteger)">
            <summary>
            Generates a random BigInteger between start and end (non-inclusive).
            </summary>
            <param name="minValue">The lower bound.</param>
            <param name="maxValue">The upper bound (non-inclusive).</param>
            <returns>A random BigInteger between start and end (non-inclusive)</returns>
        </member>
        <member name="T:net.vieapps.Components.Utility.ZipService">
            <summary>
            Servicing methods for working with ZIP archive
            </summary>
        </member>
        <member name="M:net.vieapps.Components.Utility.ZipService.Zip(System.Collections.Generic.IEnumerable{System.IO.FileInfo},System.String,System.IO.Compression.CompressionLevel,System.Text.Encoding)">
            <summary>
            Zips a collection of files
            </summary>
            <param name="files"></param>
            <param name="zipFilePath"></param>
            <param name="compressionLevel"></param>
            <param name="encoding"></param>
        </member>
        <member name="M:net.vieapps.Components.Utility.ZipService.ZipAsync(System.Collections.Generic.IEnumerable{System.IO.FileInfo},System.String,System.IO.Compression.CompressionLevel,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            Zips a collection of files
            </summary>
            <param name="files"></param>
            <param name="zipFilePath"></param>
            <param name="compressionLevel"></param>
            <param name="encoding"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:net.vieapps.Components.Utility.ZipService.Zip(System.Collections.Generic.IEnumerable{System.String},System.String,System.IO.Compression.CompressionLevel,System.Text.Encoding)">
            <summary>
            Zips a collection of files
            </summary>
            <param name="files"></param>
            <param name="zipFilePath"></param>
            <param name="compressionLevel"></param>
            <param name="encoding"></param>
        </member>
        <member name="M:net.vieapps.Components.Utility.ZipService.ZipAsync(System.Collections.Generic.IEnumerable{System.String},System.String,System.IO.Compression.CompressionLevel,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            Zips a collection of files
            </summary>
            <param name="files"></param>
            <param name="zipFilePath"></param>
            <param name="compressionLevel"></param>
            <param name="encoding"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:net.vieapps.Components.Utility.ZipService.Zip(System.String,System.String,System.IO.Compression.CompressionLevel,System.Text.Encoding)">
            <summary>
            Zips a folder (with all child contents)
            </summary>
            <param name="sourcePath"></param>
            <param name="zipFilePath"></param>
            <param name="compressionLevel"></param>
            <param name="encoding"></param>
        </member>
        <member name="M:net.vieapps.Components.Utility.ZipService.ZipAsync(System.String,System.String,System.IO.Compression.CompressionLevel,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            Zips a folder (with all child contents)
            </summary>
            <param name="sourcePath"></param>
            <param name="zipFilePath"></param>
            <param name="compressionLevel"></param>
            <param name="encoding"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:net.vieapps.Components.Utility.ZipService.Unzip(System.String,System.String)">
            <summary>
            Unzips a. ZIP archive file to a folder
            </summary>
            <param name="zipFilePath"></param>
            <param name="destinationPath"></param>
        </member>
        <member name="M:net.vieapps.Components.Utility.ZipService.UnzipAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Unzips a. ZIP archive file to a folder
            </summary>
            <param name="zipFilePath"></param>
            <param name="destinationPath"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="T:System.Collections.Specialized.Collection">
            <summary>
            Represents a collection of key/value pairs that are accessible by key or index
            </summary>
        </member>
        <member name="M:System.Collections.Specialized.Collection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Specialized.Collection"/> class
            </summary>
        </member>
        <member name="P:System.Collections.Specialized.Collection.Count">
            <summary>
            Gets the number of key/values pairs contained in the collection
            </summary>
        </member>
        <member name="P:System.Collections.Specialized.Collection.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only
            </summary>
        </member>
        <member name="P:System.Collections.Specialized.Collection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the collection is synchronized
            </summary>
        </member>
        <member name="P:System.Collections.Specialized.Collection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the collection
            </summary>
        </member>
        <member name="P:System.Collections.Specialized.Collection.IsFixedSize">
            <summary>
            Gets a value indicating whether the collection has a fixed size
            </summary>
        </member>
        <member name="P:System.Collections.Specialized.Collection.Keys">
            <summary>
            Gets an object containing the keys in the collection
            </summary>
        </member>
        <member name="P:System.Collections.Specialized.Collection.Values">
            <summary>
            Gets an object containing the values in the collection
            </summary>
        </member>
        <member name="P:System.Collections.Specialized.Collection.Item(System.Object)">
            <summary>
            Gets or sets the value with the specified key
            </summary>
            <param name="key">The key of the value to get or set</param>
            <returns>The value associated with the specified key. If the specified key is not found, attempting to get it returns null, and attempting to set it creates a new element using the specified key</returns>
        </member>
        <member name="P:System.Collections.Specialized.Collection.Item(System.Int32)">
            <summary>
            Gets or sets the value at the specified index
            </summary>
            <param name="index">The zero-based index of the value to get or set</param>
            <returns>The value of the item at the specified index</returns>
        </member>
        <member name="P:System.Collections.Specialized.Collection.AsEnumerableDictionaryEntry">
            <summary>
            Gets the object that cast as enumerable of dictionary entry
            </summary>
        </member>
        <member name="M:System.Collections.Specialized.Collection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the collection to an array, starting at a particular index
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from the collection. The array must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins</param>
        </member>
        <member name="M:System.Collections.Specialized.Collection.Contains(System.Object)">
            <summary>
            Determines whether the collection contains a specific key
            </summary>
            <param name="key">The key to locate in the collection</param>
            <returns>true if the collection contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="M:System.Collections.Specialized.Collection.ContainsKey(System.Object)">
            <summary>
            Determines whether the collection contains a specific key
            </summary>
            <param name="key">The key to locate in the collection</param>
            <returns>true if the collection contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="M:System.Collections.Specialized.Collection.Add(System.Object,System.Object)">
            <summary>
            Adds an element with the specified key and value into the collection with the lowest available index
            </summary>
            <param name="key">The key of the element to add. Key must be not null.</param>
            <param name="value">The value of element to add. Value can be null.</param>
        </member>
        <member name="M:System.Collections.Specialized.Collection.Insert(System.Int32,System.Object,System.Object)">
            <summary>
            Inserts a new element into the collection with the specified key and value at the specified index
            </summary>
            <param name="index">The zero-based index at which the element should be inserted</param>
            <param name="key">The key of the element to add. Key must be not null.</param>
            <param name="value">The value of element to add. Value can be null.</param>
        </member>
        <member name="M:System.Collections.Specialized.Collection.Remove(System.Object)">
            <summary>
            Removes the element with the specified key from the collection
            </summary>
            <param name="key">The key of the element to remove</param>
            <returns>true if the element is successfully removed; otherwise, false. This method also returns false if key was not found in the collection</returns>
        </member>
        <member name="M:System.Collections.Specialized.Collection.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index from the collection
            </summary>
            <param name="index">The zero-based index of the element to remove</param>
        </member>
        <member name="M:System.Collections.Specialized.Collection.Clear">
            <summary>
            Removes all elements from the collection
            </summary>
        </member>
        <member name="M:System.Collections.Specialized.Collection.IndexOf(System.Object)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence within the entire the collection
            </summary>
            <param name="object">The object to locate in the collections. The value can be null for reference types</param>
            <returns>The zero-based index of the first occurrence of item within the entire the collections if found; otherwise, –1.</returns>
        </member>
        <member name="M:System.Collections.Specialized.Collection.IndexOfKey(System.Object)">
            <summary>
            Searches for the specified key and returns the zero-based index of the first occurrence within the entire the collection
            </summary>
            <param name="object">The key to locate in the collections. The value cannot be null</param>
            <returns>The zero-based index of the first occurrence of item within the entire the collections if found; otherwise, –1.</returns>
        </member>
        <member name="M:System.Collections.Specialized.Collection.GetKeyAt(System.Int32)">
            <summary>
            Gets the key of the element at the specified index
            </summary>
            <param name="index">The zero-based index of the element to get the key</param>
            <returns>The key object at the specified index</returns>
        </member>
        <member name="M:System.Collections.Specialized.Collection.GetByIndex(System.Int32)">
            <summary>
            Gets value of the element at the specified index
            </summary>
            <param name="index">The zero-based index of the element</param>
            <returns>The value object at the specified index</returns>
        </member>
        <member name="M:System.Collections.Specialized.Collection.GetByKey(System.Object)">
            <summary>
            Gets value of the element by specified key
            </summary>
            <param name="key">The object that presents the key of the element</param>
            <returns>The value object that specified by the key</returns>
        </member>
        <member name="M:System.Collections.Specialized.Collection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Specialized.Collection.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection</returns>
        </member>
        <member name="M:System.Collections.Specialized.Collection.Enumerator.Reset">
            <summary>
            Resets the enumerator to its initial position, which is before the first element in the collection
            </summary>
        </member>
        <member name="P:System.Collections.Specialized.Collection.Enumerator.Current">
            <summary>
            Gets the value of current element in the collection
            </summary>
        </member>
        <member name="P:System.Collections.Specialized.Collection.Enumerator.Key">
            <summary>
            Gets the key of the current element
            </summary>
        </member>
        <member name="P:System.Collections.Specialized.Collection.Enumerator.Value">
            <summary>
            Gets the value of the current element
            </summary>
        </member>
        <member name="P:System.Collections.Specialized.Collection.Enumerator.Entry">
            <summary>
            Gets both the key and the value of the current element
            </summary>
        </member>
        <member name="T:System.Collections.Generic.Collection`2">
            <summary>
            Represents a generic collection of key/value pairs that are accessible by key or index
            </summary>
            <typeparam name="TKey">The type of all keys</typeparam>
            <typeparam name="TValue">The type of all values</typeparam>
        </member>
        <member name="M:System.Collections.Generic.Collection`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Specialized.Collection">Collection</see> class
            </summary>
            <param name="dictionary">The initialized values</param>
        </member>
        <member name="P:System.Collections.Generic.Collection`2.Item(`0)">
            <summary>
            Gets or sets the value with the specified key
            </summary>
            <param name="key">The key of the value to get or set</param>
            <returns>The value associated with the specified key. If the specified key is not found, attempting to get it returns null, and attempting to set it creates a new element using the specified key</returns>
        </member>
        <member name="P:System.Collections.Generic.Collection`2.Item(System.Int32)">
            <summary>
            Gets or sets the value at the specified index
            </summary>
            <param name="index">The zero-based index of the value to get or set</param>
            <returns>The value of the item at the specified index</returns>
        </member>
        <member name="P:System.Collections.Generic.Collection`2.Keys">
            <summary>
            Gets an object that containing the keys of the collection
            </summary>
        </member>
        <member name="P:System.Collections.Generic.Collection`2.Values">
            <summary>
            Gets an object that containing the values in the collection
            </summary>
        </member>
        <member name="M:System.Collections.Generic.Collection`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the collection to an array, starting at a particular index
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from the collection. The array must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins</param>
        </member>
        <member name="M:System.Collections.Generic.Collection`2.Contains(`0)">
            <summary>
            Determines whether the collection contains a specific key
            </summary>
            <param name="key">The key to locate in the collection</param>
            <returns>true if the collection contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="M:System.Collections.Generic.Collection`2.ContainsKey(`0)">
            <summary>
            Determines whether the collection contains a specific key
            </summary>
            <param name="key">The key to locate in the collection</param>
            <returns>true if the collection contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="M:System.Collections.Generic.Collection`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the collection contains a specific key
            </summary>
            <param name="element">The element that contains both the key and the value</param>
            <returns>true if the collection contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="M:System.Collections.Generic.Collection`2.Add(`0,`1)">
            <summary>
            Adds an element with the specified key and value into the collection with the lowest available index
            </summary>
            <param name="key">The key of the element to add. Key must be not null.</param>
            <param name="value">The value of element to add. Value can be null.</param>
        </member>
        <member name="M:System.Collections.Generic.Collection`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an element into the collection with the lowest available index
            </summary>
            <param name="element">The element that contains both the key and the value</param>
        </member>
        <member name="M:System.Collections.Generic.Collection`2.Insert(System.Int32,`0,`1)">
            <summary>
            Inserts a new element into the collection with the specified key and value at the specified index
            </summary>
            <param name="index">The zero-based index at which the element should be inserted</param>
            <param name="key">The key of the element to add. Key must be not null.</param>
            <param name="value">The value of element to add. Value can be null.</param>
        </member>
        <member name="M:System.Collections.Generic.Collection`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the collection
            </summary>
            <param name="key">The key of the element to remove</param>
            <returns>true if the element is successfully removed; otherwise, false. This method also returns false if key was not found in the collection</returns>
        </member>
        <member name="M:System.Collections.Generic.Collection`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the element with the specified key from the collection
            </summary>
            <param name="element">The element that contains both the key and the value</param>
            <returns>true if the element is successfully removed; otherwise, false. This method also returns false if key was not found in the collection.</returns>
        </member>
        <member name="M:System.Collections.Generic.Collection`2.IndexOf(`1)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence within the entire the collection
            </summary>
            <param name="object">The object to locate in the collections. The value can be null for reference types</param>
            <returns>The zero-based index of the first occurrence of item within the entire the collections if found; otherwise, –1.</returns>
        </member>
        <member name="M:System.Collections.Generic.Collection`2.IndexOfKey(`0)">
            <summary>
            Searches for the specified key and returns the zero-based index of the first occurrence within the entire the collection
            </summary>
            <param name="key">The key to locate in the collections. The value cannot be null</param>
            <returns>The zero-based index of the first occurrence of item within the entire the collections if found; otherwise, –1.</returns>
        </member>
        <member name="M:System.Collections.Generic.Collection`2.GetKeyAt(System.Int32)">
            <summary>
            Gets a key at the specified index
            </summary>
            <param name="index">Index of the key</param>
            <returns>The key object at the specified index</returns>
        </member>
        <member name="M:System.Collections.Generic.Collection`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key
            </summary>
            <param name="key">The key whose value to get</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter</param>
            <returns>true if the object that contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="M:System.Collections.Generic.Collection`2.GetByIndex(System.Int32)">
            <summary>
            Gets value of the element at the specified index
            </summary>
            <param name="index">The zero-based index of the element</param>
            <returns>The value object at the specified index</returns>
        </member>
        <member name="M:System.Collections.Generic.Collection`2.GetByKey(`0)">
            <summary>
            Gets value of the element by specified key
            </summary>
            <param name="key">The object that presents the key of the element</param>
            <returns>The value object that specified by the key</returns>
        </member>
        <member name="M:System.Collections.Generic.Collection`2.First">
            <summary>
            Gets value of the first element
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.Collection`2.Last">
            <summary>
            Gets value of the last element
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.Collection`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.Collection`2.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection</returns>
        </member>
        <member name="M:System.Collections.Generic.Collection`2.Enumerator.Reset">
            <summary>
            Resets the enumerator to its initial position, which is before the first element in the collection
            </summary>
        </member>
        <member name="P:System.Collections.Generic.Collection`2.Enumerator.Key">
            <summary>
            Gets the key of the current element
            </summary>
        </member>
        <member name="P:System.Collections.Generic.Collection`2.Enumerator.Value">
            <summary>
            Gets the value of the current element
            </summary>
        </member>
        <member name="P:System.Collections.Generic.Collection`2.Enumerator.Current">
            <summary>
            Gets the value of current element in the collection
            </summary>
        </member>
        <member name="T:System.Collections.Concurrent.ConcurrentHashSet`1">
            <summary>
            Represents a thread-safe hash-based unique collection (original: https://github.com/i3arnon/ConcurrentHashSet)
            </summary>
            <typeparam name="T">The type of the items in the collection.</typeparam>
            <remarks>All public members of <see cref="T:System.Collections.Concurrent.ConcurrentHashSet`1"/> are thread-safe and may be used concurrently from multiple threads.</remarks>
        </member>
        <member name="P:System.Collections.Concurrent.ConcurrentHashSet`1.Count">
            <summary>
            Gets the number of items contained in the <see
            cref="T:System.Collections.Concurrent.ConcurrentHashSet`1"/>.
            </summary>
            <value>The number of items contained in the <see
            cref="T:System.Collections.Concurrent.ConcurrentHashSet`1"/>.</value>
            <remarks>Count has snapshot semantics and represents the number of items in the <see
            cref="T:System.Collections.Concurrent.ConcurrentHashSet`1"/>
            at the moment when Count was accessed.</remarks>
        </member>
        <member name="P:System.Collections.Concurrent.ConcurrentHashSet`1.IsEmpty">
            <summary>
            Gets a value that indicates whether the <see cref="T:System.Collections.Concurrent.ConcurrentHashSet`1"/> is empty.
            </summary>
            <value>true if the <see cref="T:System.Collections.Concurrent.ConcurrentHashSet`1"/> is empty; otherwise,
            false.</value>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentHashSet`1.#ctor">
            <summary>
            Initializes a new instance of the <see
            cref="T:System.Collections.Concurrent.ConcurrentHashSet`1"/>
            class that is empty, has the default concurrency level, has the default initial capacity, and
            uses the default comparer for the item type.
            </summary>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentHashSet`1.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see
            cref="T:System.Collections.Concurrent.ConcurrentHashSet`1"/>
            class that is empty, has the specified concurrency level and capacity, and uses the default
            comparer for the item type.
            </summary>
            <param name="concurrencyLevel">The estimated number of threads that will update the
            <see cref="T:System.Collections.Concurrent.ConcurrentHashSet`1"/> concurrently.</param>
            <param name="capacity">The initial number of elements that the <see
            cref="T:System.Collections.Concurrent.ConcurrentHashSet`1"/>
            can contain.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="concurrencyLevel"/> is
            less than 1.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="capacity"/> is less than
            0.</exception>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentHashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Concurrent.ConcurrentHashSet`1"/>
            class that contains elements copied from the specified <see
            cref="T:System.Collections.IEnumerable{T}"/>, has the default concurrency
            level, has the default initial capacity, and uses the default comparer for the item type.
            </summary>
            <param name="collection">The <see
            cref="T:System.Collections.IEnumerable{T}"/> whose elements are copied to
            the new
            <see cref="T:System.Collections.Concurrent.ConcurrentHashSet`1"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is a null reference.</exception>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentHashSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Concurrent.ConcurrentHashSet`1"/>
            class that is empty, has the specified concurrency level and capacity, and uses the specified
            <see cref="T:System.Collections.Generic.IEqualityComparer{T}"/>.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer{T}"/>
            implementation to use when comparing items.</param>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentHashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Concurrent.ConcurrentHashSet`1"/>
            class that contains elements copied from the specified <see
            cref="T:System.Collections.IEnumerable"/>, has the default concurrency level, has the default
            initial capacity, and uses the specified
            <see cref="T:System.Collections.Generic.IEqualityComparer{T}"/>.
            </summary>
            <param name="collection">The <see
            cref="T:System.Collections.IEnumerable{T}"/> whose elements are copied to
            the new
            <see cref="T:System.Collections.Concurrent.ConcurrentHashSet`1"/>.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer{T}"/>
            implementation to use when comparing items.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is a null reference
            (Nothing in Visual Basic).
            </exception>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentHashSet`1.#ctor(System.Int32,System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Concurrent.ConcurrentHashSet`1"/> 
            class that contains elements copied from the specified <see cref="T:System.Collections.IEnumerable"/>, 
            has the specified concurrency level, has the specified initial capacity, and uses the specified 
            <see cref="T:System.Collections.Generic.IEqualityComparer{T}"/>.
            </summary>
            <param name="concurrencyLevel">The estimated number of threads that will update the 
            <see cref="T:System.Collections.Concurrent.ConcurrentHashSet`1"/> concurrently.</param>
            <param name="collection">The <see cref="T:System.Collections.IEnumerable{T}"/> whose elements are copied to the new 
            <see cref="T:System.Collections.Concurrent.ConcurrentHashSet`1"/>.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer{T}"/> implementation to use 
            when comparing items.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="concurrencyLevel"/> is less than 1.
            </exception>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentHashSet`1.#ctor(System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Concurrent.ConcurrentHashSet`1"/>
            class that is empty, has the specified concurrency level, has the specified initial capacity, and
            uses the specified <see cref="T:System.Collections.Generic.IEqualityComparer{T}"/>.
            </summary>
            <param name="concurrencyLevel">The estimated number of threads that will update the
            <see cref="T:System.Collections.Concurrent.ConcurrentHashSet`1"/> concurrently.</param>
            <param name="capacity">The initial number of elements that the <see
            cref="T:System.Collections.Concurrent.ConcurrentHashSet`1"/>
            can contain.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer{T}"/>
            implementation to use when comparing items.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="concurrencyLevel"/> is less than 1. -or-
            <paramref name="capacity"/> is less than 0.
            </exception>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentHashSet`1.Add(`0)">
            <summary>
            Adds the specified item to the <see cref="T:System.Collections.Concurrent.ConcurrentHashSet`1"/>.
            </summary>
            <param name="item">The item to add.</param>
            <returns>true if the items was added to the <see cref="T:System.Collections.Concurrent.ConcurrentHashSet`1"/>
            successfully; false if it already exists.</returns>
            <exception cref="T:System.OverflowException">The <see cref="T:System.Collections.Concurrent.ConcurrentHashSet`1"/>
            contains too many items.</exception>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentHashSet`1.TryRemove(`0)">
            <summary>
            Attempts to remove the item from the <see cref="T:System.Collections.Concurrent.ConcurrentHashSet`1"/>.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>true if an item was removed successfully; otherwise, false.</returns>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentHashSet`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Concurrent.ConcurrentHashSet`1"/>.
            </summary>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentHashSet`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Concurrent.ConcurrentHashSet`1"/> contains the specified
            item.
            </summary>
            <param name="item">The item to locate in the <see cref="T:System.Collections.Concurrent.ConcurrentHashSet`1"/>.</param>
            <returns>true if the <see cref="T:System.Collections.Concurrent.ConcurrentHashSet`1"/> contains the item; otherwise, false.</returns>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentHashSet`1.GetEnumerator">
            <summary>Returns an enumerator that iterates through the <see cref="T:System.Collections.Concurrent.ConcurrentHashSet`1"/>.</summary>
            <returns>An enumerator for the <see cref="T:System.Collections.Concurrent.ConcurrentHashSet`1"/>.</returns>
            <remarks>
            The enumerator returned from the collection is safe to use concurrently with
            reads and writes to the collection, however it does not represent a moment-in-time snapshot
            of the collection.  The contents exposed through the enumerator may contain modifications
            made to the collection after <see cref="M:System.Collections.Concurrent.ConcurrentHashSet`1.GetEnumerator"/> was called.
            </remarks>
        </member>
    </members>
</doc>
