<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dapplo.Config.Ini</name>
    </assembly>
    <members>
        <member name="T:Dapplo.Config.Ini.Converters.StringEncryptionTypeConverter">
            <summary>
                This converter makes it possible to store values in an ini file, somewhat secure.
                Please make sure to initialize the RgbKey/RgbIv before it is used.
            </summary>
        </member>
        <member name="M:Dapplo.Config.Ini.Converters.StringEncryptionTypeConverter.#ctor">
            <summary>
                The constructor validates all settings
            </summary>
        </member>
        <member name="P:Dapplo.Config.Ini.Converters.StringEncryptionTypeConverter.Algorithm">
            <summary>
                The algorithm to use for the encrypt/decrypt, default is Rijndael
            </summary>
        </member>
        <member name="P:Dapplo.Config.Ini.Converters.StringEncryptionTypeConverter.RgbIv">
            <summary>
                The initialization vector to use for the symmetric algorithm.
            </summary>
        </member>
        <member name="P:Dapplo.Config.Ini.Converters.StringEncryptionTypeConverter.RgbKey">
            <summary>
                The secret key to use for the symmetric algorithm.
            </summary>
        </member>
        <member name="M:Dapplo.Config.Ini.Converters.StringEncryptionTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
                Can we convert from? As we decrypt from a string, the sourceType needs to be string
            </summary>
            <param name="context">ITypeDescriptorContext</param>
            <param name="sourceType">Type</param>
            <returns>bool</returns>
        </member>
        <member name="M:Dapplo.Config.Ini.Converters.StringEncryptionTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
                Can we convert to? As we create a string, the destinationType needs to be string
            </summary>
            <param name="context">ITypeDescriptorContext</param>
            <param name="destinationType">Type</param>
            <returns>bool</returns>
        </member>
        <member name="M:Dapplo.Config.Ini.Converters.StringEncryptionTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
                To decrypt call this
            </summary>
            <param name="context">ITypeDescriptorContext</param>
            <param name="culture">CultureInfo</param>
            <param name="value">object</param>
            <returns>object</returns>
        </member>
        <member name="M:Dapplo.Config.Ini.Converters.StringEncryptionTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
                To encrypt call this
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:Dapplo.Config.Ini.Converters.StringEncryptionTypeConverter.Decrypt(System.String)">
            <summary>
                A simply decryption, can be used to store passwords
            </summary>
            <param name="encryptedText">a base64 encoded encrypted string</param>
            <returns>Decrypeted text</returns>
        </member>
        <member name="M:Dapplo.Config.Ini.Converters.StringEncryptionTypeConverter.Encrypt(System.String)">
            <summary>
                A simply encryption, can be used to store passwords
            </summary>
            <param name="clearText">the string to call upon</param>
            <returns>an encryped string in base64 form</returns>
        </member>
        <member name="T:Dapplo.Config.Ini.Extensions.PropertyInfoExtension">
            <summary>
                Extensions for PropertyInfo
            </summary>
        </member>
        <member name="M:Dapplo.Config.Ini.Extensions.PropertyInfoExtension.GetIniPropertyBehavior(System.Reflection.PropertyInfo)">
            <summary>
                Get the IniPropertyBehaviorAttribute
            </summary>
            <param name="propertyInfo">PropertyInfo</param>
            <returns>IniPropertyBehaviorAttribute</returns>
        </member>
        <member name="T:Dapplo.Config.Ini.IIniSection">
            <summary>
                By making your property proxy interface extend this, you will be able to write the property to an ini file
            </summary>
        </member>
        <member name="M:Dapplo.Config.Ini.IIniSection.GetIniValue(System.String)">
            <summary>
                Get the IniValue for a property, this is quicker and uses less memory than to iterate over the GetIniValues result
            </summary>
            <param name="propertyName">Name of the property</param>
            <returns>IniValue</returns>
        </member>
        <member name="M:Dapplo.Config.Ini.IIniSection.GetIniValues">
            <summary>
                Retrieve all the ini values
            </summary>
            <returns>readonly dictionary</returns>
        </member>
        <member name="M:Dapplo.Config.Ini.IIniSection.GetSectionDescription">
            <summary>
                Get the Description of the Ini-Section
            </summary>
        </member>
        <member name="M:Dapplo.Config.Ini.IIniSection.GetSectionName">
            <summary>
                Name of the Ini-Section, should be set on your property interface with
            </summary>
        </member>
        <member name="M:Dapplo.Config.Ini.IIniSection.TryGetIniValue(System.String,Dapplo.Config.Ini.IniValue@)">
            <summary>
                Try to get the IniValue for a property, this is quicker and uses less memory than to iterate over the GetIniValues
                result
            </summary>
            <param name="propertyName">Name of the property</param>
            <param name="value">out IniValue</param>
            <returns>bool with true if found</returns>
        </member>
        <member name="M:Dapplo.Config.Ini.IIniSection.Setter(System.String,System.Object)">
            <summary>
            This is the setter of the configuration base, made public
            </summary>
            <param name="propertyName">string</param>
            <param name="value">object</param>
        </member>
        <member name="M:Dapplo.Config.Ini.IIniSection.Getter(System.String)">
            <summary>
            This is the getter of the configuration base, made public
            </summary>
            <param name="propertyName">string</param>
            <returns>object</returns>
        </member>
        <member name="M:Dapplo.Config.Ini.IIniSection.RegisterAfterLoad(System.Action{Dapplo.Config.Ini.IIniSection})">
            <summary>
                This is called after the loading of the IniSection is finished and can be used to modify certain values before they are being used.
            </summary>
        </member>
        <member name="M:Dapplo.Config.Ini.IIniSection.RegisterAfterSave(System.Action{Dapplo.Config.Ini.IIniSection})">
            <summary>
                This is called after the saving of the IniSection is finished and can be used to modify certain values
            </summary>
        </member>
        <member name="M:Dapplo.Config.Ini.IIniSection.RegisterBeforeSave(System.Action{Dapplo.Config.Ini.IIniSection})">
            <summary>
                This is called before the saving of the IniSection is started and can be used to modify certain values
            </summary>
        </member>
        <member name="T:Dapplo.Config.Ini.IIniSectionInternal">
            <summary>
                By making your property proxy interface extend this, you will be able to write the property to an ini file
            </summary>
        </member>
        <member name="P:Dapplo.Config.Ini.IIniSectionInternal.OnAfterLoad">
            <summary>
                This is called after the loading of the IniSection is finished and can be used to modify certain values before they are being used.
            </summary>
        </member>
        <member name="P:Dapplo.Config.Ini.IIniSectionInternal.OnAfterSave">
            <summary>
                This is called after the saving of the IniSection is finished and can be used to modify certain values
            </summary>
        </member>
        <member name="P:Dapplo.Config.Ini.IIniSectionInternal.OnBeforeSave">
            <summary>
                This is called before the saving of the IniSection is started and can be used to modify certain values
            </summary>
        </member>
        <member name="T:Dapplo.Config.Ini.Implementation.FileLocations">
            <summary>
                Some utils for managing the location of files
            </summary>
        </member>
        <member name="P:Dapplo.Config.Ini.Implementation.FileLocations.StartupDirectory">
            <summary>
                Get the startup location, which is either the location of the entry assemby, or the executing assembly
            </summary>
            <returns>string with the directory of where the running code/applicationName was started</returns>
        </member>
        <member name="M:Dapplo.Config.Ini.Implementation.FileLocations.RoamingAppDataDirectory(System.String)">
            <summary>
                Get the roaming AppData directory
            </summary>
            <returns>string with the directory the appdata roaming directory</returns>
        </member>
        <member name="M:Dapplo.Config.Ini.Implementation.FileLocations.Scan(System.Collections.Generic.IEnumerable{System.String},System.Text.RegularExpressions.Regex,System.IO.SearchOption)">
            <summary>
                Scan the supplied directories for files which match the passed file pattern
            </summary>
            <param name="directories"></param>
            <param name="filePattern">Regular expression for the filename</param>
            <param name="searchOption">
                Makes it possible to specify if the search is recursive, SearchOption.AllDirectories is
                default, use SearchOption.TopDirectoryOnly for non recursive
            </param>
            <returns>IEnumerable with paths</returns>
        </member>
        <member name="M:Dapplo.Config.Ini.Implementation.FileLocations.Scan(System.Collections.Generic.IEnumerable{System.String},System.String,System.IO.SearchOption)">
            <summary>
                Scan the supplied directories for files which match the passed file pattern
            </summary>
            <param name="directories"></param>
            <param name="simplePattern"></param>
            <param name="searchOption">
                Makes it possible to specify if the search is recursive, SearchOption.AllDirectories is
                default, use SearchOption.TopDirectoryOnly for non recursive
            </param>
            <returns>IEnumerable with paths</returns>
        </member>
        <member name="M:Dapplo.Config.Ini.Implementation.FileLocations.DirectoriesFor(System.String,System.Boolean)">
            <summary>
                For the given directory this will return possible location.
                It might be that multiple are returned, also normalization is made
            </summary>
            <param name="directory">A absolute or relative directory</param>
            <param name="allowCurrentDirectory">true to allow relative to current working directory</param>
            <returns>IEnumerable with possible directories</returns>
        </member>
        <member name="T:Dapplo.Config.Ini.Implementation.IniFile">
            <summary>
                Functionality to read/write a .ini file
            </summary>
        </member>
        <member name="M:Dapplo.Config.Ini.Implementation.IniFile.ReadAsync(System.String,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
                Read an ini file to a Dictionary, each key is a iniSection and the value is a Dictionary with name and values.
            </summary>
            <param name="path">Path to file</param>
            <param name="encoding">Encoding</param>
            <param name="cancellationToken">CancellationToken</param>
            <returns>dictionary of sections - dictionaries with the properties</returns>
        </member>
        <member name="M:Dapplo.Config.Ini.Implementation.IniFile.ReadAsync(System.IO.Stream,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
                Read an stream of an Ini-file to a Dictionary, each key is a iniSection and the value is a Dictionary with name and
                values.
            </summary>
            <param name="stream">Stream e.g. fileStream with the ini content</param>
            <param name="encoding">Encoding</param>
            <param name="cancellationToken">CancellationToken</param>
            <returns>dictionary of sections - dictionaries with the properties</returns>
        </member>
        <member name="M:Dapplo.Config.Ini.Implementation.IniFile.ReadEscape(System.String)">
            <summary>
                change escaped newlines to newlines, and any other conversions that might be needed
            </summary>
            <param name="iniValue">encoded string value</param>
            <returns>string</returns>
        </member>
        <member name="M:Dapplo.Config.Ini.Implementation.IniFile.WriteAsync(System.String,System.Text.Encoding,System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IDictionary{System.String,System.String}},System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IDictionary{System.String,System.String}},System.Threading.CancellationToken)">
            <summary>
                Read an ini file to a Dictionary, each key is a iniSection and the value is a Dictionary with name and values.
            </summary>
            <param name="path">Path to file</param>
            <param name="encoding">Encoding</param>
            <param name="sections">A dictionary with dictionaries with values for every section</param>
            <param name="sectionComments">A dictionary with the optional comments for the file</param>
            <param name="cancellationToken">CancellationToken</param>
        </member>
        <member name="M:Dapplo.Config.Ini.Implementation.IniFile.WriteAsync(System.IO.Stream,System.Text.Encoding,System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IDictionary{System.String,System.String}},System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IDictionary{System.String,System.String}},System.Threading.CancellationToken)">
            <summary>
                Write the supplied properties to the stream
            </summary>
            <param name="stream">Stream</param>
            <param name="encoding">Encoding</param>
            <param name="sections">IDictionary</param>
            <param name="sectionsComments">Optional IDictionary for comments</param>
            <param name="cancellationToken">CancellationToken</param>
        </member>
        <member name="M:Dapplo.Config.Ini.Implementation.IniFile.WriteEscape(System.String)">
            <summary>
                change newlines to escaped newlines, and any other conversions that might be needed
            </summary>
            <param name="iniValue">string</param>
            <returns>encoded string value</returns>
        </member>
        <member name="T:Dapplo.Config.Ini.Implementation.TypeDescriptorContext">
            <summary>
                Used internally for type conversion
            </summary>
        </member>
        <member name="M:Dapplo.Config.Ini.Implementation.TypeDescriptorContext.#ctor(System.Object,System.ComponentModel.PropertyDescriptor)">
            <inheritdoc />
        </member>
        <member name="P:Dapplo.Config.Ini.Implementation.TypeDescriptorContext.System#ComponentModel#ITypeDescriptorContext#Container">
            <inheritdoc />
        </member>
        <member name="P:Dapplo.Config.Ini.Implementation.TypeDescriptorContext.System#ComponentModel#ITypeDescriptorContext#Instance">
            <inheritdoc />
        </member>
        <member name="M:Dapplo.Config.Ini.Implementation.TypeDescriptorContext.System#ComponentModel#ITypeDescriptorContext#OnComponentChanged">
            <inheritdoc />
        </member>
        <member name="M:Dapplo.Config.Ini.Implementation.TypeDescriptorContext.System#ComponentModel#ITypeDescriptorContext#OnComponentChanging">
            <inheritdoc />
        </member>
        <member name="P:Dapplo.Config.Ini.Implementation.TypeDescriptorContext.System#ComponentModel#ITypeDescriptorContext#PropertyDescriptor">
            <inheritdoc />
        </member>
        <member name="M:Dapplo.Config.Ini.Implementation.TypeDescriptorContext.System#IServiceProvider#GetService(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Dapplo.Config.Ini.IniFileConfig">
            <summary>
            This specifies the configuration for the IniFile
            </summary>
        </member>
        <member name="P:Dapplo.Config.Ini.IniFileConfig.ApplicationName">
            <summary>
            The name of the application, used for the directory
            </summary>
        </member>
        <member name="P:Dapplo.Config.Ini.IniFileConfig.FileName">
            <summary>
            The name of the file
            </summary>
        </member>
        <member name="P:Dapplo.Config.Ini.IniFileConfig.FixedDirectory">
            <summary>
            Specify a path if you don't want to use the default loading
            </summary>
        </member>
        <member name="P:Dapplo.Config.Ini.IniFileConfig.AutoSaveInterval">
            <summary>
            0 to disable or the amount of milliseconds that pending changes are written
            </summary>
        </member>
        <member name="P:Dapplo.Config.Ini.IniFileConfig.WatchFileChanges">
            <summary>
            True to enable file system watching
            </summary>
        </member>
        <member name="P:Dapplo.Config.Ini.IniFileConfig.SaveOnExit">
            <summary>
            True to save the changes on exit
            </summary>
        </member>
        <member name="P:Dapplo.Config.Ini.IniFileConfig.DefaultsPostfix">
            <summary>
            The postfix for the defaults file
            </summary>
        </member>
        <member name="P:Dapplo.Config.Ini.IniFileConfig.ContantsPostfix">
            <summary>
            The postfix for the constants file
            </summary>
        </member>
        <member name="P:Dapplo.Config.Ini.IniFileConfig.IniExtension">
            <summary>
            The extension for the ini file
            </summary>
        </member>
        <member name="P:Dapplo.Config.Ini.IniFileConfig.FileEncoding">
            <summary>
            Specify what file encoding needs to be used, default is Encoding.UTF8
            </summary>
        </member>
        <member name="T:Dapplo.Config.Ini.IniFileConfigBuilder">
            <summary>
            This is a builder for the IniFileConfig
            </summary>
        </member>
        <member name="P:Dapplo.Config.Ini.IniFileConfigBuilder.IsBuild">
            <summary>
            True if the ApplicationConfig was already build.
            </summary>
        </member>
        <member name="M:Dapplo.Config.Ini.IniFileConfigBuilder.#ctor">
            <summary>
            Private constructor, to prevent constructing this.
            Please use the Create factory method.
            </summary>
        </member>
        <member name="M:Dapplo.Config.Ini.IniFileConfigBuilder.Create">
            <summary>
            Factory
            </summary>
            <returns>IniFileConfigBuilder</returns>
        </member>
        <member name="M:Dapplo.Config.Ini.IniFileConfigBuilder.BuildIniFileConfig">
            <summary>
            Build or finalize the configuration, so it can be used
            </summary>
            <returns>IniFileConfig</returns>
        </member>
        <member name="M:Dapplo.Config.Ini.IniFileConfigBuilder.WithApplicationName(System.String)">
            <summary>
            Change the application name
            </summary>
            <param name="applicationName">string</param>
            <returns>ApplicationConfigBuilder</returns>
        </member>
        <member name="M:Dapplo.Config.Ini.IniFileConfigBuilder.WithoutSaveOnExit">
            <summary>
            Disable SaveOnExit
            </summary>
            <returns>IniFileConfigBuilder</returns>
        </member>
        <member name="M:Dapplo.Config.Ini.IniFileConfigBuilder.WithoutWatchingChanges">
            <summary>
            Disable WatchFileChanges
            </summary>
            <returns>IniFileConfigBuilder</returns>
        </member>
        <member name="M:Dapplo.Config.Ini.IniFileConfigBuilder.WithFilename(System.String)">
            <summary>
            Specify the filename to use
            </summary>
            <param name="filename">string</param>
            <returns>IniFileConfigBuilder</returns>
        </member>
        <member name="M:Dapplo.Config.Ini.IniFileConfigBuilder.WithFixedDirectory(System.String)">
            <summary>
            Specify a directory if you want to read and write from a specific directory, instead of using the default logic.
            </summary>
            <param name="directory">string</param>
            <returns>IniFileConfigBuilder</returns>
        </member>
        <member name="M:Dapplo.Config.Ini.IniFileConfigBuilder.WithAutoSaveInterval(System.UInt32)">
            <summary>
            Specify the auto save interval
            </summary>
            <param name="interval">uint interval</param>
            <returns>IniFileConfigBuilder</returns>
        </member>
        <member name="T:Dapplo.Config.Ini.IniFileContainer">
            <summary>
            This contains all the ini sections in one ini file
            </summary>
        </member>
        <member name="F:Dapplo.Config.Ini.IniFileContainer._iniSections">
            <summary>
            All the ini sections for this file
            </summary>
        </member>
        <member name="M:Dapplo.Config.Ini.IniFileContainer.#ctor(Dapplo.Config.Ini.IniFileConfig,System.Collections.Generic.IEnumerable{Dapplo.Config.Ini.IIniSection})">
            <summary>
            The constructor for an IniFileContainer
            </summary>
            <param name="iniFileConfig">IniFileConfig</param>
            <param name="iniSections">IEnumerable of IIniSection</param>
        </member>
        <member name="P:Dapplo.Config.Ini.IniFileContainer.Item(System.String)">
            <summary>
                Indexer for Ini sections
            </summary>
            <param name="iniSectionName">string</param>
            <returns>IIniSection</returns>
        </member>
        <member name="M:Dapplo.Config.Ini.IniFileContainer.HasPendingChanges">
            <summary>
            Check if this IniFileContainer has changes which were not written yet
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:Dapplo.Config.Ini.IniFileContainer.CreateAutosaveTimer(System.UInt32)">
            <summary>
            Create a time for the auto-save functionality
            </summary>
            <param name="autoSaveInterval">uint with the interval</param>
            <returns>Timer</returns>
        </member>
        <member name="P:Dapplo.Config.Ini.IniFileContainer.IniLocation">
            <summary>
            The location for this ini file
            </summary>
        </member>
        <member name="M:Dapplo.Config.Ini.IniFileContainer.CreateFileLocation(System.Boolean,System.String,System.String)">
            <summary>
                Helper to create the location of a file
            </summary>
            <param name="checkStartupDirectory"></param>
            <param name="postfix"></param>
            <param name="specifiedDirectory"></param>
            <returns>File location</returns>
        </member>
        <member name="M:Dapplo.Config.Ini.IniFileContainer.ReadFromStreamAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
                Initialize the IniConfig by reading all the properties from the stream
                If this is called directly after construction, no files will be read which is useful for testing!
            </summary>
        </member>
        <member name="M:Dapplo.Config.Ini.IniFileContainer.FillSection(Dapplo.Config.Ini.IIniSection)">
            <summary>
                Helper method to fill the values of one section
            </summary>
            <param name="iniSection"></param>
        </member>
        <member name="M:Dapplo.Config.Ini.IniFileContainer.FillSection(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IDictionary{System.String,System.String}},Dapplo.Config.Ini.IIniSection)">
            <summary>
                Put the values from the iniProperties to the proxied object
            </summary>
            <param name="iniSections"></param>
            <param name="iniSection"></param>
        </member>
        <member name="M:Dapplo.Config.Ini.IniFileContainer.FillSections">
            <summary>
                Internal method, use the supplied ini-sections and properties to fill the sectoins
            </summary>
        </member>
        <member name="M:Dapplo.Config.Ini.IniFileContainer.ReloadAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
                This is reloading all the .ini files, and will refill the sections.
                If reset = true, ALL setting are lost
                Otherwise only the properties in the files will overwrite your settings.
                Usually this should not directly be called, unless you know that the file was changed by an external process.
            </summary>
            <param name="reset">true: ALL setting are lost</param>
            <param name="cancellationToken">CancellationToken</param>
        </member>
        <member name="M:Dapplo.Config.Ini.IniFileContainer.ReloadInternalAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
                This is reloading all the .ini files, and will refill the sections.
                If reset = true, ALL setting are lost
                Otherwise only the properties in the files will overwrite your settings.
                Usually this should not directly be called, unless you know that the file was changed by an external process.
            </summary>
            <param name="reset">true: ALL setting are lost</param>
            <param name="cancellationToken">CancellationToken</param>
        </member>
        <member name="M:Dapplo.Config.Ini.IniFileContainer.ResetAsync(System.Threading.CancellationToken)">
            <summary>
                Reset all the values, in all the registered ini sections, to their defaults
            </summary>
        </member>
        <member name="M:Dapplo.Config.Ini.IniFileContainer.ResetInternal">
            <summary>
                Reset all the values, in all the registered ini sections, to their defaults
                Important, this only works for types that extend IDefaultValue
            </summary>
        </member>
        <member name="M:Dapplo.Config.Ini.IniFileContainer.WriteAsync(System.Threading.CancellationToken)">
            <summary>
                Write the ini file
            </summary>
        </member>
        <member name="M:Dapplo.Config.Ini.IniFileContainer.WriteToStreamAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
                Write all the IIniSections to the stream, this is also used for testing
            </summary>
            <param name="stream">Stream to write to</param>
            <param name="cancellationToken">CancellationToken</param>
            <returns>Task</returns>
        </member>
        <member name="M:Dapplo.Config.Ini.IniFileContainer.WriteToStreamInternalAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
                Store the ini to the supplied stream
            </summary>
            <param name="stream"></param>
            <param name="cancellationToken">CancellationToken</param>
            <returns>Task to await</returns>
        </member>
        <member name="M:Dapplo.Config.Ini.IniFileContainer.CreateSaveValues(Dapplo.Config.Ini.IIniSection,System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IDictionary{System.String,System.String}})">
            <summary>
                Helper method to create ini section values for writing.
                The actual values are stored in the _ini
            </summary>
            <param name="iniSection">Section to write</param>
            <param name="iniSectionsComments">Comments</param>
        </member>
        <member name="M:Dapplo.Config.Ini.IniFileContainer.EnableFileWatcher(System.Boolean)">
            <summary>
                Create a FileSystemWatcher to detect changes
            </summary>
            <param name="enable">true to enable the watcher</param>
        </member>
        <member name="T:Dapplo.Config.Ini.IniPropertyBehaviorAttribute">
            <summary>
                Use this attribute on Properties where you want to influence the ini config behavior.
            </summary>
        </member>
        <member name="M:Dapplo.Config.Ini.IniPropertyBehaviorAttribute.#ctor">
            <summary>
                Constructor
            </summary>
        </member>
        <member name="P:Dapplo.Config.Ini.IniPropertyBehaviorAttribute.IgnoreErrors">
            <summary>
                Set ignore errors to false, if you want an exception when a parse error occurs.
                Default this is set to true, which will cause the property to have the "default" value.
            </summary>
        </member>
        <member name="P:Dapplo.Config.Ini.IniPropertyBehaviorAttribute.IsIgnoreErrorsSet">
            <summary>
                Specifies if the IgnoreErrors was specified or is default
            </summary>
        </member>
        <member name="P:Dapplo.Config.Ini.IniPropertyBehaviorAttribute.Read">
            <summary>
                Default is true, set read to false to skip reading.
                Although this might be unlikely, examples are:
                1 A property with the last changed date, which might not be the date of the file
                2 A property with the application or component version which "processed" the configuration
            </summary>
        </member>
        <member name="P:Dapplo.Config.Ini.IniPropertyBehaviorAttribute.Write">
            <summary>
                Default is true, set write to false to skip serializing.
            </summary>
        </member>
        <member name="T:Dapplo.Config.Ini.IniSection`1">
            <summary>
            This is the base class for an IniSection, it bases on the ConfigurationBase and should be used as the base for an ini-section.
            </summary>
            <typeparam name="TInterface">The interface which this configuration implements</typeparam>
        </member>
        <member name="M:Dapplo.Config.Ini.IniSection`1.Create">
            <summary>
            Factory for IniSection implementations
            </summary>
            <returns>TInterface</returns>
        </member>
        <member name="M:Dapplo.Config.Ini.IniSection`1.#ctor">
            <summary>
            Constructor for the IniSection based objects
            </summary>
        </member>
        <member name="M:Dapplo.Config.Ini.IniSection`1.PropertyInitializer(System.Reflection.PropertyInfo)">
            <inheritdoc />
        </member>
        <member name="P:Dapplo.Config.Ini.IniSection`1.OnAfterLoad">
            <summary>
            The action to run after the ini section is loaded
            </summary>
        </member>
        <member name="P:Dapplo.Config.Ini.IniSection`1.OnAfterSave">
            <summary>
            The action to run after the ini section is stored
            </summary>
        </member>
        <member name="P:Dapplo.Config.Ini.IniSection`1.OnBeforeSave">
            <summary>
            The action to run before the ini section is stored
            </summary>
        </member>
        <member name="M:Dapplo.Config.Ini.IniSection`1.RegisterAfterLoad(System.Action{Dapplo.Config.Ini.IIniSection})">
            <inheritdoc />
        </member>
        <member name="M:Dapplo.Config.Ini.IniSection`1.RegisterAfterSave(System.Action{Dapplo.Config.Ini.IIniSection})">
            <inheritdoc />
        </member>
        <member name="M:Dapplo.Config.Ini.IniSection`1.RegisterBeforeSave(System.Action{Dapplo.Config.Ini.IIniSection})">
            <inheritdoc />
        </member>
        <member name="M:Dapplo.Config.Ini.IniSection`1.GetIniValue(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Dapplo.Config.Ini.IniSection`1.GetIniValues">
            <inheritdoc />
        </member>
        <member name="M:Dapplo.Config.Ini.IniSection`1.GetSectionDescription">
            <inheritdoc />
        </member>
        <member name="M:Dapplo.Config.Ini.IniSection`1.GetSectionName">
            <inheritdoc />
        </member>
        <member name="M:Dapplo.Config.Ini.IniSection`1.TryGetIniValue(System.String,Dapplo.Config.Ini.IniValue@)">
            <inheritdoc />
        </member>
        <member name="T:Dapplo.Config.Ini.IniSectionAttribute">
            <summary>
                This attribute should be used to mark a class as IniSection
            </summary>
        </member>
        <member name="M:Dapplo.Config.Ini.IniSectionAttribute.#ctor(System.String)">
            <summary>
                Constructor
            </summary>
            <param name="name">Name of the ini-section</param>
        </member>
        <member name="P:Dapplo.Config.Ini.IniSectionAttribute.IgnoreErrors">
            <summary>
                Set ignore errors to false, if you want an exception when a parse error occurs.
                Default this is set to true, which will cause the property to have the "default" value.
            </summary>
        </member>
        <member name="P:Dapplo.Config.Ini.IniSectionAttribute.Name">
            <summary>
                Name of the section in the ini file
            </summary>
        </member>
        <member name="T:Dapplo.Config.Ini.IniValue">
            <summary>
                Container for supplying the properties to the Ini file
            </summary>
        </member>
        <member name="M:Dapplo.Config.Ini.IniValue.#ctor(Dapplo.Config.Ini.IIniSection,System.Reflection.PropertyInfo)">
            <summary>
                The constructor of an IniValue
            </summary>
            <param name="iniSection">IIniSection</param>
            <param name="propertyInfo">PropertyInfo</param>
        </member>
        <member name="P:Dapplo.Config.Ini.IniValue.Behavior">
            <summary>
                Specific behavior of the ini-value
                This describes if the value should be read or written
            </summary>
        </member>
        <member name="P:Dapplo.Config.Ini.IniValue.Category">
            <summary>
                Category, which was set via the CategoryAttribute on the property
            </summary>
        </member>
        <member name="P:Dapplo.Config.Ini.IniValue.Converter">
            <summary>
                Return the TypeConverter for this value, when not set defaults are used
            </summary>
        </member>
        <member name="P:Dapplo.Config.Ini.IniValue.DefaultValue">
            <summary>
                Default value, from the DefaultAttribute
            </summary>
        </member>
        <member name="P:Dapplo.Config.Ini.IniValue.Description">
            <summary>
                Description, which was set via the DescriptionAttribute on the property
            </summary>
        </member>
        <member name="P:Dapplo.Config.Ini.IniValue.EmitDefaultValue">
            <summary>
                If this is set to true, we also should write the default value to the file
            </summary>
        </member>
        <member name="P:Dapplo.Config.Ini.IniValue.HasValue">
            <summary>
                Check if this IniValue has a value
            </summary>
        </member>
        <member name="P:Dapplo.Config.Ini.IniValue.IniPropertyName">
            <summary>
                Name of the property in the file, this could be different
            </summary>
        </member>
        <member name="P:Dapplo.Config.Ini.IniValue.IsWriteNeeded">
            <summary>
                Check if this IniValue needs to be written.
                This returns false if there is no value, or if the value is the default and if EmitDefaultValue is false (Default)
            </summary>
        </member>
        <member name="P:Dapplo.Config.Ini.IniValue.PropertyName">
            <summary>
                Name of the property in the interface
            </summary>
        </member>
        <member name="P:Dapplo.Config.Ini.IniValue.Value">
            <summary>
                Current value
            </summary>
        </member>
        <member name="P:Dapplo.Config.Ini.IniValue.ValueType">
            <summary>
                Type for the value, needed for conversion when reading.
            </summary>
        </member>
        <member name="M:Dapplo.Config.Ini.IniValue.ResetToDefault">
            <summary>
                Reset the value to a default
            </summary>
        </member>
        <member name="T:Dapplo.Config.Ini.Rest.IniRest">
            <summary>
                This class implements a "REST" API for the Ini configuration
            </summary>
        </member>
        <member name="M:Dapplo.Config.Ini.Rest.IniRest.ProcessRestCommand(Dapplo.Config.Ini.Rest.IniRestCommand,Dapplo.Config.Ini.IniFileContainer)">
            <summary>
                Process the supplied IniRestCommand
            </summary>
            <param name="restCommand">IniRestCommand to process</param>
            <param name="iniFileContainer">IniFileContainer</param>
        </member>
        <member name="M:Dapplo.Config.Ini.Rest.IniRest.ProcessRestUri(System.Uri,Dapplo.Config.Ini.IniFileContainer)">
            <summary>
                Process an Rest URI, this can be used to read or write values via e.g. a HttpListener
                format:
                schema://hostname:port/IniConfig/Command/Applicationname/Configname/Section/Property/NewValue(optional)?query
                schema is not important, this can be an application specific thing
                hostname is not important, this can be an application specific thing
                port is not important, this can be an application specific thing
                The command is get/set/add/remove/reset
                the Applicationname and Configname must be registered by new IniConfig(Applicationname,Configname)
                The Section is that which is used in the IniSection
                The property needs to be available
                NewValue is optional (read) can be used to set the property (write)
                The query can be used to add values to lists (?item1&amp;item2&amp;item2) or dictionaries (?key1=value1&amp;
                key2=value2)
                Or when removing from lists (?item1&amp;item2&amp;item2) or dictionaries (?key1&amp;key2)
                P.S.
                You can use the ProtocolHandler to register a custom URL protocol.
            </summary>
            <param name="restUri">Uri</param>
            <param name="iniFileContainer">IniFileContainer</param>
            <returns>IniRestCommand with all details and the result</returns>
        </member>
        <member name="T:Dapplo.Config.Ini.Rest.IniRestCommand">
            <summary>
                This is a container for the IniRest, it has all the needed information to process
            </summary>
        </member>
        <member name="P:Dapplo.Config.Ini.Rest.IniRestCommand.Application">
            <summary>
                The application for this rest command
            </summary>
        </member>
        <member name="P:Dapplo.Config.Ini.Rest.IniRestCommand.Command">
            <summary>
                The command to process
            </summary>
        </member>
        <member name="P:Dapplo.Config.Ini.Rest.IniRestCommand.File">
            <summary>
                The ini file for this rest command
            </summary>
        </member>
        <member name="P:Dapplo.Config.Ini.Rest.IniRestCommand.Results">
            <summary>
                The IniValues that were specified for the get/set/reset or add/remove
            </summary>
        </member>
        <member name="P:Dapplo.Config.Ini.Rest.IniRestCommand.Section">
            <summary>
                The ini-section for this rest command
            </summary>
        </member>
        <member name="P:Dapplo.Config.Ini.Rest.IniRestCommand.Target">
            <summary>
                For add / remove we NEED a target, for set/reset it's possible to specify one
            </summary>
        </member>
        <member name="P:Dapplo.Config.Ini.Rest.IniRestCommand.Values">
            <summary>
                These values are only keys when get, reset or remove, key/values when set or add
            </summary>
        </member>
        <member name="T:Dapplo.Config.Ini.Rest.IniRestCommands">
            <summary>
                The supported commands for the ini-REST api
            </summary>
        </member>
        <member name="F:Dapplo.Config.Ini.Rest.IniRestCommands.Set">
            <summary>
                Set a value
            </summary>
        </member>
        <member name="F:Dapplo.Config.Ini.Rest.IniRestCommands.Get">
            <summary>
                Get a value
            </summary>
        </member>
        <member name="F:Dapplo.Config.Ini.Rest.IniRestCommands.Reset">
            <summary>
                Reset a value (to it's default)
            </summary>
        </member>
        <member name="F:Dapplo.Config.Ini.Rest.IniRestCommands.Add">
            <summary>
                Add a value to a collection
            </summary>
        </member>
        <member name="F:Dapplo.Config.Ini.Rest.IniRestCommands.Remove">
            <summary>
                Remove a value from a collection
            </summary>
        </member>
    </members>
</doc>
